<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Justctf2025</title>
    <link href="/2025/08/13/Justctf2025/"/>
    <url>/2025/08/13/Justctf2025/</url>
    
    <content type="html"><![CDATA[<h2 id="Satellite"><a href="#Satellite" class="headerlink" title="Satellite"></a>Satellite</h2><p>一道misc+re的题</p><p>给了一个流量包，直接wireshark分析，这一行非常清楚的flag字样，点击看到了text，猜测是密文</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508031234442.png" alt="image-20250803123354221"></p><p>{“text”:  “5771D410  CFFE844D<br>24B50FCB  BBDC1973<br>A7A935E5  C3468242<br>950DFCCE  94794B06<br>7F876A21  5D96EE09”}</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508031241616.png" alt="image-20250803124120526"></p><p>可以通过查找字符串，找到相关语句，然后交叉引用找到主函数，这里就是找到的加密函数位置，是一个tea加密，没啥变化，可以直接写脚本解密</p><p>注意key的提取，从dword_14B98[98]开始取，一共四位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> c_uint32<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tea_decrypt</span>(<span class="hljs-params">v, key, delta, rounds=<span class="hljs-number">32</span></span>):<br>    v0 = c_uint32(v[<span class="hljs-number">0</span>])<br>    v1 = c_uint32(v[<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">sum</span> = c_uint32(<span class="hljs-number">0xC6EF3720</span>)<br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rounds):<br>        v1.value -= ((v0.value &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">2</span>]) ^ (v0.value + <span class="hljs-built_in">sum</span>.value) ^ ((v0.value &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">3</span>])<br>        v0.value -= ((v1.value &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">0</span>]) ^ (v1.value + <span class="hljs-built_in">sum</span>.value) ^ ((v1.value &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">1</span>])<br>        <span class="hljs-built_in">sum</span>.value += delta<br><br>    <span class="hljs-keyword">return</span> v0.value, v1.value<br><br>key = [<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x9ABCDEF0</span>, <span class="hljs-number">0x11111111</span>, <span class="hljs-number">0x22222222</span>]<br><br>cipher_hex = <span class="hljs-string">&quot;5771D410CFFE844D24B50FCBBBDC1973A7A935E5C3468242950DFCCE94794B067F876A215D96EE09&quot;</span><br>cipher_bytes = <span class="hljs-built_in">bytes</span>.fromhex(cipher_hex)<br><br>cipher_blocks = [<span class="hljs-built_in">int</span>.from_bytes(cipher_bytes[i:i + <span class="hljs-number">4</span>], byteorder=<span class="hljs-string">&quot;little&quot;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(cipher_bytes), <span class="hljs-number">4</span>)]<br><br>delta = <span class="hljs-number">0x61C88647</span><br><br>plaintext = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(cipher_blocks), <span class="hljs-number">2</span>):<br>    dec_v0, dec_v1 = tea_decrypt(cipher_blocks[i:i + <span class="hljs-number">2</span>], key, delta)<br>    plaintext += dec_v0.to_bytes(<span class="hljs-number">4</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>) + dec_v1.to_bytes(<span class="hljs-number">4</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[+] UTF-8 Decode (fallback with replacement):&quot;</span>)<br>    <span class="hljs-built_in">print</span>(plaintext.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;replace&#x27;</span>))<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[!] UTF-8 decode failed.&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>justCTF{TheConnection_w4s_interrupted}</p><h2 id="baby-goes-re"><a href="#baby-goes-re" class="headerlink" title="baby-goes-re"></a>baby-goes-re</h2><p>一个go语言程序，先来简单了解一下</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508041821100.png" alt="image-20250804182142963"></p><p>接口调用方式（<code>itab</code>, <code>rtype</code>, <code>interface&#123;&#125;</code>）</p><p>标准库调用（<code>fmt.Fprintln</code>, <code>fmt.Fprint</code>, <code>fmt.Fscanln</code>）</p><p>调用 <code>main_CheckFlag</code>-加密函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508041825813.png" alt="image-20250804182508726"></p><p>主函数就是从这个大数据模块：从 <code>aSmallMapWithNo + 3605</code> 开始，共 338660 字节，然后调用main_CheckFlag函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508041827021.png" alt="image-20250804182735934"></p><p>加密过程简单的来说就是</p><p>flag 的第 k 个字符必须等于    babymemory[51*k + 4919]</p><p>flag的字符长度为53，k从0-52，即babymemory 起始地址：0x4CA8C0 + 3605 &#x3D; 0x4CB5F5</p><p>为了方便直接用idapython，也可以把aSmallMapWithNo内容dump出来然后解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">import</span> idautils<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_flag</span>():<br>    base_addr = <span class="hljs-number">0x4CA8C0</span><br>    offset = <span class="hljs-number">3605</span><br>    positions = []<br>    current = <span class="hljs-number">4919</span> <br>    positions.append(current)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">53</span>):<br>        current += <span class="hljs-number">4971</span> + <span class="hljs-number">51</span> * (i - <span class="hljs-number">1</span>)<br>        positions.append(current)<br><br>    flag = []<br>    <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> positions:<br>        addr = base_addr + offset + pos<br>        byte_val = idc.get_wide_byte(addr)<br><br>        flag_char = <span class="hljs-built_in">chr</span>(byte_val)<br>        flag.append(flag_char)<br><br>    full_flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nflag:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(full_flag)<br>    <br>    <span class="hljs-keyword">return</span> full_flag<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    extract_flag()<br><br><br></code></pre></td></tr></table></figure><p>justCTF{W3lc0m3_t0_R3v1NG!_Th4t_w45nt-s0-B4d-w45_1t?}</p><h2 id="6pack"><a href="#6pack" class="headerlink" title="6pack"></a>6pack</h2><p>依旧是misc+re的题</p><p>先看go语言程序，找到main函数位置</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508051554682.png" alt="image-20250805155417483"></p><p>接着分析调用的一些函数</p><p>sub_4C8820函数用于创建ipv6 header</p><p>sub_4CA0E0函数发送数据包</p><p>sub_4CABA0函数使用flate&#x2F;zlib解压并读取所有数据，从这里就可以推测要分析的代码应该就在给的流量包里面</p><p>流量包分析提取数据只能交给misc师傅来提取了，过程也是很艰辛的，最后得到了一个exe文件</p><hr><p>得到的exe文件有一层upx壳，一键脱壳就行</p><ol><li><p>主函数的逻辑就是，先输入一个参数，要求在30720-32767之间，这里得要爆破，如果传入的参数不对，后续通过动调得到的代码就不对，这里的v12是密钥，密钥判断</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508051637068.png"></p></li><li><p>sub_7FF65E8E2730函数的作用是读取给的6-pack文件，找到.go.runtimeinfo节，然后读取加密的shellcode</p><p>注意放在同一个文件夹下，动调的时候要用到，不然动调不起来。</p></li><li><p>sub_7FF65E8E26E0函数，使用 SystemFunction033 解密 shellcode，这里就涉及到第二个参数，其实就是flag。这里真实的逻辑是一个smc，动调的时候能够解密得到可执行代码</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508052318147.png" alt="image-20250805231818999"></p><p>这里经过动调之后把SystemFunction033的字节按c&#x2F;p可以识别成函数，这里有一个长度判断，就是第二个参数（flag的长度，我们要把传入的参数改为36</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508051753913.png" alt="image-20250805175319812"></p><p>这里就是一个很明显的smc，动调过之后把byte_1B8CCB50100字节进行反编译就能得到我们要分析的代码</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508051753888.png" alt="image-20250805175338800"></p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508052326869.png" alt="image-20250805232641737"></p><p>主要代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c#">_BOOL8 __<span class="hljs-function">fastcall <span class="hljs-title">sub_1A3CCFA0100</span>(<span class="hljs-params">__int64 a1, unsigned __int64 a2</span>)</span><br>&#123;<br>  <span class="hljs-keyword">void</span> (__fastcall *v2)(<span class="hljs-built_in">char</span> *); <span class="hljs-comment">// rax</span><br>  __int64 v3; <span class="hljs-comment">// rcx</span><br>  __int64 v4; <span class="hljs-comment">// rax</span><br>  __int64 n12; <span class="hljs-comment">// [rsp+28h] [rbp-48h]</span><br>  _QWORD v7[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-40h] BYREF</span><br>  unsigned __int64 v8; <span class="hljs-comment">// [rsp+50h] [rbp-20h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+58h] [rbp-18h]</span><br>  unsigned __int64 v10; <span class="hljs-comment">// [rsp+60h] [rbp-10h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+68h] [rbp-8h]</span><br><br>  v11 = a1;<br>  v10 = a2;<br>  v9 = <span class="hljs-number">0L</span>L;<br>  v8 = <span class="hljs-number">0L</span>L;<br>  memset(v7, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v7));<br>  n12 = <span class="hljs-number">0L</span>L;<br>  v2 = sub_1A3CCFA01F8(NtCurrentPeb()-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink-&gt;Flink-&gt;Flink[<span class="hljs-number">2</span>].Flink, dword_1A3CCFA0253);<br>  v2(aBcryptDll);                               <span class="hljs-comment">// &quot;bcrypt.dll&quot;</span><br>  v8 = v10 / <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v3 = v11;<br>    v11 += <span class="hljs-number">3L</span>L;<br>    ((&amp;loc_1A3CCFA026D + <span class="hljs-number">2</span>))(v3, v7);<br>    v4 = v9;<br>    LOBYTE(v4) = memcmp(&amp;loc_1A3CCFA03CF + <span class="hljs-number">8</span> * v9 + <span class="hljs-number">1</span>, v7, <span class="hljs-number">0x20</span>uLL) == <span class="hljs-number">0</span>;<br>    n12 += v4;<br>    v9 += <span class="hljs-number">4L</span>L;<br>    --v8;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v8 );<br>  <span class="hljs-keyword">return</span> n12 != <span class="hljs-number">12</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的加密函数（loc_2320BE5026D + 2），这个是没有自动识别的函数，自己手动编译一下，这是主要的加密内容，这个函数对 3 字节输入计算 SHA256 哈希，输出 32 字节</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508052329102.png" alt="image-20250805232946969"></p><p>哈希值就是unk_1B8CCB503D0[384]内容，一共12个正确的哈希值</p><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>hashes = [<br>    <span class="hljs-comment"># 1</span><br>    <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x35</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x16</span>,<br>    <span class="hljs-comment"># 2</span><br>    <span class="hljs-number">0x73</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x30</span>,<br>    <span class="hljs-comment"># 3</span><br>    <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xEA</span>,<br>    <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x0A</span>,<br>    <span class="hljs-comment"># 4</span><br>    <span class="hljs-number">0x67</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x81</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x29</span>,<br>    <span class="hljs-comment"># 5</span><br>    <span class="hljs-number">0x16</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x87</span>,<br>    <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x59</span>,<br>    <span class="hljs-comment"># 6</span><br>    <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x8D</span>,<br>    <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x96</span>,<br>    <span class="hljs-comment"># 7</span><br>    <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0A</span>,<br>    <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-comment"># 8</span><br>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x59</span>,<br>    <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x89</span>,<br>    <span class="hljs-comment"># 9</span><br>    <span class="hljs-number">0x93</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5C</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xAA</span>,<br>    <span class="hljs-comment"># 10</span><br>    <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x83</span>,<br>    <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xC0</span>,<br>    <span class="hljs-comment"># 11</span><br>    <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x29</span>,<br>    <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x29</span>,<br>    <span class="hljs-comment"># 12</span><br>    <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>,<br>    <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x87</span><br>]<br><br><span class="hljs-comment"># 转为 bytes</span><br>hashes_bytes = <span class="hljs-built_in">bytes</span>(hashes)<br><span class="hljs-comment"># 分割为 12 个 32 字节块</span><br>hash_list = [hashes_bytes[i:i+<span class="hljs-number">32</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">384</span>, <span class="hljs-number">32</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute_force_3byte_sha256</span>(<span class="hljs-params">target_hash</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000000</span>):  <span class="hljs-comment"># 0x000000 ~ 0xFFFFFF</span><br>        b1 = (i &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span><br>        b2 = (i &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span><br>        b3 = i &amp; <span class="hljs-number">0xFF</span><br>        data = <span class="hljs-built_in">bytes</span>([b1, b2, b3])<br>        h = hashlib.sha256(data).digest()<br>        <span class="hljs-keyword">if</span> h == target_hash:<br>            <span class="hljs-keyword">return</span> data<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>result = []<br><span class="hljs-keyword">for</span> idx, h <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(hash_list):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Brute-forcing block <span class="hljs-subst">&#123;idx+<span class="hljs-number">1</span>&#125;</span>/12...&quot;</span>)<br>    plain = brute_force_3byte_sha256(h)<br>    <span class="hljs-keyword">if</span> plain <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] Failed to crack block <span class="hljs-subst">&#123;idx+<span class="hljs-number">1</span>&#125;</span>&quot;</span>)<br>        result.append(<span class="hljs-string">b&quot;???&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;    Found: <span class="hljs-subst">&#123;plain.<span class="hljs-built_in">hex</span>()&#125;</span> -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">repr</span>(plain)&#125;</span>&quot;</span>)<br>        result.append(plain)<br><br>flag = <span class="hljs-string">b&quot;&quot;</span>.join([block[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> result[::-<span class="hljs-number">1</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;argv[1] = <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(flag)&#125;</span> bytes&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>L3Hctf部分wp</title>
    <link href="/2025/08/02/L3Hctf%E9%83%A8%E5%88%86wp/"/>
    <url>/2025/08/02/L3Hctf%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<h1 id="TemporalParadox"><a href="#TemporalParadox" class="headerlink" title="TemporalParadox"></a>TemporalParadox</h1><p>写这一题用了快半天的时间www，反正得先把函数都理解透了才行</p><p>先找到主函数入口，有一个花指令，nop掉之后反编译</p><p>这里直接跳转，中间插入的就是花指令</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507162340547.png" alt="image-20250716234017426"></p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930772.png" alt="image-20250716224607175"></p><p>注意，以下函数运行在所给的时间节点下v61 &gt; 1751990400 &amp;&amp; v61 &lt;&#x3D; 1752052051，主要看sub_140001963函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930156.png" alt="image-20250716231843615"></p><p>具体分析看注释</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507162319533.png" alt="image-20250716231900454"></p><p>大概就是通过计算两个表达式是否相等来决定字符串的拼接，然后计算字符串的md5的值看是否与所给的密文相等</p><p>Salt: tlkyeueq7fej8vtzitt26yl24kswrgm5  固定值，通过以下代码得到</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">import math<br><br>dword_14000B060 = [<br>    <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0x000000B4</span>, <span class="hljs-number">0xFFFFFF94</span>, <span class="hljs-number">0xFFFFFF86</span>, <span class="hljs-number">0xFFFFFF9A</span>, <span class="hljs-number">0xFFFFFF8A</span>, <span class="hljs-number">0xFFFFFF9A</span>, <span class="hljs-number">0xFFFFFF8E</span>,<br>    <span class="hljs-number">0xFFE7AC2D</span>, <span class="hljs-number">0x000000A2</span>, <span class="hljs-number">0xFFFFFF9A</span>, <span class="hljs-number">0x000000AE</span>, <span class="hljs-number">0xFFB70487</span>, <span class="hljs-number">0x000000D2</span>, <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0x000000DE</span>,<br>    <span class="hljs-number">0xFFFFFF96</span>, <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0xFFFFE65F</span>, <span class="hljs-number">0xFFF7E40F</span>, <span class="hljs-number">0xFFFFFF86</span>, <span class="hljs-number">0x000000B4</span>, <span class="hljs-number">0xFFFFE65F</span>,<br>    <span class="hljs-number">0xFFFF1957</span>, <span class="hljs-number">0xFFFFFF94</span>, <span class="hljs-number">0xFFFFFF8C</span>, <span class="hljs-number">0xFFFFFF88</span>, <span class="hljs-number">0x000000C6</span>, <span class="hljs-number">0xFFFFFF98</span>, <span class="hljs-number">0xFFFFFF92</span>, <span class="hljs-number">0xFFFD4C05</span><br>]<br><br>salt_chars = []<br><br>for v9 <span class="hljs-keyword">in</span> dword_14000B060:<br>    if v9 &gt;= <span class="hljs-number">0x80000000</span>:  # 转换负数<br>        v9 -= <span class="hljs-number">0x100000000</span><br>    if v9 &gt;= <span class="hljs-number">0</span>:<br>        v10 = v9 // <span class="hljs-number">3</span> + <span class="hljs-number">48</span><br><span class="hljs-symbol">    else:</span><br>        if v9 &gt;= -<span class="hljs-number">728</span>:<br>            v10 = ~v9<br><span class="hljs-symbol">        else:</span><br>            v10 = <span class="hljs-keyword">int</span>(math<span class="hljs-number">.</span>log(-v9) / <span class="hljs-number">1.09861228866811</span> - <span class="hljs-number">6.0</span> + <span class="hljs-number">48.0</span>)<br>    salt_chars<span class="hljs-number">.</span>append(chr(v10))<br><br>salt = <span class="hljs-string">&#x27;&#x27;.join(salt_chars)</span><br><span class="hljs-string">print(&quot;Salt:&quot;, salt)</span><br></code></pre></td></tr></table></figure><p>r,a,b,x,y都与随机数生成有关，cipher的生成来自于函数sub_14000184D，同时也与两个置换盒有关</p><p>第 1～3 轮每轮用 sub_1400016A0的片段 xor 进状态，再做 s盒与p盒变换。</p><p>第 4 轮取第 4 片段 XOR，再做 仅 S盒；最后取第 5 片段再 xor，返回 cipher。</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507162331214.png" alt="image-20250716233103122"></p><p>这里的判断条件也与随机生成数有关，最终可以通过爆破来实现</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930916.png" alt="image-20250716233149894"></p><p>整个过程就可以分为字符串为salt&#x3D;xxx&amp;t&#x3D;xxx&amp;r&#x3D;xxx&amp;a&#x3D;xxx&amp;b&#x3D;xxx&amp;x&#x3D;xxx&amp;y&#x3D;xxx和salt&#x3D;xxx&amp;t&#x3D;xxx&amp;r&#x3D;xxx&amp;cipher&#x3D;xxx两种进行爆破（最终结果是满足salt&#x3D;xxx&amp;t&#x3D;xxx&amp;r&#x3D;xxx&amp;a&#x3D;xxx&amp;b&#x3D;xxx&amp;x&#x3D;xxx&amp;y&#x3D;xxx这个字符串爆破成功）</p><p>这里贴出脚本，由于要用到openssl这个库，我直接在虚拟机上运行代码了，安装这个库也比在windows端方便多</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-meta">#include &lt;stdio.h&gt;</span><br><span class="hljs-meta">#include &lt;stdint.h&gt;</span><br><span class="hljs-meta">#include &lt;string.h&gt;</span><br><span class="hljs-meta">#include &lt;math.h&gt;</span><br><span class="hljs-meta">#include &lt;openssl/md5.h&gt;</span><br><span class="hljs-meta">#include &lt;openssl/sha.h&gt;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SALT &quot;tlkyeueq7fej8vtzitt26yl24kswrgm5&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TARGET_MD5 &quot;8a2fc1e9e2830c37f8a7f51572a640aa&quot;</span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> uint8_t SBOX[<span class="hljs-number">16</span>] = &#123;<br>    <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0x03</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x0C</span>,<br>    <span class="hljs-number">0x05</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x07</span><br>&#125;;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> uint8_t PERM[<span class="hljs-number">16</span>] = &#123;<br>    <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>,<br>    <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>,<br>    <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>,<br>    <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> inline uint32_t <span class="hljs-title">truncate_to_u32</span>(<span class="hljs-params">uint64_t v</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (uint32_t)(v &amp; <span class="hljs-number">0xFFFFFFFF</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> int32_t <span class="hljs-title">to_signed32</span>(<span class="hljs-params">uint32_t v</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (v &amp; <span class="hljs-number">0x80000000</span>)<br>        <span class="hljs-keyword">return</span> (int32_t)(v - <span class="hljs-number">0x100000000</span>);<br>    <span class="hljs-keyword">return</span> (int32_t)v;<br>&#125;<br><br><span class="hljs-comment">// 伪随机数生成器</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prng_generate</span>(<span class="hljs-params">uint32_t *state, uint32_t *output</span>)</span> &#123;<br>    uint32_t val = *state;<br>    uint32_t v1 = (((val &lt;&lt; <span class="hljs-number">13</span>) ^ val) &gt;&gt; <span class="hljs-number">17</span>) ^ ((val &lt;&lt; <span class="hljs-number">13</span>) ^ val);<br>    uint32_t new_val = (<span class="hljs-number">32</span> * v1) ^ v1;<br>    *state = new_val;<br>    *output = new_val &amp; <span class="hljs-number">0x7FFFFFFF</span>;<br>&#125;<br><br><span class="hljs-function">uint32_t <span class="hljs-title">apply_sbox</span>(<span class="hljs-params">uint32_t input</span>)</span> &#123;<br>    uint32_t s = input;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        uint8_t index = (s &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0xF</span>;<br>        s = ((s &lt;&lt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>) | SBOX[index];<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function">uint32_t <span class="hljs-title">apply_pbox</span>(<span class="hljs-params">uint32_t input</span>)</span> &#123;<br>    uint32_t s = input;<br>    uint32_t result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;<br>        <span class="hljs-built_in">int</span> src_bit = PERM[i] - <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">if</span> ((s &gt;&gt; src_bit) &amp; <span class="hljs-number">1</span>) &#123;<br>            result |= (<span class="hljs-number">1</span> &lt;&lt; i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 一轮加密变换</span><br><span class="hljs-function">uint32_t <span class="hljs-title">perform_round</span>(<span class="hljs-params">uint32_t state</span>)</span> &#123;<br>    state = apply_sbox(state);<br>    state = apply_pbox(state);<br>    <span class="hljs-keyword">return</span> state;<br>&#125;<br><br><span class="hljs-comment">// 生成某轮轮密钥</span><br><span class="hljs-function">uint16_t <span class="hljs-title">generate_round_key</span>(<span class="hljs-params">uint32_t key, <span class="hljs-built_in">int</span> round</span>)</span> &#123;<br>    uint32_t shifted = (key &lt;&lt; (<span class="hljs-number">4</span> * (round - <span class="hljs-number">1</span>))) &amp; <span class="hljs-number">0xFFFFFFFF</span>;<br>    <span class="hljs-keyword">return</span> (shifted &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFFFF</span>;<br>&#125;<br><br><span class="hljs-comment">// 加密主函数，生成cipher</span><br><span class="hljs-function">uint16_t <span class="hljs-title">encrypt_token</span>(<span class="hljs-params">uint32_t timestamp, uint32_t round_key</span>)</span> &#123;<br>    uint32_t state = timestamp;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> round = <span class="hljs-number">1</span>; round &lt;= <span class="hljs-number">3</span>; round++) &#123;<br>        uint16_t rk = generate_round_key(round_key, round);<br>        state ^= rk;<br>        state = perform_round(state);<br>    &#125;<br><br>    uint16_t rk4 = generate_round_key(round_key, <span class="hljs-number">4</span>);<br>    state ^= rk4;<br>    state = apply_sbox(state);<br><br>    uint16_t rk5 = generate_round_key(round_key, <span class="hljs-number">5</span>);<br>    uint16_t final_state = (uint16_t)(state ^ rk5);<br>    <span class="hljs-keyword">return</span> final_state;<br>&#125;<br><br><span class="hljs-comment">// 计算字符串的MD5并转hex</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compute_md5_hex</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* input, <span class="hljs-built_in">char</span> output[<span class="hljs-number">33</span>]</span>)</span> &#123;<br>    unsigned <span class="hljs-built_in">char</span> digest[MD5_DIGEST_LENGTH];<br>    MD5((<span class="hljs-keyword">const</span> unsigned <span class="hljs-built_in">char</span>*)input, strlen(input), digest);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; MD5_DIGEST_LENGTH; i++) &#123;<br>        sprintf(output + i * <span class="hljs-number">2</span>, <span class="hljs-string">&quot;%02x&quot;</span>, digest[i]);<br>    &#125;<br>    output[<span class="hljs-number">32</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 计算字符串的SHA1并转hex</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compute_sha1_hex</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* input, <span class="hljs-built_in">char</span> output[<span class="hljs-number">41</span>]</span>)</span> &#123;<br>    unsigned <span class="hljs-built_in">char</span> digest[SHA_DIGEST_LENGTH];<br>    SHA1((<span class="hljs-keyword">const</span> unsigned <span class="hljs-built_in">char</span>*)input, strlen(input), digest);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; SHA_DIGEST_LENGTH; i++) &#123;<br>        sprintf(output + i * <span class="hljs-number">2</span>, <span class="hljs-string">&quot;%02x&quot;</span>, digest[i]);<br>    &#125;<br>    output[<span class="hljs-number">40</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span> &#123;<br>    <span class="hljs-built_in">char</span> query[<span class="hljs-number">512</span>];<br>    <span class="hljs-built_in">char</span> md5_str[<span class="hljs-number">33</span>];<br>    <span class="hljs-built_in">char</span> sha1_str[<span class="hljs-number">41</span>];<br><br>    <span class="hljs-keyword">for</span> (uint32_t t = <span class="hljs-number">1751990400</span>; t &lt;= <span class="hljs-number">1752052051</span>; t++) &#123;<br>        uint32_t state = t;<br>        uint32_t output;<br>        prng_generate(&amp;state, &amp;output);<br>        uint32_t cnt = output;<br><br>        uint32_t a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>        uint32_t i = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (i &lt; cnt) &#123;<br>            prng_generate(&amp;state, &amp;a);<br>            prng_generate(&amp;state, &amp;b);<br>            prng_generate(&amp;state, &amp;x);<br>            prng_generate(&amp;state, &amp;y);<br>            prng_generate(&amp;state, &amp;cnt);<br>            i++;<br>        &#125;<br><br>        prng_generate(&amp;state, &amp;output);<br>        uint32_t r = output;<br><br>        int32_t sa = to_signed32(a);<br>        int32_t sb = to_signed32(b);<br>        int32_t sx = to_signed32(x);<br>        int32_t sy = to_signed32(y);<br><br>        <span class="hljs-built_in">double</span> val1 = pow((<span class="hljs-built_in">double</span>)(sa | sx), <span class="hljs-number">2.0</span>);<br>        <span class="hljs-built_in">double</span> val2 = pow((<span class="hljs-built_in">double</span>)(sb | sy), <span class="hljs-number">2.0</span>);<br><br>        <span class="hljs-keyword">if</span> (fabs(<span class="hljs-number">0x61</span> * val1 - <span class="hljs-number">0xb</span> * val2) &lt; <span class="hljs-number">1e-9</span>) &#123;<br>            uint16_t cipher = encrypt_token(t, r);<br>            snprintf(query, <span class="hljs-keyword">sizeof</span>(query), <span class="hljs-string">&quot;salt=%s&amp;t=%u&amp;r=%u&amp;cipher=%u&quot;</span>,<br>                    SALT, t, r, cipher);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            snprintf(query, <span class="hljs-keyword">sizeof</span>(query), <span class="hljs-string">&quot;salt=%s&amp;t=%u&amp;r=%u&amp;a=%u&amp;b=%u&amp;x=%u&amp;y=%u&quot;</span>,<br>                    SALT, t, r, a, b, x, y);<br>        &#125;<br><br>        compute_md5_hex(query, md5_str);<br>        <span class="hljs-keyword">if</span> (strcmp(md5_str, TARGET_MD5) == <span class="hljs-number">0</span>) &#123;<br>            compute_sha1_hex(query, sha1_str);<br>            printf(<span class="hljs-string">&quot;[+] Found!\nQuery: %s\nMD5: %s\nSHA1: %s\n&quot;</span>,<br>                query, md5_str, sha1_str);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930921.png" alt="image-20250716233822571"></p><h1 id="终焉之门"><a href="#终焉之门" class="headerlink" title="终焉之门"></a>终焉之门</h1><p>直接看看不到什么有用的代码，就直接动调，随便翻翻就看到了这个多层base64，解密一下hhhhh</p><p>后来知道这一段是用来循环异或加密得到主要逻辑的</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930627.png" alt="image-20250717165521134"></p><p>aVersion430Core动调的时候双击进去看看，主加密内容放在了.data段</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930246.png" alt="image-20250718000630226"></p><p>这段代码实现了一个运行在 GPU 上的简单虚拟机，通过执行<code>opcodes</code>中的指令序列，对栈数据进行运算</p><p>这里是核心校验</p><p>栈中的前 16 个数，必须等于 <code>cipher[i] - 20</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930578.png" alt="image-20250718215943468"></p><hr><p>还可以通过另一个方法得到主要的逻辑</p><p>我先搜索字符串，找到那么一串base64编码，然后交叉引用找到函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930465.png" alt="image-20250719213918550"></p><p>这个加密函数调用aVersion430Core的内容与base64编码进行循环异或</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930198.png" alt="image-20250719214002648"></p><p>写出代码可以直接跑出内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-comment">#version 430 core</span><br><br>layout(local_size_x = <span class="hljs-number">1</span>, local_size_y = <span class="hljs-number">1</span>, local_size_z = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span>;<br>layout(std430, binding = <span class="hljs-number">0</span>) buffer OpCodes  &#123; <span class="hljs-built_in">int</span> opcodes[]; &#125;;<br>layout(std430, binding = <span class="hljs-number">2</span>) buffer CoConsts &#123; <span class="hljs-built_in">int</span> co_consts[]; &#125;;<br>layout(std430, binding = <span class="hljs-number">3</span>) buffer Cipher   &#123; <span class="hljs-built_in">int</span> cipher[<span class="hljs-number">16</span>]; &#125;;<br>layout(std430, binding = <span class="hljs-number">4</span>) buffer Stack    &#123; <span class="hljs-built_in">int</span> stack_data[<span class="hljs-number">256</span>]; &#125;;<br>layout(std430, binding = <span class="hljs-number">5</span>) buffer Out      &#123; <span class="hljs-built_in">int</span> verdict;         &#125;;<br><br>const <span class="hljs-built_in">int</span> MaxInstructionCount = <span class="hljs-number">1000</span>;<br><br>void main()<br>&#123;<br>    <span class="hljs-keyword">if</span> (gl_GlobalInvocationID.x &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>    uint ip = 0u;<br>    <span class="hljs-built_in">int</span> sp = <span class="hljs-number">0</span>;<br>    verdict = -<span class="hljs-number">233</span>;<br><br>    <span class="hljs-keyword">while</span> (ip &lt; uint(MaxInstructionCount))<br>    &#123;<br>        <span class="hljs-built_in">int</span> opcode = opcodes[<span class="hljs-built_in">int</span>(ip)];<br>        <span class="hljs-built_in">int</span> arg    = opcodes[<span class="hljs-built_in">int</span>(ip)+<span class="hljs-number">1</span>];<br><br>        switch (opcode)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                stack_data[sp++] = co_consts[arg];<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> b = stack_data[--sp];<br>                <span class="hljs-built_in">int</span> a = stack_data[--sp];<br>                stack_data[sp++] = a + b;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> a = stack_data[--sp];<br>                <span class="hljs-built_in">int</span> b = stack_data[--sp];<br>                stack_data[sp++] = a - b;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> b = stack_data[--sp];<br>                <span class="hljs-built_in">int</span> a = stack_data[--sp];<br>                stack_data[sp++] = a ^ b;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> b = stack_data[--sp];<br>                <span class="hljs-built_in">int</span> a = stack_data[--sp];<br>                stack_data[sp++] = <span class="hljs-built_in">int</span>(a == b);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>            &#123;<br>                <span class="hljs-built_in">bool</span> ok = true;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (stack_data[i] != (cipher[i] - <span class="hljs-number">20</span>))<br>                    &#123; <br>                        ok = false; <br>                        <span class="hljs-keyword">break</span>; <br>                    &#125;<br>                &#125;<br>                verdict = ok ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">18</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> c = stack_data[--sp];<br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) ip = uint(arg);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            default:<br>                verdict = <span class="hljs-number">500</span>;<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        ip+=<span class="hljs-number">2</span>;<br>    &#125;<br>    verdict = <span class="hljs-number">501</span>;<br>&#125;<br>l <br><br>进程已结束，退出代码为 <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><hr><p>从这三个地址里得到opcodes，co_consts和cipher的内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507182250461.png" alt="image-20250718225015357"></p><p>这里贴出主函数的内容以及注释部分</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c#">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">sub_7FF656701CF0</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> a1</span>)</span><br>&#123;<br>  <span class="hljs-built_in">int</span> v1; <span class="hljs-comment">// ebx</span><br>  __m128i v2; <span class="hljs-comment">// xmm6</span><br>  unsigned <span class="hljs-built_in">int</span> v3; <span class="hljs-comment">// eax</span><br>  unsigned <span class="hljs-built_in">int</span> v4; <span class="hljs-comment">// r13d</span><br>  unsigned <span class="hljs-built_in">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-built_in">int</span> v6; <span class="hljs-comment">// eax</span><br>  __int64 v7; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-built_in">bool</span> v8; <span class="hljs-comment">// dl</span><br>  <span class="hljs-built_in">bool</span> v9; <span class="hljs-comment">// al</span><br>  <span class="hljs-built_in">int</span> v10; <span class="hljs-comment">// eax</span><br>  <span class="hljs-built_in">char</span> *v12; <span class="hljs-comment">// r15</span><br>  unsigned <span class="hljs-built_in">int</span> v13; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-built_in">int</span> v14; <span class="hljs-comment">// eax</span><br>  unsigned <span class="hljs-built_in">int</span> v15; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-built_in">int</span> v16; <span class="hljs-comment">// edx</span><br>  <span class="hljs-built_in">int</span> v17; <span class="hljs-comment">// eax</span><br>  <span class="hljs-built_in">int</span> v18; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-built_in">int</span> v19; <span class="hljs-comment">// eax</span><br>  unsigned <span class="hljs-built_in">int</span> v20; <span class="hljs-comment">// [rsp+38h] [rbp-100h]</span><br>  unsigned <span class="hljs-built_in">int</span> v21; <span class="hljs-comment">// [rsp+3Ch] [rbp-FCh]</span><br>  unsigned <span class="hljs-built_in">int</span> v22; <span class="hljs-comment">// [rsp+40h] [rbp-F8h]</span><br>  unsigned <span class="hljs-built_in">int</span> v23; <span class="hljs-comment">// [rsp+44h] [rbp-F4h]</span><br>  unsigned <span class="hljs-built_in">int</span> v24; <span class="hljs-comment">// [rsp+48h] [rbp-F0h]</span><br>  <span class="hljs-built_in">int</span> v25; <span class="hljs-comment">// [rsp+4Ch] [rbp-ECh]</span><br>  __m128i v26; <span class="hljs-comment">// [rsp+50h] [rbp-E8h] BYREF</span><br>  <span class="hljs-built_in">int</span> v27; <span class="hljs-comment">// [rsp+6Ch] [rbp-CCh] BYREF</span><br>  <span class="hljs-built_in">char</span> Str[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+70h] [rbp-C8h] BYREF</span><br>  __int64 v29; <span class="hljs-comment">// [rsp+78h] [rbp-C0h]</span><br>  __int64 v30; <span class="hljs-comment">// [rsp+80h] [rbp-B8h]</span><br>  __int64 v31; <span class="hljs-comment">// [rsp+88h] [rbp-B0h]</span><br>  __int64 v32[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [rsp+90h] [rbp-A8h] BYREF</span><br>  __int64 v33[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [rsp+C8h] [rbp-70h]</span><br><br>  v1 = <span class="hljs-number">0</span>;<br>  sub_7FF6566FE370();<br>  sub_7FF656693480(<span class="hljs-number">8256</span>);<br>  sub_7FF65668F730(<span class="hljs-number">0x500</span>u, <span class="hljs-number">0x320</span>u, <span class="hljs-string">&quot;Password Checker&quot;</span>);<span class="hljs-comment">// 创建窗口</span><br>  sub_7FF656691100(&amp;v26, <span class="hljs-number">0</span>i64, aVersion330Defi);<br>  v2 = _mm_loadu_si128(&amp;v26);<br>  v3 = sub_7FF65667E700(aVersion430Core, <span class="hljs-number">37305</span>i64);<span class="hljs-comment">// 创建计算着色器</span><br>  v20 = sub_7FF65667EEE0(v3);                   <span class="hljs-comment">// 创建着色器程序</span><br>  v21 = sub_7FF65667EFF0(<span class="hljs-number">0x2A0</span>u, &amp;unk_7FF6567030E0, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// opcodes</span><br>  v4 = sub_7FF65667EFF0(<span class="hljs-number">0x80</span>u, &amp;dword_7FF656703060, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// co_consts</span><br>  v22 = sub_7FF65667EFF0(<span class="hljs-number">0x40</span>u, &amp;unk_7FF656703020, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// cipher</span><br>  v23 = sub_7FF65667EFF0(<span class="hljs-number">0x400</span>u, &amp;unk_7FF65675F040, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// stack</span><br>  v5 = sub_7FF65667EFF0(<span class="hljs-number">4u</span>, &amp;dword_7FF656703000, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// verdict</span><br>  v33[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>i64;<br>  v24 = v5;<br>  *Str = <span class="hljs-number">0</span>i64;<br>  v29 = <span class="hljs-number">0</span>i64;<br>  v30 = <span class="hljs-number">0</span>i64;<br>  v31 = <span class="hljs-number">0</span>i64;<br>  memset(v32, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v32));<br>  *(v33 + <span class="hljs-number">5</span>) = <span class="hljs-number">0</span>i64;<br>  sub_7FF6566931A0(<span class="hljs-number">60</span>);<br>  <span class="hljs-keyword">while</span> ( !sub_7FF65668CAC0() )<br>  &#123;<br>    v6 = sub_7FF656695A40();                    <span class="hljs-comment">// 输入</span><br>    <span class="hljs-keyword">if</span> ( v6 &gt; <span class="hljs-number">0</span> &amp;&amp; v1 &lt;= <span class="hljs-number">99</span> )<br>    &#123;<br>      v7 = v1 + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        Str[v7 - <span class="hljs-number">1</span>] = v6;<br>        v1 = v7;<br>        v6 = sub_7FF656695A40();<br>        v8 = v7++ &lt;= <span class="hljs-number">99</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v8 &amp;&amp; v6 &gt; <span class="hljs-number">0</span> );<br>    &#125;<br>    v9 = sub_7FF6566958E0(<span class="hljs-number">259</span>);<br>    <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">0</span> &amp;&amp; v9 )<br>      Str[--v1] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( sub_7FF6566958E0(<span class="hljs-number">257</span>) &amp;&amp; strlen(Str) == <span class="hljs-number">40</span> &amp;&amp; !strncmp(Str, <span class="hljs-string">&quot;L3HCTF&#123;&quot;</span>, <span class="hljs-number">7u</span>i64) &amp;&amp; HIBYTE(v32[<span class="hljs-number">0</span>]) == <span class="hljs-number">125</span> )<br>    &#123;                                           <span class="hljs-comment">// 提取花括号内的32个字符</span><br>      v25 = v1;<br>      v12 = &amp;Str[<span class="hljs-number">7</span>];<br>      v13 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">do</span>                                        <span class="hljs-comment">// 将十六进制字符串转换为数值</span><br>      &#123;<br>        v17 = *v12;<br>        v18 = v12[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> ( v17 &gt; <span class="hljs-number">96</span> )<br>          v14 = v17 - <span class="hljs-number">87</span>;                       <span class="hljs-comment">// 字符转数字 (0-9, a-f, A-F)</span><br>        <span class="hljs-keyword">else</span><br>          v14 = v17 - <span class="hljs-number">48</span>;<br>        v19 = <span class="hljs-number">16</span> * v14;<br>        v15 = v13;<br>        v16 = v18 - <span class="hljs-number">48</span>;<br>        <span class="hljs-keyword">if</span> ( v18 &gt;= <span class="hljs-number">97</span> )<br>          v16 = v18 - <span class="hljs-number">87</span>;<br>        v12 += <span class="hljs-number">2</span>;<br>        v13 += <span class="hljs-number">4</span>;<br>        v27 = v16 + v19;                        <span class="hljs-comment">// 组合成一个字节</span><br>                                                <span class="hljs-comment">// 32 个字符被转换为 16 个整数，每个整数由 2 个十六进制字符组成</span><br>        sub_7FF65667F0B0(v4, &amp;v27, <span class="hljs-number">4u</span>, v15);    <span class="hljs-comment">// 将转换后的字节写入co_consts缓冲区</span><br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v32 + <span class="hljs-number">7</span> != v12 );<br>      v1 = v25;<br>      sub_7FF65667C100(v20);                    <span class="hljs-comment">// 执行计算着色器</span><br>      sub_7FF65667F180(v21, <span class="hljs-number">0</span>i64);              <span class="hljs-comment">// opcodes</span><br>      sub_7FF65667F180(v4, <span class="hljs-number">2</span>i64);               <span class="hljs-comment">// co_consts </span><br>      sub_7FF65667F180(v22, <span class="hljs-number">3</span>i64);              <span class="hljs-comment">// cipher</span><br>      sub_7FF65667F180(v23, <span class="hljs-number">4</span>i64);<br>      sub_7FF65667F180(v24, <span class="hljs-number">5</span>i64);<br>      sub_7FF65667EFE0(<span class="hljs-number">1</span>i64, <span class="hljs-number">1</span>i64, <span class="hljs-number">1</span>i64);       <span class="hljs-comment">// 执行着色器</span><br>      sub_7FF65667F140(v24, &amp;dword_7FF656703000, <span class="hljs-number">4</span>i64, <span class="hljs-number">0</span>i64);<br>      sub_7FF65667C110();<br>    &#125;<br>    sub_7FF65668FC90(a1);<br>    v26 = v2;<br>    sub_7FF656690650(&amp;v26);<br>    a1 = sub_7FF65668E170();<br>    v26 = v2;<br>    *&amp;a1 = a1;<br>    v27 = LODWORD(a1);<br>    v10 = sub_7FF656691440(&amp;v26);<br>    v26 = v2;<br>    sub_7FF656691460(v26.m128i_i64, v10, &amp;v27, <span class="hljs-number">0</span>);<br>    sub_7FF6566AB9D0(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1280</span>i64, <span class="hljs-number">0x320</span>u, <span class="hljs-number">0xFFFFFFFF</span>);<br>    sub_7FF656690690();<br>    sub_7FF6566BDA20(Str, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0xC8</span>u, <span class="hljs-number">40</span>, <span class="hljs-number">-16777216</span>);<br>    <span class="hljs-keyword">if</span> ( dword_7FF656703000 == <span class="hljs-number">1</span> )<br>      sub_7FF6566BDA20(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0x12C</span>u, <span class="hljs-number">40</span>, <span class="hljs-number">-13863680</span>);<br>    <span class="hljs-keyword">else</span><br>      sub_7FF6566BDA20(<span class="hljs-string">&quot;wrong password&quot;</span>, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0x12C</span>u, <span class="hljs-number">40</span>, <span class="hljs-number">-13162010</span>);<br>    sub_7FF6566BDA20(<span class="hljs-string">&quot;Type password and press [Enter] to check!&quot;</span>, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0x64</span>u, <span class="hljs-number">20</span>, <span class="hljs-number">-8224126</span>);<br>    sub_7FF6566BDA20(<span class="hljs-string">&quot;Press [Backspace] to delete characters.&quot;</span>, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0x82</span>u, <span class="hljs-number">20</span>, <span class="hljs-number">-8224126</span>);<br>    sub_7FF656695CE0();<br>  &#125;<br>  sub_7FF65668FAA0();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到关键信息之后，写一个解释器，看看虚拟机解释器是如何操作栈中的数据，得到加密逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python">STACK_SIZE = <span class="hljs-number">256</span><br>MAX_OPCODES = <span class="hljs-number">1000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 指令流</span><br>    opcodes = [<br>        <span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">17</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">18</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">19</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">20</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">21</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">22</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">23</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">24</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">25</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">26</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">27</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">28</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">29</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">30</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">16</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">16</span>,<span class="hljs-number">2</span>,<span class="hljs-number">17</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">18</span>,<span class="hljs-number">84</span>,<span class="hljs-number">2</span>,<span class="hljs-number">31</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span><br>    ]<br><br>    <span class="hljs-comment"># 常量池（输入）</span><br>    co_consts = [<br>        <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBF</span>,<br>        <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x00</span><br>    ]<br><br>    <span class="hljs-comment"># cipher（目标值）</span><br>    cipher = [<br>        <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x1FD</span>, <span class="hljs-number">0x150</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xDE</span>,<br>        <span class="hljs-number">0x15A</span>, <span class="hljs-number">0x197</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x1D7</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x146</span>, <span class="hljs-number">0x97</span><br>    ]<br><br>    <span class="hljs-comment"># 初始化栈</span><br>    stack_data = [<span class="hljs-number">0</span>] * STACK_SIZE<br>    sp = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 执行指令</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(opcodes):<br>        opcode = opcodes[i]<br>        arg = opcodes[i + <span class="hljs-number">1</span>]<br><br>        sp0 = sp  <span class="hljs-comment"># 保存执行前的栈指针位置</span><br><br>        <span class="hljs-keyword">if</span> opcode == <span class="hljs-number">2</span>:<br>            <span class="hljs-comment"># PUSH co_consts[arg]</span><br>            v = co_consts[arg] <span class="hljs-keyword">if</span> arg &lt; <span class="hljs-built_in">len</span>(co_consts) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            stack_data[sp] = v<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = co_consts[<span class="hljs-subst">&#123;arg&#125;</span>] = 0x<span class="hljs-subst">&#123;v:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">7</span>:<br>            <span class="hljs-comment"># ADD</span><br>            b = stack_data[sp - <span class="hljs-number">1</span>]<br>            a = stack_data[sp - <span class="hljs-number">2</span>]<br>            sp -= <span class="hljs-number">2</span><br>            stack_data[sp] = a + b<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = a + b = stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">2</span>&#125;</span>] + stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">1</span>&#125;</span>] = 0x<span class="hljs-subst">&#123;a + b:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">8</span>:<br>            <span class="hljs-comment"># SUB a - b</span><br>            b = stack_data[sp - <span class="hljs-number">1</span>]<br>            a = stack_data[sp - <span class="hljs-number">2</span>]<br>            sp -= <span class="hljs-number">2</span><br>            stack_data[sp] = a - b<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = a - b = stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">2</span>&#125;</span>] - stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">1</span>&#125;</span>] = 0x<span class="hljs-subst">&#123;a - b:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">14</span>:<br>            <span class="hljs-comment"># XOR</span><br>            b = stack_data[sp - <span class="hljs-number">1</span>]<br>            a = stack_data[sp - <span class="hljs-number">2</span>]<br>            sp -= <span class="hljs-number">2</span><br>            stack_data[sp] = a ^ b<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = a ^ b = stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">2</span>&#125;</span>] ^ stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">1</span>&#125;</span>] = 0x<span class="hljs-subst">&#123;a ^ b:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">15</span>:<br>            <span class="hljs-comment"># EQ</span><br>            b = stack_data[sp - <span class="hljs-number">1</span>]<br>            a = stack_data[sp - <span class="hljs-number">2</span>]<br>            sp -= <span class="hljs-number">2</span><br>            result = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> a == b <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            stack_data[sp] = result<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = (a == b) = stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">2</span>&#125;</span>] == stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">1</span>&#125;</span>] = 0x<span class="hljs-subst">&#123;result:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">16</span>:<br>            <span class="hljs-comment"># VERIFY</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\t=== VERIFY cipher check ===&quot;</span>)<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>                expected = cipher[j] - <span class="hljs-number">20</span><br>                actual = stack_data[j]<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;    stack[<span class="hljs-subst">&#123;j:2d&#125;</span>]=0x<span class="hljs-subst">&#123;actual:X&#125;</span> vs cipher[<span class="hljs-subst">&#123;j:2d&#125;</span>]-20=0x<span class="hljs-subst">&#123;expected:X&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ Verification complete.&quot;</span>)<br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 假设验证后程序结束</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">18</span>:<br>            <span class="hljs-comment"># JZ</span><br>            c = stack_data[sp - <span class="hljs-number">1</span>]<br>            sp -= <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tJZ if top==0 jump to <span class="hljs-subst">&#123;arg&#125;</span> (top=0x<span class="hljs-subst">&#123;c:X&#125;</span>)&quot;</span>)<br>            <span class="hljs-keyword">if</span> c == <span class="hljs-number">0</span>:<br>                i = arg * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>  <span class="hljs-comment"># 跳转到指定指令位置</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tUNKNOWN OPCODE <span class="hljs-subst">&#123;opcode&#125;</span>, abort&quot;</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>        i += <span class="hljs-number">2</span>  <span class="hljs-comment"># 下一条指令</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>过程：</p><p>每一步操作都是基于栈的，利用这三种运算<strong>异或（opcode&#x3D;14）</strong>、<strong>加法（opcode&#x3D;7）</strong>、<strong>减法（opcode&#x3D;8）</strong>，</p><p><em><strong>stack [2] 的生成为例（对应目标 t2）</strong></em></p><p>用户输入即co_consts的内容为x0-x15</p><p>步骤：</p><ul><li><p>[IP&#x3D;6]    加载 x2 到栈     stack[2] &#x3D; 0xFA &#x3D; x2；</p></li><li><p>[IP&#x3D;7]    加载 x1 到栈     stack[3] &#x3D; 0xC8 &#x3D; x1；</p></li><li><p>[IP&#x3D;8]    异或                   stack[2] &#x3D; stack[2]  ^ stack[3] &#x3D; x2 ^ x1；</p></li><li><p>[IP&#x3D;9]    加载 0到栈        stack[3] &#x3D; 0x0；</p></li><li><p>[IP&#x3D;10]   减法                  stack[2] &#x3D; stack[2] - stack[3]  &#x3D; stack[2] - 0  &#x3D; x2 ^ x1 。</p><p>需要满足x2 ^ x1 &#x3D; t2</p></li></ul><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[IP=0]</span>stack_data<span class="hljs-comment">[0]</span> = co_consts<span class="hljs-comment">[0]</span> = 0xB0<br><span class="hljs-comment">[IP=1]</span>stack_data<span class="hljs-comment">[1]</span> = co_consts<span class="hljs-comment">[1]</span> = 0xC8<br><span class="hljs-comment">[IP=2]</span>stack_data<span class="hljs-comment">[2]</span> = co_consts<span class="hljs-comment">[0]</span> = 0xB0<br><span class="hljs-comment">[IP=3]</span>stack_data<span class="hljs-comment">[1]</span> = a ^ b = stack_data<span class="hljs-comment">[1]</span> ^ stack_data<span class="hljs-comment">[2]</span> = 0x78<br><span class="hljs-comment">[IP=4]</span>stack_data<span class="hljs-comment">[2]</span> = co_consts<span class="hljs-comment">[16]</span> = 0x0<br><span class="hljs-comment">[IP=5]</span>stack_data<span class="hljs-comment">[1]</span> = a - b = stack_data<span class="hljs-comment">[1]</span> - stack_data<span class="hljs-comment">[2]</span> = 0x78<br><span class="hljs-comment">[IP=6]</span>stack_data<span class="hljs-comment">[2]</span> = co_consts<span class="hljs-comment">[2]</span> = 0xFA<br><span class="hljs-comment">[IP=7]</span>stack_data<span class="hljs-comment">[3]</span> = co_consts<span class="hljs-comment">[1]</span> = 0xC8<br><span class="hljs-comment">[IP=8]</span>stack_data<span class="hljs-comment">[2]</span> = a ^ b = stack_data<span class="hljs-comment">[2]</span> ^ stack_data<span class="hljs-comment">[3]</span> = 0x32<br><span class="hljs-comment">[IP=9]</span>stack_data<span class="hljs-comment">[3]</span> = co_consts<span class="hljs-comment">[17]</span> = 0x0<br><span class="hljs-comment">[IP=10]</span>stack_data<span class="hljs-comment">[2]</span> = a - b = stack_data<span class="hljs-comment">[2]</span> - stack_data<span class="hljs-comment">[3]</span> = 0x32<br><span class="hljs-comment">[IP=11]</span>stack_data<span class="hljs-comment">[3]</span> = co_consts<span class="hljs-comment">[3]</span> = 0x86<br><span class="hljs-comment">[IP=12]</span>stack_data<span class="hljs-comment">[4]</span> = co_consts<span class="hljs-comment">[2]</span> = 0xFA<br><span class="hljs-comment">[IP=13]</span>stack_data<span class="hljs-comment">[3]</span> = a ^ b = stack_data<span class="hljs-comment">[3]</span> ^ stack_data<span class="hljs-comment">[4]</span> = 0x7C<br><span class="hljs-comment">[IP=14]</span>stack_data<span class="hljs-comment">[4]</span> = co_consts<span class="hljs-comment">[18]</span> = 0x0<br><span class="hljs-comment">[IP=15]</span>stack_data<span class="hljs-comment">[3]</span> = a + b = stack_data<span class="hljs-comment">[3]</span> + stack_data<span class="hljs-comment">[4]</span> = 0x7C<br><span class="hljs-comment">[IP=16]</span>stack_data<span class="hljs-comment">[4]</span> = co_consts<span class="hljs-comment">[4]</span> = 0x6E<br><span class="hljs-comment">[IP=17]</span>stack_data<span class="hljs-comment">[5]</span> = co_consts<span class="hljs-comment">[3]</span> = 0x86<br><span class="hljs-comment">[IP=18]</span>stack_data<span class="hljs-comment">[4]</span> = a ^ b = stack_data<span class="hljs-comment">[4]</span> ^ stack_data<span class="hljs-comment">[5]</span> = 0xE8<br><span class="hljs-comment">[IP=19]</span>stack_data<span class="hljs-comment">[5]</span> = co_consts<span class="hljs-comment">[19]</span> = 0x0<br><span class="hljs-comment">[IP=20]</span>stack_data<span class="hljs-comment">[4]</span> = a + b = stack_data<span class="hljs-comment">[4]</span> + stack_data<span class="hljs-comment">[5]</span> = 0xE8<br><span class="hljs-comment">[IP=21]</span>stack_data<span class="hljs-comment">[5]</span> = co_consts<span class="hljs-comment">[5]</span> = 0x8F<br><span class="hljs-comment">[IP=22]</span>stack_data<span class="hljs-comment">[6]</span> = co_consts<span class="hljs-comment">[4]</span> = 0x6E<br><span class="hljs-comment">[IP=23]</span>stack_data<span class="hljs-comment">[5]</span> = a ^ b = stack_data<span class="hljs-comment">[5]</span> ^ stack_data<span class="hljs-comment">[6]</span> = 0xE1<br><span class="hljs-comment">[IP=24]</span>stack_data<span class="hljs-comment">[6]</span> = co_consts<span class="hljs-comment">[20]</span> = 0x0<br><span class="hljs-comment">[IP=25]</span>stack_data<span class="hljs-comment">[5]</span> = a - b = stack_data<span class="hljs-comment">[5]</span> - stack_data<span class="hljs-comment">[6]</span> = 0xE1<br><span class="hljs-comment">[IP=26]</span>stack_data<span class="hljs-comment">[6]</span> = co_consts<span class="hljs-comment">[6]</span> = 0xAF<br><span class="hljs-comment">[IP=27]</span>stack_data<span class="hljs-comment">[7]</span> = co_consts<span class="hljs-comment">[5]</span> = 0x8F<br><span class="hljs-comment">[IP=28]</span>stack_data<span class="hljs-comment">[6]</span> = a ^ b = stack_data<span class="hljs-comment">[6]</span> ^ stack_data<span class="hljs-comment">[7]</span> = 0x20<br><span class="hljs-comment">[IP=29]</span>stack_data<span class="hljs-comment">[7]</span> = co_consts<span class="hljs-comment">[21]</span> = 0x0<br><span class="hljs-comment">[IP=30]</span>stack_data<span class="hljs-comment">[6]</span> = a + b = stack_data<span class="hljs-comment">[6]</span> + stack_data<span class="hljs-comment">[7]</span> = 0x20<br><span class="hljs-comment">[IP=31]</span>stack_data<span class="hljs-comment">[7]</span> = co_consts<span class="hljs-comment">[7]</span> = 0xBF<br><span class="hljs-comment">[IP=32]</span>stack_data<span class="hljs-comment">[8]</span> = co_consts<span class="hljs-comment">[6]</span> = 0xAF<br><span class="hljs-comment">[IP=33]</span>stack_data<span class="hljs-comment">[7]</span> = a ^ b = stack_data<span class="hljs-comment">[7]</span> ^ stack_data<span class="hljs-comment">[8]</span> = 0x10<br><span class="hljs-comment">[IP=34]</span>stack_data<span class="hljs-comment">[8]</span> = co_consts<span class="hljs-comment">[22]</span> = 0x0<br><span class="hljs-comment">[IP=35]</span>stack_data<span class="hljs-comment">[7]</span> = a + b = stack_data<span class="hljs-comment">[7]</span> + stack_data<span class="hljs-comment">[8]</span> = 0x10<br><span class="hljs-comment">[IP=36]</span>stack_data<span class="hljs-comment">[8]</span> = co_consts<span class="hljs-comment">[8]</span> = 0xC9<br><span class="hljs-comment">[IP=37]</span>stack_data<span class="hljs-comment">[9]</span> = co_consts<span class="hljs-comment">[7]</span> = 0xBF<br><span class="hljs-comment">[IP=38]</span>stack_data<span class="hljs-comment">[8]</span> = a ^ b = stack_data<span class="hljs-comment">[8]</span> ^ stack_data<span class="hljs-comment">[9]</span> = 0x76<br><span class="hljs-comment">[IP=39]</span>stack_data<span class="hljs-comment">[9]</span> = co_consts<span class="hljs-comment">[23]</span> = 0x0<br><span class="hljs-comment">[IP=40]</span>stack_data<span class="hljs-comment">[8]</span> = a + b = stack_data<span class="hljs-comment">[8]</span> + stack_data<span class="hljs-comment">[9]</span> = 0x76<br><span class="hljs-comment">[IP=41]</span>stack_data<span class="hljs-comment">[9]</span> = co_consts<span class="hljs-comment">[9]</span> = 0x64<br><span class="hljs-comment">[IP=42]</span>stack_data<span class="hljs-comment">[10]</span> = co_consts<span class="hljs-comment">[8]</span> = 0xC9<br><span class="hljs-comment">[IP=43]</span>stack_data<span class="hljs-comment">[9]</span> = a ^ b = stack_data<span class="hljs-comment">[9]</span> ^ stack_data<span class="hljs-comment">[10]</span> = 0xAD<br><span class="hljs-comment">[IP=44]</span>stack_data<span class="hljs-comment">[10]</span> = co_consts<span class="hljs-comment">[24]</span> = 0x0<br><span class="hljs-comment">[IP=45]</span>stack_data<span class="hljs-comment">[9]</span> = a + b = stack_data<span class="hljs-comment">[9]</span> + stack_data<span class="hljs-comment">[10]</span> = 0xAD<br><span class="hljs-comment">[IP=46]</span>stack_data<span class="hljs-comment">[10]</span> = co_consts<span class="hljs-comment">[10]</span> = 0xD7<br><span class="hljs-comment">[IP=47]</span>stack_data<span class="hljs-comment">[11]</span> = co_consts<span class="hljs-comment">[9]</span> = 0x64<br><span class="hljs-comment">[IP=48]</span>stack_data<span class="hljs-comment">[10]</span> = a ^ b = stack_data<span class="hljs-comment">[10]</span> ^ stack_data<span class="hljs-comment">[11]</span> = 0xB3<br><span class="hljs-comment">[IP=49]</span>stack_data<span class="hljs-comment">[11]</span> = co_consts<span class="hljs-comment">[25]</span> = 0x0<br><span class="hljs-comment">[IP=50]</span>stack_data<span class="hljs-comment">[10]</span> = a + b = stack_data<span class="hljs-comment">[10]</span> + stack_data<span class="hljs-comment">[11]</span> = 0xB3<br><span class="hljs-comment">[IP=51]</span>stack_data<span class="hljs-comment">[11]</span> = co_consts<span class="hljs-comment">[11]</span> = 0xC3<br><span class="hljs-comment">[IP=52]</span>stack_data<span class="hljs-comment">[12]</span> = co_consts<span class="hljs-comment">[10]</span> = 0xD7<br><span class="hljs-comment">[IP=53]</span>stack_data<span class="hljs-comment">[11]</span> = a ^ b = stack_data<span class="hljs-comment">[11]</span> ^ stack_data<span class="hljs-comment">[12]</span> = 0x14<br><span class="hljs-comment">[IP=54]</span>stack_data<span class="hljs-comment">[12]</span> = co_consts<span class="hljs-comment">[26]</span> = 0x0<br><span class="hljs-comment">[IP=55]</span>stack_data<span class="hljs-comment">[11]</span> = a + b = stack_data<span class="hljs-comment">[11]</span> + stack_data<span class="hljs-comment">[12]</span> = 0x14<br><span class="hljs-comment">[IP=56]</span>stack_data<span class="hljs-comment">[12]</span> = co_consts<span class="hljs-comment">[12]</span> = 0xE3<br><span class="hljs-comment">[IP=57]</span>stack_data<span class="hljs-comment">[13]</span> = co_consts<span class="hljs-comment">[11]</span> = 0xC3<br><span class="hljs-comment">[IP=58]</span>stack_data<span class="hljs-comment">[12]</span> = a ^ b = stack_data<span class="hljs-comment">[12]</span> ^ stack_data<span class="hljs-comment">[13]</span> = 0x20<br><span class="hljs-comment">[IP=59]</span>stack_data<span class="hljs-comment">[13]</span> = co_consts<span class="hljs-comment">[27]</span> = 0x0<br><span class="hljs-comment">[IP=60]</span>stack_data<span class="hljs-comment">[12]</span> = a - b = stack_data<span class="hljs-comment">[12]</span> - stack_data<span class="hljs-comment">[13]</span> = 0x20<br><span class="hljs-comment">[IP=61]</span>stack_data<span class="hljs-comment">[13]</span> = co_consts<span class="hljs-comment">[13]</span> = 0xEF<br><span class="hljs-comment">[IP=62]</span>stack_data<span class="hljs-comment">[14]</span> = co_consts<span class="hljs-comment">[12]</span> = 0xE3<br><span class="hljs-comment">[IP=63]</span>stack_data<span class="hljs-comment">[13]</span> = a ^ b = stack_data<span class="hljs-comment">[13]</span> ^ stack_data<span class="hljs-comment">[14]</span> = 0xC<br><span class="hljs-comment">[IP=64]</span>stack_data<span class="hljs-comment">[14]</span> = co_consts<span class="hljs-comment">[28]</span> = 0x0<br><span class="hljs-comment">[IP=65]</span>stack_data<span class="hljs-comment">[13]</span> = a - b = stack_data<span class="hljs-comment">[13]</span> - stack_data<span class="hljs-comment">[14]</span> = 0xC<br><span class="hljs-comment">[IP=66]</span>stack_data<span class="hljs-comment">[14]</span> = co_consts<span class="hljs-comment">[14]</span> = 0x87<br><span class="hljs-comment">[IP=67]</span>stack_data<span class="hljs-comment">[15]</span> = co_consts<span class="hljs-comment">[13]</span> = 0xEF<br><span class="hljs-comment">[IP=68]</span>stack_data<span class="hljs-comment">[14]</span> = a ^ b = stack_data<span class="hljs-comment">[14]</span> ^ stack_data<span class="hljs-comment">[15]</span> = 0x68<br><span class="hljs-comment">[IP=69]</span>stack_data<span class="hljs-comment">[15]</span> = co_consts<span class="hljs-comment">[29]</span> = 0x0<br><span class="hljs-comment">[IP=70]</span>stack_data<span class="hljs-comment">[14]</span> = a + b = stack_data<span class="hljs-comment">[14]</span> + stack_data<span class="hljs-comment">[15]</span> = 0x68<br><span class="hljs-comment">[IP=71]</span>stack_data<span class="hljs-comment">[15]</span> = co_consts<span class="hljs-comment">[15]</span> = 0x0<br><span class="hljs-comment">[IP=72]</span>stack_data<span class="hljs-comment">[16]</span> = co_consts<span class="hljs-comment">[14]</span> = 0x87<br><span class="hljs-comment">[IP=73]</span>stack_data<span class="hljs-comment">[15]</span> = a ^ b = stack_data<span class="hljs-comment">[15]</span> ^ stack_data<span class="hljs-comment">[16]</span> = 0x87<br><span class="hljs-comment">[IP=74]</span>stack_data<span class="hljs-comment">[16]</span> = co_consts<span class="hljs-comment">[30]</span> = 0x0<br><span class="hljs-comment">[IP=75]</span>stack_data<span class="hljs-comment">[15]</span> = a - b = stack_data<span class="hljs-comment">[15]</span> - stack_data<span class="hljs-comment">[16]</span> = 0x87<br><span class="hljs-comment">[IP=76]</span>=== VERIFY cipher check ===<br>    stack<span class="hljs-comment">[ 0]</span>=0xB0 vs cipher<span class="hljs-comment">[ 0]</span>-20=0xDF<br>    stack<span class="hljs-comment">[ 1]</span>=0x78 vs cipher<span class="hljs-comment">[ 1]</span>-20=0x6E<br>    stack<span class="hljs-comment">[ 2]</span>=0x32 vs cipher<span class="hljs-comment">[ 2]</span>-20=0x-E<br>    stack<span class="hljs-comment">[ 3]</span>=0x7C vs cipher<span class="hljs-comment">[ 3]</span>-20=0x1E9<br>    stack<span class="hljs-comment">[ 4]</span>=0xE8 vs cipher<span class="hljs-comment">[ 4]</span>-20=0x13C<br>    stack<span class="hljs-comment">[ 5]</span>=0xE1 vs cipher<span class="hljs-comment">[ 5]</span>-20=0x24<br>    stack<span class="hljs-comment">[ 6]</span>=0x20 vs cipher<span class="hljs-comment">[ 6]</span>-20=0x9E<br>    stack<span class="hljs-comment">[ 7]</span>=0x10 vs cipher<span class="hljs-comment">[ 7]</span>-20=0xCA<br>    stack<span class="hljs-comment">[ 8]</span>=0x76 vs cipher<span class="hljs-comment">[ 8]</span>-20=0x146<br>    stack<span class="hljs-comment">[ 9]</span>=0xAD vs cipher<span class="hljs-comment">[ 9]</span>-20=0x183<br>    stack<span class="hljs-comment">[10]</span>=0xB3 vs cipher<span class="hljs-comment">[10]</span>-20=0x88<br>    stack<span class="hljs-comment">[11]</span>=0x14 vs cipher<span class="hljs-comment">[11]</span>-20=0x1C3<br>    stack<span class="hljs-comment">[12]</span>=0x20 vs cipher<span class="hljs-comment">[12]</span>-20=0x5A<br>    stack<span class="hljs-comment">[13]</span>=0xC vs cipher<span class="hljs-comment">[13]</span>-20=0x14<br>    stack<span class="hljs-comment">[14]</span>=0x68 vs cipher<span class="hljs-comment">[14]</span>-20=0x132<br>    stack<span class="hljs-comment">[15]</span>=0x87 vs cipher<span class="hljs-comment">[15]</span>-20=0x83<br><br></code></pre></td></tr></table></figure><p>最终解密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">cipher = [<span class="hljs-number">0xF3</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x97</span>]<br>target = [c - <span class="hljs-number">20</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cipher]<br>co_consts_fixed = [<span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x87</span>]<br><br>x = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br><br>x[<span class="hljs-number">0</span>] = target[<span class="hljs-number">0</span>]<br><br>x1_xor_x0 = target[<span class="hljs-number">1</span>] + co_consts_fixed[<span class="hljs-number">0</span>]<br>x[<span class="hljs-number">1</span>] = x1_xor_x0 ^ x[<span class="hljs-number">0</span>]<br>x1_xor_x0 = co_consts_fixed[<span class="hljs-number">0</span>] - target[<span class="hljs-number">1</span>]<br>x[<span class="hljs-number">1</span>] = x1_xor_x0 ^ x[<span class="hljs-number">0</span>]<br><br>x = [<br>    <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x4C</span>,<br>    <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x58</span><br>]<br><br><span class="hljs-comment"># 转换为32位十六进制（每个x[i]→2位，补0）</span><br>hex_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num:02x&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> x)<br><br><span class="hljs-comment"># 最终密码</span><br>password = <span class="hljs-string">f&quot;L3HCTF&#123;&#123;<span class="hljs-subst">&#123;hex_str&#125;</span>&#125;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确解密密码：&quot;</span>)<br><span class="hljs-built_in">print</span>(password)<br></code></pre></td></tr></table></figure><h1 id="ez-android"><a href="#ez-android" class="headerlink" title="ez_android"></a>ez_android</h1><p>这题也是花了一天多的时间才解决QAQ，真是不容易啊，还是得好好理解，多动动脑筋嘞~</p><p>直接在com目录下找到mainactivity，发现TauriActivity，不太清楚Tauri 框架是啥</p><p>在swdd的指导下先学习一下理论知识</p><hr><h2 id="TauriActivity"><a href="#TauriActivity" class="headerlink" title="TauriActivity"></a>TauriActivity</h2><p><code>TauriActivity</code> 是 Tauri 框架为 Android 平台提供的桥接 Activity 类，Tauri 是一个跨平台应用开发框架（主要用 Rust 编写），允许使用 Web 技术（HTML&#x2F;JS&#x2F;CSS） 构建前端，同时通过 Rust 后端实现逻辑。</p><p><code>TauriActivity</code> 的主要功能：</p><ol><li>提供一个 WebView 容器，加载应用前端（HTML&#x2F;JS）。</li><li>通过 JNI 调用 Rust 编译的共享库（<code>libtauri.so</code>）。</li><li>提供文件选择、权限处理、JS ↔ Rust 通信接口。</li></ol><hr><h4 id="Tauri-框架的静态资源提取方法"><a href="#Tauri-框架的静态资源提取方法" class="headerlink" title="Tauri 框架的静态资源提取方法:"></a><strong>Tauri 框架的静态资源提取方法:</strong></h4><p>先直接搜索关键词：index.html，交叉引用发现这里的包含文件名和文件位置的表</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507181759290.png" alt="image-20250718175941196"></p><p>以下代码把文件内容dump出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ida_python">import ida_bytes<br><br>addr = 0x00000000000C9498  <br>size = 0xEB                <br><br>dump = ida_bytes.get_bytes(addr, size)<br><br>file_path = r&quot;C:\Users\38489\Desktop\index_html.br&quot;<br>with open(file_path, &quot;wb&quot;) as f:<br>    f.write(dump)<br><br>print(f&quot;[+] 提取完成，文件已保存到: &#123;file_path&#125; (大小 &#123;len(dump)&#125; bytes)&quot;)<br></code></pre></td></tr></table></figure><p>由于我的idapython一直没法安装成功brotli，就先dump出来文件之后在本地解压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> brotli<br><br>compressed_file_path = <span class="hljs-string">r&quot;C:\Users\38489\Desktop\index_html.br&quot;</span><br>output_file_path = <span class="hljs-string">r&quot;C:\Users\38489\Desktop\dumpp&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(compressed_file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Compressed file size: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(content)&#125;</span> bytes&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">try_decompress</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> brotli.decompress(data)<br>    <span class="hljs-keyword">except</span> brotli.error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>decompressed = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(content), <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    decompressed = try_decompress(content[:i])<br>    <span class="hljs-keyword">if</span> decompressed <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> decompressed <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file_path, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(decompressed)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decompressed content written to <span class="hljs-subst">&#123;output_file_path&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to decompress the content.&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>然后就可以读取html文件内容啦</p><hr><h4 id="这题的解题wp："><a href="#这题的解题wp：" class="headerlink" title="这题的解题wp："></a>这题的解题wp：</h4><p>解包apk文件之后看看有啥内容</p><p>打开assets想要找到.js文件或者.html文件，但是只有prof文件，说明前端资源被打包或者压缩了，结合tauri框架，前端文件可能被打包进rust后端可执行文件里了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020931046.png" alt="image-20250717161547585"></p><p>ida反编译so文件</p><p>依照上面写的静态资源提取方法，解压缩index.html内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020931624.png" alt="image-20250718173951503"></p><p>index内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507181825791.png" alt="image-20250718182510695"></p><p>加载核心 JS，<code>index-BsFf5qny.js</code> 是打包后的 <strong>入口 JS</strong> 文件。负责启动 Vue 应用、挂载到 <code>#app</code>，以及通过 Tauri 的 API 调用 Rust 后端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;module&quot;</span> crossorigin src=<span class="hljs-string">&quot;/assets/index-BsFf5qny.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>和上述过程一样，继续搜索关键词，找到这个js文件，dump出来后解压</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507181742060.png" alt="image-20250718174211972"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs idapython">import ida_bytes<br>import idc<br>import os<br><br>OUT_DIR = r&quot;C:\Users\38489\Desktop&quot;<br>RES_NAME = &quot;index-BsFf5qny.js.br&quot;  <br><br>data_ea = idc.get_name_ea_simple(&quot;unk_C356F&quot;)<br>if data_ea == idc.BADADDR:<br>    raise RuntimeError(&quot;找不到符号 unk_C356F，请确认名字一致。&quot;)<br><br>comp_size = 0x5D50<br><br>print(f&quot;[+] Dumping resource from 0x&#123;data_ea:X&#125;, size 0x&#123;comp_size:X&#125; (&#123;comp_size&#125; bytes)&quot;)<br><br>blob = ida_bytes.get_bytes(data_ea, comp_size)<br>if blob is None:<br>    raise RuntimeError(&quot;读取资源失败（可能地址或长度不对）。&quot;)<br><br>os.makedirs(OUT_DIR, exist_ok=True)<br>out_path = os.path.join(OUT_DIR, RES_NAME)<br>with open(out_path, &quot;wb&quot;) as f:<br>    f.write(blob)<br><br>print(f&quot;[+] 写出压缩文件: &#123;out_path&#125; (size=&#123;len(blob)&#125; bytes)&quot;)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> brotli<br><br>in_path = <span class="hljs-string">r&quot;C:\Users\38489\Desktop\index-BsFf5qny.js.br&quot;</span><br>out_path = <span class="hljs-string">r&quot;C:\Users\38489\Desktop\index-BsFf5qny.js&quot;</span><br><br>data = <span class="hljs-built_in">open</span>(in_path, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-keyword">try</span>:<br>    dec = brotli.decompress(data)<br>    <span class="hljs-built_in">open</span>(out_path, <span class="hljs-string">&quot;wb&quot;</span>).write(dec)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 成功解压 -&gt;&quot;</span>, out_path, <span class="hljs-string">&quot;长度&quot;</span>, <span class="hljs-built_in">len</span>(dec))<br><span class="hljs-keyword">except</span> brotli.error <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] 解压失败:&quot;</span>, e)<br><br></code></pre></td></tr></table></figure><p>解压出来之后，找到关键点：js与后端rust交互，后端接口是greet，</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020931028.png" alt="image-20250718183114865"></p><p>直接在ida里搜索greet，找到函数，就是主加密函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020931733.png"></p><p>脚本</p><p>写脚本的时候还是要注意一下密文的提取，最后是v8的第19位与v19的第三位数据往后的八字节内容，当时脚本在密文这没好好分析，结果一直没出来，还是得注意一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br>TABLE = <span class="hljs-built_in">bytes</span>([<br>    <span class="hljs-number">0x64</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0x7A</span>,<br>    <span class="hljs-number">0x59</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x51</span>,<br>    <span class="hljs-number">0x57</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x72</span><br>])<br><br>target_values = [<br>    <span class="hljs-number">0x0A409663A025150C</span>,<br>    <span class="hljs-number">0x1FE106294065165C</span>,<br>    <span class="hljs-number">0xFC020A4C0E2C7290</span>,<br>    <span class="hljs-number">0x2A324F</span><br>]<br><br>full_data = <span class="hljs-string">b&#x27;&#x27;</span>.join(struct.pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, v) <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> target_values)<br>TARGET = full_data[:<span class="hljs-number">27</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol8</span>(<span class="hljs-params">x, n</span>): <span class="hljs-keyword">return</span> ((x &lt;&lt; (n&amp;<span class="hljs-number">7</span>)) | (x &gt;&gt; (<span class="hljs-number">8</span>-(n&amp;<span class="hljs-number">7</span>)))) &amp; <span class="hljs-number">0xFF</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror8</span>(<span class="hljs-params">x, n</span>): <span class="hljs-keyword">return</span> ((x &gt;&gt; (n&amp;<span class="hljs-number">7</span>)) | (x &lt;&lt; (<span class="hljs-number">8</span>-(n&amp;<span class="hljs-number">7</span>)))) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_byte</span>(<span class="hljs-params">i, b_in</span>):<br>    idx_mix = i <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">14</span> <span class="hljs-keyword">else</span> i - <span class="hljs-number">14</span><br>    tblA = TABLE[idx_mix]<br>    idx_dyn = (((<span class="hljs-number">2</span>*i) | <span class="hljs-number">1</span>) - <span class="hljs-number">14</span> * ((<span class="hljs-number">147</span> * ((<span class="hljs-number">2</span>*i) | <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">11</span>)) &amp; <span class="hljs-number">0xFF</span><br>    tblB = TABLE[idx_dyn % <span class="hljs-built_in">len</span>(TABLE)]<br>    rot_src = TABLE[(i + <span class="hljs-number">3</span>) % <span class="hljs-number">14</span>]<br>    xsrc    = TABLE[(i + <span class="hljs-number">4</span>) % <span class="hljs-number">14</span>]<br>    rot     = rot_src &amp; <span class="hljs-number">7</span><br>    v11 = (tblB + (b_in ^ tblA)) &amp; <span class="hljs-number">0xFF</span><br>    <span class="hljs-keyword">return</span> xsrc ^ rol8(v11, rot)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_byte</span>(<span class="hljs-params">i, b_out</span>):<br>    idx_mix = i <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">14</span> <span class="hljs-keyword">else</span> i - <span class="hljs-number">14</span><br>    tblA = TABLE[idx_mix]<br>    idx_dyn = (((<span class="hljs-number">2</span>*i) | <span class="hljs-number">1</span>) - <span class="hljs-number">14</span> * ((<span class="hljs-number">147</span> * ((<span class="hljs-number">2</span>*i) | <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">11</span>)) &amp; <span class="hljs-number">0xFF</span><br>    tblB = TABLE[idx_dyn % <span class="hljs-built_in">len</span>(TABLE)]<br>    rot_src = TABLE[(i + <span class="hljs-number">3</span>) % <span class="hljs-number">14</span>]<br>    xsrc    = TABLE[(i + <span class="hljs-number">4</span>) % <span class="hljs-number">14</span>]<br>    rot     = rot_src &amp; <span class="hljs-number">7</span><br>    r   = b_out ^ xsrc<br>    v11 = ror8(r, rot)<br>    tmp = (v11 - tblB) &amp; <span class="hljs-number">0xFF</span><br>    <span class="hljs-keyword">return</span> tmp ^ tblA<br><br>recovered = <span class="hljs-built_in">bytes</span>(reverse_byte(i, TARGET[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(TARGET)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered 27-byte input:&quot;</span>, recovered)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hex:&quot;</span>, recovered.<span class="hljs-built_in">hex</span>())<br><br>recheck = <span class="hljs-built_in">bytes</span>(forward_byte(i, recovered[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(TARGET)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Forward recompute matches TARGET?:&quot;</span>, recheck == TARGET)<br><br></code></pre></td></tr></table></figure><p>完结撒花~</p><p>另附，学习这位师傅的tauri框架静态资源提取的方法<a href="https://blog.yllhwa.com/2023/05/09/Tauri%20%E6%A1%86%E6%9E%B6%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/">https://blog.yllhwa.com/2023/05/09/Tauri%20%E6%A1%86%E6%9E%B6%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>花指令-近跳转和call0h型</title>
    <link href="/2025/06/02/%E8%8A%B1%E6%8C%87%E4%BB%A4-%E8%BF%91%E8%B7%B3%E8%BD%AC%E5%92%8Ccall0h%E5%9E%8B/"/>
    <url>/2025/06/02/%E8%8A%B1%E6%8C%87%E4%BB%A4-%E8%BF%91%E8%B7%B3%E8%BD%AC%E5%92%8Ccall0h%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>根据<a href="https://xz.aliyun.com/news/14062">https://xz.aliyun.com/news/14062</a> 这位师傅的文章学习来的</p><p>这两道题目的花指令都是近跳转和call 0h型</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022341874.png" alt="image-20250602234135782"></p><h3 id="1、LitCTF-2025-easy-tea"><a href="#1、LitCTF-2025-easy-tea" class="headerlink" title="1、LitCTF 2025 | easy_tea"></a>1、LitCTF 2025 | easy_tea</h3><p>直接shift+f2找到主要的加密位置，然后看到花，把这个近跳转nop，然后下面的函数按d转为机器码，有好几处花，都直接nop掉</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337395.png" alt="img"></p><p>然后一整个部分再按p识别成函数，然后f5，</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337449.png" alt="img"></p><p>这里主tea加密部分仍然看不到，进去之后看到这一部分还是花，nop掉之后，把下面的部分按d，最后直接按p和f5反汇编和上面的操作一样</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337445.png" alt="img"></p><p>就是这个</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337401.png" alt="img"></p><h3 id="2、camellia-练习"><a href="#2、camellia-练习" class="headerlink" title="2、camellia-练习"></a>2、camellia-练习</h3><p>这个题也一样，把近跳转nop掉之后，再把下面的那段按d看机器码更方便</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337040.png" alt="img"></p><p>这里就是要nop掉的，call 0h类型</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337415.png" alt="img"></p><p>如果看不出来也可以把这一小段按c强制编译看汇编，这里就是花指令，nop掉</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022336973.png" alt="img"></p><p>然后再把剩下的那一段按c强制编译，没啥问题，已经除掉花了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022336957.png" alt="img"></p><p>然后f5看伪代码，发现这里的加密函数位置还有无法编译的花指令</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337991.png" alt="img"></p><p>进入那个函数，还是一样的思路，nop掉之后反编译就能看到代码了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022358942.png" alt="img"></p><p>这就是主要的tea加密算法，解密就行</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022336945.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unity逆向il2cpp打包</title>
    <link href="/2025/05/29/unity%E9%80%86%E5%90%91il2cpp%E6%89%93%E5%8C%85/"/>
    <url>/2025/05/29/unity%E9%80%86%E5%90%91il2cpp%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="unity逆向-il2cpp"><a href="#unity逆向-il2cpp" class="headerlink" title="unity逆向-il2cpp"></a>unity逆向-il2cpp</h1><h3 id="LitCTF-2025-Robbie-Wanna-Revenge"><a href="#LitCTF-2025-Robbie-Wanna-Revenge" class="headerlink" title="LitCTF 2025-Robbie Wanna Revenge"></a>LitCTF 2025-Robbie Wanna Revenge</h3><p>il2cpp打包的unity游戏题，在网上搜了文章，</p><p>根据晓梦的文章<a href="https://xz.aliyun.com/news/15811">https://xz.aliyun.com/news/15811</a></p><p>和swdd的文章<a href="https://blog.csdn.net/qq_24481913/article/details/148234091?sharetype=blogdetail&sharerId=148234091&sharerefer=PC&sharesource=qq_24481913&spm=1011.2480.3001.8118">https://blog.csdn.net/qq_24481913/article/details/148234091?sharetype=blogdetail&amp;sharerId=148234091&amp;sharerefer=PC&amp;sharesource=qq_24481913&amp;spm=1011.2480.3001.8118</a></p><p>利用ilcppdumper提取il2cpp等文件，这是il2cppdumper下载的网址<a href="https://github.com/Perfare/Il2CppDumper/">https://github.com/Perfare/Il2CppDumper/</a></p><p>在终端输入命令 <code>.\Il2CppDumper.exe 文件名.dll 文件名.dat output</code>，dll文件就是GameAssembly.dll</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291128040.png" alt="image-20250528233715951"></p><p>直接运行命令发现报错，识别不到，再看dll文件，加了壳</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291144110.png" alt="image-20250528213639891"></p><p>还修改了特征码，用010改回来之后再脱壳</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291147990.png" alt="image-20250528223136275"></p><p>脱壳之后再运行命令。就成功dump了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291147004.png" alt="image-20250528223115942"></p><p>这就是dump出来的文件</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291522063.png" alt="image-20250528234206707"></p><p>用dnspy查看Assembly-CSharp.dll（来自dump后的文件中）的内容，找到playerhealth函数的内容，这里面主要是通过playerdied来判断角色是否死亡，</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291523692.png" alt="image-20250528225350874"></p><p>用ida打开脱壳后的GameAssembly.dll文件，再附加文件，左上角file&#x2F;script file，附加ida_with_struct_py3.py和script.json文件，然后再加上il2cpp.h文件</p><p>等到加载完成之后，找到对应的playerhealth函数的位置，看汇编，找到对应位置，把下面的jnz改为jmp（强跳转）</p><p>ps：这里强跳转就是 把jnz对应的机器码0F 85改为jmp的机器码90 E9</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291523443.png" alt="image-20250528225834456"></p><p>修改成功之后就是这样，然后patch保存之后再重新运行游戏就是无敌状态了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291147003.png" alt="image-20250528231357969"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[document  .querySelector('#web_bg')  .setAttribute('style', `background-image: ${document.querySelector('.banner').style.background.split(' ')[0]};position: fixed;width: 100%;height: 100%;z-index: -1;background-size: cover;`);document  .querySelector("#banner")  .setAttribute('style', 'background-image: url()')document  .querySelector("#banner .mask")  .setAttribute('style', 'background-color:rgba(0,0,0,0)')]]></content>
    
  </entry>
  
  
  
</search>
